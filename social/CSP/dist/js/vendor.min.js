/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp"];
/******/ 	window["webpackJsonp"] = function webpackJsonpCallback(chunkIds, moreModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, callbacks = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId])
/******/ 				callbacks.push.apply(callbacks, installedChunks[chunkId]);
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			modules[moduleId] = moreModules[moduleId];
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);
/******/ 		while(callbacks.length)
/******/ 			callbacks.shift().call(null, __webpack_require__);
/******/ 		if(moreModules[0]) {
/******/ 			installedModules[0] = 0;
/******/ 			return __webpack_require__(0);
/******/ 		}
/******/ 	};

/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// object to store loaded and loading chunks
/******/ 	// "0" means "already loaded"
/******/ 	// Array means "loading", array contains callbacks
/******/ 	var installedChunks = {
/******/ 		1:0
/******/ 	};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}

/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId, callback) {
/******/ 		// "0" is the signal for "already loaded"
/******/ 		if(installedChunks[chunkId] === 0)
/******/ 			return callback.call(null, __webpack_require__);

/******/ 		// an array means "currently loading".
/******/ 		if(installedChunks[chunkId] !== undefined) {
/******/ 			installedChunks[chunkId].push(callback);
/******/ 		} else {
/******/ 			// start chunk loading
/******/ 			installedChunks[chunkId] = [callback];
/******/ 			var head = document.getElementsByTagName('head')[0];
/******/ 			var script = document.createElement('script');
/******/ 			script.type = 'text/javascript';
/******/ 			script.charset = 'utf-8';
/******/ 			script.async = true;

/******/ 			script.src = __webpack_require__.p + "" + chunkId + "." + ({"0":"csp"}[chunkId]||chunkId) + ".min.js";
/******/ 			head.appendChild(script);
/******/ 		}
/******/ 	};

/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	__webpack_require__(13);
	__webpack_require__(4);
	__webpack_require__(206);
	__webpack_require__(6);
	__webpack_require__(5);
	module.exports = __webpack_require__(56);


/***/ },

/***/ 2:
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(global, process) {/*!\n * Vue.js v1.0.26\n * (c) 2016 Evan You\n * Released under the MIT License.\n */\n'use strict';\n\nfunction set(obj, key, val) {\n  if (hasOwn(obj, key)) {\n    obj[key] = val;\n    return;\n  }\n  if (obj._isVue) {\n    set(obj._data, key, val);\n    return;\n  }\n  var ob = obj.__ob__;\n  if (!ob) {\n    obj[key] = val;\n    return;\n  }\n  ob.convert(key, val);\n  ob.dep.notify();\n  if (ob.vms) {\n    var i = ob.vms.length;\n    while (i--) {\n      var vm = ob.vms[i];\n      vm._proxy(key);\n      vm._digest();\n    }\n  }\n  return val;\n}\n\n/**\n * Delete a property and trigger change if necessary.\n *\n * @param {Object} obj\n * @param {String} key\n */\n\nfunction del(obj, key) {\n  if (!hasOwn(obj, key)) {\n    return;\n  }\n  delete obj[key];\n  var ob = obj.__ob__;\n  if (!ob) {\n    if (obj._isVue) {\n      delete obj._data[key];\n      obj._digest();\n    }\n    return;\n  }\n  ob.dep.notify();\n  if (ob.vms) {\n    var i = ob.vms.length;\n    while (i--) {\n      var vm = ob.vms[i];\n      vm._unproxy(key);\n      vm._digest();\n    }\n  }\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\n * Check whether the object has the property.\n *\n * @param {Object} obj\n * @param {String} key\n * @return {Boolean}\n */\n\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n\n/**\n * Check if an expression is a literal value.\n *\n * @param {String} exp\n * @return {Boolean}\n */\n\nvar literalValueRE = /^\\s?(true|false|-?[\\d\\.]+|'[^']*'|\"[^\"]*\")\\s?$/;\n\nfunction isLiteral(exp) {\n  return literalValueRE.test(exp);\n}\n\n/**\n * Check if a string starts with $ or _\n *\n * @param {String} str\n * @return {Boolean}\n */\n\nfunction isReserved(str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F;\n}\n\n/**\n * Guard text output, make sure undefined outputs\n * empty string\n *\n * @param {*} value\n * @return {String}\n */\n\nfunction _toString(value) {\n  return value == null ? '' : value.toString();\n}\n\n/**\n * Check and convert possible numeric strings to numbers\n * before setting back to data\n *\n * @param {*} value\n * @return {*|Number}\n */\n\nfunction toNumber(value) {\n  if (typeof value !== 'string') {\n    return value;\n  } else {\n    var parsed = Number(value);\n    return isNaN(parsed) ? value : parsed;\n  }\n}\n\n/**\n * Convert string boolean literals into real booleans.\n *\n * @param {*} value\n * @return {*|Boolean}\n */\n\nfunction toBoolean(value) {\n  return value === 'true' ? true : value === 'false' ? false : value;\n}\n\n/**\n * Strip quotes from a string\n *\n * @param {String} str\n * @return {String | false}\n */\n\nfunction stripQuotes(str) {\n  var a = str.charCodeAt(0);\n  var b = str.charCodeAt(str.length - 1);\n  return a === b && (a === 0x22 || a === 0x27) ? str.slice(1, -1) : str;\n}\n\n/**\n * Camelize a hyphen-delmited string.\n *\n * @param {String} str\n * @return {String}\n */\n\nvar camelizeRE = /-(\\w)/g;\n\nfunction camelize(str) {\n  return str.replace(camelizeRE, toUpper);\n}\n\nfunction toUpper(_, c) {\n  return c ? c.toUpperCase() : '';\n}\n\n/**\n * Hyphenate a camelCase string.\n *\n * @param {String} str\n * @return {String}\n */\n\nvar hyphenateRE = /([a-z\\d])([A-Z])/g;\n\nfunction hyphenate(str) {\n  return str.replace(hyphenateRE, '$1-$2').toLowerCase();\n}\n\n/**\n * Converts hyphen/underscore/slash delimitered names into\n * camelized classNames.\n *\n * e.g. my-component => MyComponent\n *      some_else    => SomeElse\n *      some/comp    => SomeComp\n *\n * @param {String} str\n * @return {String}\n */\n\nvar classifyRE = /(?:^|[-_\\/])(\\w)/g;\n\nfunction classify(str) {\n  return str.replace(classifyRE, toUpper);\n}\n\n/**\n * Simple bind, faster than native\n *\n * @param {Function} fn\n * @param {Object} ctx\n * @return {Function}\n */\n\nfunction bind(fn, ctx) {\n  return function (a) {\n    var l = arguments.length;\n    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);\n  };\n}\n\n/**\n * Convert an Array-like object to a real Array.\n *\n * @param {Array-like} list\n * @param {Number} [start] - start index\n * @return {Array}\n */\n\nfunction toArray(list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret;\n}\n\n/**\n * Mix properties into target object.\n *\n * @param {Object} to\n * @param {Object} from\n */\n\nfunction extend(to, from) {\n  var keys = Object.keys(from);\n  var i = keys.length;\n  while (i--) {\n    to[keys[i]] = from[keys[i]];\n  }\n  return to;\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n *\n * @param {*} obj\n * @return {Boolean}\n */\n\nfunction isObject(obj) {\n  return obj !== null && typeof obj === 'object';\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n *\n * @param {*} obj\n * @return {Boolean}\n */\n\nvar toString = Object.prototype.toString;\nvar OBJECT_STRING = '[object Object]';\n\nfunction isPlainObject(obj) {\n  return toString.call(obj) === OBJECT_STRING;\n}\n\n/**\n * Array type check.\n *\n * @param {*} obj\n * @return {Boolean}\n */\n\nvar isArray = Array.isArray;\n\n/**\n * Define a property.\n *\n * @param {Object} obj\n * @param {String} key\n * @param {*} val\n * @param {Boolean} [enumerable]\n */\n\nfunction def(obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Debounce a function so it only gets called after the\n * input stops arriving after the given wait period.\n *\n * @param {Function} func\n * @param {Number} wait\n * @return {Function} - the debounced function\n */\n\nfunction _debounce(func, wait) {\n  var timeout, args, context, timestamp, result;\n  var later = function later() {\n    var last = Date.now() - timestamp;\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    }\n  };\n  return function () {\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    if (!timeout) {\n      timeout = setTimeout(later, wait);\n    }\n    return result;\n  };\n}\n\n/**\n * Manual indexOf because it's slightly faster than\n * native.\n *\n * @param {Array} arr\n * @param {*} obj\n */\n\nfunction indexOf(arr, obj) {\n  var i = arr.length;\n  while (i--) {\n    if (arr[i] === obj) return i;\n  }\n  return -1;\n}\n\n/**\n * Make a cancellable version of an async callback.\n *\n * @param {Function} fn\n * @return {Function}\n */\n\nfunction cancellable(fn) {\n  var cb = function cb() {\n    if (!cb.cancelled) {\n      return fn.apply(this, arguments);\n    }\n  };\n  cb.cancel = function () {\n    cb.cancelled = true;\n  };\n  return cb;\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n *\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n */\n\nfunction looseEqual(a, b) {\n  /* eslint-disable eqeqeq */\n  return a == b || (isObject(a) && isObject(b) ? JSON.stringify(a) === JSON.stringify(b) : false);\n  /* eslint-enable eqeqeq */\n}\n\nvar hasProto = ('__proto__' in {});\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined' && Object.prototype.toString.call(window) !== '[object Object]';\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n// UA sniffing for working around browser-specific quirks\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && UA.indexOf('trident') > 0;\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isAndroid = UA && UA.indexOf('android') > 0;\nvar isIos = UA && /(iphone|ipad|ipod|ios)/i.test(UA);\nvar iosVersionMatch = isIos && UA.match(/os ([\\d_]+)/);\nvar iosVersion = iosVersionMatch && iosVersionMatch[1].split('_');\n\n// detecting iOS UIWebView by indexedDB\nvar hasMutationObserverBug = iosVersion && Number(iosVersion[0]) >= 9 && Number(iosVersion[1]) >= 3 && !window.indexedDB;\n\nvar transitionProp = undefined;\nvar transitionEndEvent = undefined;\nvar animationProp = undefined;\nvar animationEndEvent = undefined;\n\n// Transition property/event sniffing\nif (inBrowser && !isIE9) {\n  var isWebkitTrans = window.ontransitionend === undefined && window.onwebkittransitionend !== undefined;\n  var isWebkitAnim = window.onanimationend === undefined && window.onwebkitanimationend !== undefined;\n  transitionProp = isWebkitTrans ? 'WebkitTransition' : 'transition';\n  transitionEndEvent = isWebkitTrans ? 'webkitTransitionEnd' : 'transitionend';\n  animationProp = isWebkitAnim ? 'WebkitAnimation' : 'animation';\n  animationEndEvent = isWebkitAnim ? 'webkitAnimationEnd' : 'animationend';\n}\n\n/**\n * Defer a task to execute it asynchronously. Ideally this\n * should be executed as a microtask, so we leverage\n * MutationObserver if it's available, and fallback to\n * setTimeout(0).\n *\n * @param {Function} cb\n * @param {Object} ctx\n */\n\nvar nextTick = (function () {\n  var callbacks = [];\n  var pending = false;\n  var timerFunc;\n  function nextTickHandler() {\n    pending = false;\n    var copies = callbacks.slice(0);\n    callbacks = [];\n    for (var i = 0; i < copies.length; i++) {\n      copies[i]();\n    }\n  }\n\n  /* istanbul ignore if */\n  if (typeof MutationObserver !== 'undefined' && !hasMutationObserverBug) {\n    var counter = 1;\n    var observer = new MutationObserver(nextTickHandler);\n    var textNode = document.createTextNode(counter);\n    observer.observe(textNode, {\n      characterData: true\n    });\n    timerFunc = function () {\n      counter = (counter + 1) % 2;\n      textNode.data = counter;\n    };\n  } else {\n    // webpack attempts to inject a shim for setImmediate\n    // if it is used as a global, so we have to work around that to\n    // avoid bundling unnecessary code.\n    var context = inBrowser ? window : typeof global !== 'undefined' ? global : {};\n    timerFunc = context.setImmediate || setTimeout;\n  }\n  return function (cb, ctx) {\n    var func = ctx ? function () {\n      cb.call(ctx);\n    } : cb;\n    callbacks.push(func);\n    if (pending) return;\n    pending = true;\n    timerFunc(nextTickHandler, 0);\n  };\n})();\n\nvar _Set = undefined;\n/* istanbul ignore if */\nif (typeof Set !== 'undefined' && Set.toString().match(/native code/)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = function () {\n    this.set = Object.create(null);\n  };\n  _Set.prototype.has = function (key) {\n    return this.set[key] !== undefined;\n  };\n  _Set.prototype.add = function (key) {\n    this.set[key] = 1;\n  };\n  _Set.prototype.clear = function () {\n    this.set = Object.create(null);\n  };\n}\n\nfunction Cache(limit) {\n  this.size = 0;\n  this.limit = limit;\n  this.head = this.tail = undefined;\n  this._keymap = Object.create(null);\n}\n\nvar p = Cache.prototype;\n\n/**\n * Put <value> into the cache associated with <key>.\n * Returns the entry which was removed to make room for\n * the new entry. Otherwise undefined is returned.\n * (i.e. if there was enough room already).\n *\n * @param {String} key\n * @param {*} value\n * @return {Entry|undefined}\n */\n\np.put = function (key, value) {\n  var removed;\n\n  var entry = this.get(key, true);\n  if (!entry) {\n    if (this.size === this.limit) {\n      removed = this.shift();\n    }\n    entry = {\n      key: key\n    };\n    this._keymap[key] = entry;\n    if (this.tail) {\n      this.tail.newer = entry;\n      entry.older = this.tail;\n    } else {\n      this.head = entry;\n    }\n    this.tail = entry;\n    this.size++;\n  }\n  entry.value = value;\n\n  return removed;\n};\n\n/**\n * Purge the least recently used (oldest) entry from the\n * cache. Returns the removed entry or undefined if the\n * cache was empty.\n */\n\np.shift = function () {\n  var entry = this.head;\n  if (entry) {\n    this.head = this.head.newer;\n    this.head.older = undefined;\n    entry.newer = entry.older = undefined;\n    this._keymap[entry.key] = undefined;\n    this.size--;\n  }\n  return entry;\n};\n\n/**\n * Get and register recent use of <key>. Returns the value\n * associated with <key> or undefined if not in cache.\n *\n * @param {String} key\n * @param {Boolean} returnEntry\n * @return {Entry|*}\n */\n\np.get = function (key, returnEntry) {\n  var entry = this._keymap[key];\n  if (entry === undefined) return;\n  if (entry === this.tail) {\n    return returnEntry ? entry : entry.value;\n  }\n  // HEAD--------------TAIL\n  //   <.older   .newer>\n  //  <--- add direction --\n  //   A  B  C  <D>  E\n  if (entry.newer) {\n    if (entry === this.head) {\n      this.head = entry.newer;\n    }\n    entry.newer.older = entry.older; // C <-- E.\n  }\n  if (entry.older) {\n    entry.older.newer = entry.newer; // C. --> E\n  }\n  entry.newer = undefined; // D --x\n  entry.older = this.tail; // D. --> E\n  if (this.tail) {\n    this.tail.newer = entry; // E. <-- D\n  }\n  this.tail = entry;\n  return returnEntry ? entry : entry.value;\n};\n\nvar cache$1 = new Cache(1000);\nvar filterTokenRE = /[^\\s'\"]+|'[^']*'|\"[^\"]*\"/g;\nvar reservedArgRE = /^in$|^-?\\d+/;\n\n/**\n * Parser state\n */\n\nvar str;\nvar dir;\nvar c;\nvar prev;\nvar i;\nvar l;\nvar lastFilterIndex;\nvar inSingle;\nvar inDouble;\nvar curly;\nvar square;\nvar paren;\n/**\n * Push a filter to the current directive object\n */\n\nfunction pushFilter() {\n  var exp = str.slice(lastFilterIndex, i).trim();\n  var filter;\n  if (exp) {\n    filter = {};\n    var tokens = exp.match(filterTokenRE);\n    filter.name = tokens[0];\n    if (tokens.length > 1) {\n      filter.args = tokens.slice(1).map(processFilterArg);\n    }\n  }\n  if (filter) {\n    (dir.filters = dir.filters || []).push(filter);\n  }\n  lastFilterIndex = i + 1;\n}\n\n/**\n * Check if an argument is dynamic and strip quotes.\n *\n * @param {String} arg\n * @return {Object}\n */\n\nfunction processFilterArg(arg) {\n  if (reservedArgRE.test(arg)) {\n    return {\n      value: toNumber(arg),\n      dynamic: false\n    };\n  } else {\n    var stripped = stripQuotes(arg);\n    var dynamic = stripped === arg;\n    return {\n      value: dynamic ? arg : stripped,\n      dynamic: dynamic\n    };\n  }\n}\n\n/**\n * Parse a directive value and extract the expression\n * and its filters into a descriptor.\n *\n * Example:\n *\n * \"a + 1 | uppercase\" will yield:\n * {\n *   expression: 'a + 1',\n *   filters: [\n *     { name: 'uppercase', args: null }\n *   ]\n * }\n *\n * @param {String} s\n * @return {Object}\n */\n\nfunction parseDirective(s) {\n  var hit = cache$1.get(s);\n  if (hit) {\n    return hit;\n  }\n\n  // reset parser state\n  str = s;\n  inSingle = inDouble = false;\n  curly = square = paren = 0;\n  lastFilterIndex = 0;\n  dir = {};\n\n  for (i = 0, l = str.length; i < l; i++) {\n    prev = c;\n    c = str.charCodeAt(i);\n    if (inSingle) {\n      // check single quote\n      if (c === 0x27 && prev !== 0x5C) inSingle = !inSingle;\n    } else if (inDouble) {\n      // check double quote\n      if (c === 0x22 && prev !== 0x5C) inDouble = !inDouble;\n    } else if (c === 0x7C && // pipe\n    str.charCodeAt(i + 1) !== 0x7C && str.charCodeAt(i - 1) !== 0x7C) {\n      if (dir.expression == null) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1;\n        dir.expression = str.slice(0, i).trim();\n      } else {\n        // already has filter\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 0x22:\n          inDouble = true;break; // \"\n        case 0x27:\n          inSingle = true;break; // '\n        case 0x28:\n          paren++;break; // (\n        case 0x29:\n          paren--;break; // )\n        case 0x5B:\n          square++;break; // [\n        case 0x5D:\n          square--;break; // ]\n        case 0x7B:\n          curly++;break; // {\n        case 0x7D:\n          curly--;break; // }\n      }\n    }\n  }\n\n  if (dir.expression == null) {\n    dir.expression = str.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n\n  cache$1.put(s, dir);\n  return dir;\n}\n\nvar directive = Object.freeze({\n  parseDirective: parseDirective\n});\n\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\nvar cache = undefined;\nvar tagRE = undefined;\nvar htmlRE = undefined;\n/**\n * Escape a string so it can be used in a RegExp\n * constructor.\n *\n * @param {String} str\n */\n\nfunction escapeRegex(str) {\n  return str.replace(regexEscapeRE, '\\\\$&');\n}\n\nfunction compileRegex() {\n  var open = escapeRegex(config.delimiters[0]);\n  var close = escapeRegex(config.delimiters[1]);\n  var unsafeOpen = escapeRegex(config.unsafeDelimiters[0]);\n  var unsafeClose = escapeRegex(config.unsafeDelimiters[1]);\n  tagRE = new RegExp(unsafeOpen + '((?:.|\\\\n)+?)' + unsafeClose + '|' + open + '((?:.|\\\\n)+?)' + close, 'g');\n  htmlRE = new RegExp('^' + unsafeOpen + '((?:.|\\\\n)+?)' + unsafeClose + '$');\n  // reset cache\n  cache = new Cache(1000);\n}\n\n/**\n * Parse a template text string into an array of tokens.\n *\n * @param {String} text\n * @return {Array<Object> | null}\n *               - {String} type\n *               - {String} value\n *               - {Boolean} [html]\n *               - {Boolean} [oneTime]\n */\n\nfunction parseText(text) {\n  if (!cache) {\n    compileRegex();\n  }\n  var hit = cache.get(text);\n  if (hit) {\n    return hit;\n  }\n  if (!tagRE.test(text)) {\n    return null;\n  }\n  var tokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index, html, value, first, oneTime;\n  /* eslint-disable no-cond-assign */\n  while (match = tagRE.exec(text)) {\n    /* eslint-enable no-cond-assign */\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      tokens.push({\n        value: text.slice(lastIndex, index)\n      });\n    }\n    // tag token\n    html = htmlRE.test(match[0]);\n    value = html ? match[1] : match[2];\n    first = value.charCodeAt(0);\n    oneTime = first === 42; // *\n    value = oneTime ? value.slice(1) : value;\n    tokens.push({\n      tag: true,\n      value: value.trim(),\n      html: html,\n      oneTime: oneTime\n    });\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    tokens.push({\n      value: text.slice(lastIndex)\n    });\n  }\n  cache.put(text, tokens);\n  return tokens;\n}\n\n/**\n * Format a list of tokens into an expression.\n * e.g. tokens parsed from 'a {{b}} c' can be serialized\n * into one single expression as '\"a \" + b + \" c\"'.\n *\n * @param {Array} tokens\n * @param {Vue} [vm]\n * @return {String}\n */\n\nfunction tokensToExp(tokens, vm) {\n  if (tokens.length > 1) {\n    return tokens.map(function (token) {\n      return formatToken(token, vm);\n    }).join('+');\n  } else {\n    return formatToken(tokens[0], vm, true);\n  }\n}\n\n/**\n * Format a single token.\n *\n * @param {Object} token\n * @param {Vue} [vm]\n * @param {Boolean} [single]\n * @return {String}\n */\n\nfunction formatToken(token, vm, single) {\n  return token.tag ? token.oneTime && vm ? '\"' + vm.$eval(token.value) + '\"' : inlineFilters(token.value, single) : '\"' + token.value + '\"';\n}\n\n/**\n * For an attribute with multiple interpolation tags,\n * e.g. attr=\"some-{{thing | filter}}\", in order to combine\n * the whole thing into a single watchable expression, we\n * have to inline those filters. This function does exactly\n * that. This is a bit hacky but it avoids heavy changes\n * to directive parser and watcher mechanism.\n *\n * @param {String} exp\n * @param {Boolean} single\n * @return {String}\n */\n\nvar filterRE = /[^|]\\|[^|]/;\nfunction inlineFilters(exp, single) {\n  if (!filterRE.test(exp)) {\n    return single ? exp : '(' + exp + ')';\n  } else {\n    var dir = parseDirective(exp);\n    if (!dir.filters) {\n      return '(' + exp + ')';\n    } else {\n      return 'this._applyFilters(' + dir.expression + // value\n      ',null,' + // oldValue (null for read)\n      JSON.stringify(dir.filters) + // filter descriptors\n      ',false)'; // write?\n    }\n  }\n}\n\nvar text = Object.freeze({\n  compileRegex: compileRegex,\n  parseText: parseText,\n  tokensToExp: tokensToExp\n});\n\nvar delimiters = ['{{', '}}'];\nvar unsafeDelimiters = ['{{{', '}}}'];\n\nvar config = Object.defineProperties({\n\n  /**\n   * Whether to print debug messages.\n   * Also enables stack trace for warnings.\n   *\n   * @type {Boolean}\n   */\n\n  debug: false,\n\n  /**\n   * Whether to suppress warnings.\n   *\n   * @type {Boolean}\n   */\n\n  silent: false,\n\n  /**\n   * Whether to use async rendering.\n   */\n\n  async: true,\n\n  /**\n   * Whether to warn against errors caught when evaluating\n   * expressions.\n   */\n\n  warnExpressionErrors: true,\n\n  /**\n   * Whether to allow devtools inspection.\n   * Disabled by default in production builds.\n   */\n\n  devtools: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Internal flag to indicate the delimiters have been\n   * changed.\n   *\n   * @type {Boolean}\n   */\n\n  _delimitersChanged: true,\n\n  /**\n   * List of asset types that a component can own.\n   *\n   * @type {Array}\n   */\n\n  _assetTypes: ['component', 'directive', 'elementDirective', 'filter', 'transition', 'partial'],\n\n  /**\n   * prop binding modes\n   */\n\n  _propBindingModes: {\n    ONE_WAY: 0,\n    TWO_WAY: 1,\n    ONE_TIME: 2\n  },\n\n  /**\n   * Max circular updates allowed in a batcher flush cycle.\n   */\n\n  _maxUpdateCount: 100\n\n}, {\n  delimiters: { /**\n                 * Interpolation delimiters. Changing these would trigger\n                 * the text parser to re-compile the regular expressions.\n                 *\n                 * @type {Array<String>}\n                 */\n\n    get: function get() {\n      return delimiters;\n    },\n    set: function set(val) {\n      delimiters = val;\n      compileRegex();\n    },\n    configurable: true,\n    enumerable: true\n  },\n  unsafeDelimiters: {\n    get: function get() {\n      return unsafeDelimiters;\n    },\n    set: function set(val) {\n      unsafeDelimiters = val;\n      compileRegex();\n    },\n    configurable: true,\n    enumerable: true\n  }\n});\n\nvar warn = undefined;\nvar formatComponentName = undefined;\n\nif (process.env.NODE_ENV !== 'production') {\n  (function () {\n    var hasConsole = typeof console !== 'undefined';\n\n    warn = function (msg, vm) {\n      if (hasConsole && !config.silent) {\n        console.error('[Vue warn]: ' + msg + (vm ? formatComponentName(vm) : ''));\n      }\n    };\n\n    formatComponentName = function (vm) {\n      var name = vm._isVue ? vm.$options.name : vm.name;\n      return name ? ' (found in component: <' + hyphenate(name) + '>)' : '';\n    };\n  })();\n}\n\n/**\n * Append with transition.\n *\n * @param {Element} el\n * @param {Element} target\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nfunction appendWithTransition(el, target, vm, cb) {\n  applyTransition(el, 1, function () {\n    target.appendChild(el);\n  }, vm, cb);\n}\n\n/**\n * InsertBefore with transition.\n *\n * @param {Element} el\n * @param {Element} target\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nfunction beforeWithTransition(el, target, vm, cb) {\n  applyTransition(el, 1, function () {\n    before(el, target);\n  }, vm, cb);\n}\n\n/**\n * Remove with transition.\n *\n * @param {Element} el\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nfunction removeWithTransition(el, vm, cb) {\n  applyTransition(el, -1, function () {\n    remove(el);\n  }, vm, cb);\n}\n\n/**\n * Apply transitions with an operation callback.\n *\n * @param {Element} el\n * @param {Number} direction\n *                  1: enter\n *                 -1: leave\n * @param {Function} op - the actual DOM operation\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nfunction applyTransition(el, direction, op, vm, cb) {\n  var transition = el.__v_trans;\n  if (!transition ||\n  // skip if there are no js hooks and CSS transition is\n  // not supported\n  !transition.hooks && !transitionEndEvent ||\n  // skip transitions for initial compile\n  !vm._isCompiled ||\n  // if the vm is being manipulated by a parent directive\n  // during the parent's compilation phase, skip the\n  // animation.\n  vm.$parent && !vm.$parent._isCompiled) {\n    op();\n    if (cb) cb();\n    return;\n  }\n  var action = direction > 0 ? 'enter' : 'leave';\n  transition[action](op, cb);\n}\n\nvar transition = Object.freeze({\n  appendWithTransition: appendWithTransition,\n  beforeWithTransition: beforeWithTransition,\n  removeWithTransition: removeWithTransition,\n  applyTransition: applyTransition\n});\n\n/**\n * Query an element selector if it's not an element already.\n *\n * @param {String|Element} el\n * @return {Element}\n */\n\nfunction query(el) {\n  if (typeof el === 'string') {\n    var selector = el;\n    el = document.querySelector(el);\n    if (!el) {\n      process.env.NODE_ENV !== 'production' && warn('Cannot find element: ' + selector);\n    }\n  }\n  return el;\n}\n\n/**\n * Check if a node is in the document.\n * Note: document.documentElement.contains should work here\n * but always returns false for comment nodes in phantomjs,\n * making unit tests difficult. This is fixed by doing the\n * contains() check on the node's parentNode instead of\n * the node itself.\n *\n * @param {Node} node\n * @return {Boolean}\n */\n\nfunction inDoc(node) {\n  if (!node) return false;\n  var doc = node.ownerDocument.documentElement;\n  var parent = node.parentNode;\n  return doc === node || doc === parent || !!(parent && parent.nodeType === 1 && doc.contains(parent));\n}\n\n/**\n * Get and remove an attribute from a node.\n *\n * @param {Node} node\n * @param {String} _attr\n */\n\nfunction getAttr(node, _attr) {\n  var val = node.getAttribute(_attr);\n  if (val !== null) {\n    node.removeAttribute(_attr);\n  }\n  return val;\n}\n\n/**\n * Get an attribute with colon or v-bind: prefix.\n *\n * @param {Node} node\n * @param {String} name\n * @return {String|null}\n */\n\nfunction getBindAttr(node, name) {\n  var val = getAttr(node, ':' + name);\n  if (val === null) {\n    val = getAttr(node, 'v-bind:' + name);\n  }\n  return val;\n}\n\n/**\n * Check the presence of a bind attribute.\n *\n * @param {Node} node\n * @param {String} name\n * @return {Boolean}\n */\n\nfunction hasBindAttr(node, name) {\n  return node.hasAttribute(name) || node.hasAttribute(':' + name) || node.hasAttribute('v-bind:' + name);\n}\n\n/**\n * Insert el before target\n *\n * @param {Element} el\n * @param {Element} target\n */\n\nfunction before(el, target) {\n  target.parentNode.insertBefore(el, target);\n}\n\n/**\n * Insert el after target\n *\n * @param {Element} el\n * @param {Element} target\n */\n\nfunction after(el, target) {\n  if (target.nextSibling) {\n    before(el, target.nextSibling);\n  } else {\n    target.parentNode.appendChild(el);\n  }\n}\n\n/**\n * Remove el from DOM\n *\n * @param {Element} el\n */\n\nfunction remove(el) {\n  el.parentNode.removeChild(el);\n}\n\n/**\n * Prepend el to target\n *\n * @param {Element} el\n * @param {Element} target\n */\n\nfunction prepend(el, target) {\n  if (target.firstChild) {\n    before(el, target.firstChild);\n  } else {\n    target.appendChild(el);\n  }\n}\n\n/**\n * Replace target with el\n *\n * @param {Element} target\n * @param {Element} el\n */\n\nfunction replace(target, el) {\n  var parent = target.parentNode;\n  if (parent) {\n    parent.replaceChild(el, target);\n  }\n}\n\n/**\n * Add event listener shorthand.\n *\n * @param {Element} el\n * @param {String} event\n * @param {Function} cb\n * @param {Boolean} [useCapture]\n */\n\nfunction on(el, event, cb, useCapture) {\n  el.addEventListener(event, cb, useCapture);\n}\n\n/**\n * Remove event listener shorthand.\n *\n * @param {Element} el\n * @param {String} event\n * @param {Function} cb\n */\n\nfunction off(el, event, cb) {\n  el.removeEventListener(event, cb);\n}\n\n/**\n * For IE9 compat: when both class and :class are present\n * getAttribute('class') returns wrong value...\n *\n * @param {Element} el\n * @return {String}\n */\n\nfunction getClass(el) {\n  var classname = el.className;\n  if (typeof classname === 'object') {\n    classname = classname.baseVal || '';\n  }\n  return classname;\n}\n\n/**\n * In IE9, setAttribute('class') will result in empty class\n * if the element also has the :class attribute; However in\n * PhantomJS, setting `className` does not work on SVG elements...\n * So we have to do a conditional check here.\n *\n * @param {Element} el\n * @param {String} cls\n */\n\nfunction setClass(el, cls) {\n  /* istanbul ignore if */\n  if (isIE9 && !/svg$/.test(el.namespaceURI)) {\n    el.className = cls;\n  } else {\n    el.setAttribute('class', cls);\n  }\n}\n\n/**\n * Add class with compatibility for IE & SVG\n *\n * @param {Element} el\n * @param {String} cls\n */\n\nfunction addClass(el, cls) {\n  if (el.classList) {\n    el.classList.add(cls);\n  } else {\n    var cur = ' ' + getClass(el) + ' ';\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      setClass(el, (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for IE & SVG\n *\n * @param {Element} el\n * @param {String} cls\n */\n\nfunction removeClass(el, cls) {\n  if (el.classList) {\n    el.classList.remove(cls);\n  } else {\n    var cur = ' ' + getClass(el) + ' ';\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    setClass(el, cur.trim());\n  }\n  if (!el.className) {\n    el.removeAttribute('class');\n  }\n}\n\n/**\n * Extract raw content inside an element into a temporary\n * container div\n *\n * @param {Element} el\n * @param {Boolean} asFragment\n * @return {Element|DocumentFragment}\n */\n\nfunction extractContent(el, asFragment) {\n  var child;\n  var rawContent;\n  /* istanbul ignore if */\n  if (isTemplate(el) && isFragment(el.content)) {\n    el = el.content;\n  }\n  if (el.hasChildNodes()) {\n    trimNode(el);\n    rawContent = asFragment ? document.createDocumentFragment() : document.createElement('div');\n    /* eslint-disable no-cond-assign */\n    while (child = el.firstChild) {\n      /* eslint-enable no-cond-assign */\n      rawContent.appendChild(child);\n    }\n  }\n  return rawContent;\n}\n\n/**\n * Trim possible empty head/tail text and comment\n * nodes inside a parent.\n *\n * @param {Node} node\n */\n\nfunction trimNode(node) {\n  var child;\n  /* eslint-disable no-sequences */\n  while ((child = node.firstChild, isTrimmable(child))) {\n    node.removeChild(child);\n  }\n  while ((child = node.lastChild, isTrimmable(child))) {\n    node.removeChild(child);\n  }\n  /* eslint-enable no-sequences */\n}\n\nfunction isTrimmable(node) {\n  return node && (node.nodeType === 3 && !node.data.trim() || node.nodeType === 8);\n}\n\n/**\n * Check if an element is a template tag.\n * Note if the template appears inside an SVG its tagName\n * will be in lowercase.\n *\n * @param {Element} el\n */\n\nfunction isTemplate(el) {\n  return el.tagName && el.tagName.toLowerCase() === 'template';\n}\n\n/**\n * Create an \"anchor\" for performing dom insertion/removals.\n * This is used in a number of scenarios:\n * - fragment instance\n * - v-html\n * - v-if\n * - v-for\n * - component\n *\n * @param {String} content\n * @param {Boolean} persist - IE trashes empty textNodes on\n *                            cloneNode(true), so in certain\n *                            cases the anchor needs to be\n *                            non-empty to be persisted in\n *                            templates.\n * @return {Comment|Text}\n */\n\nfunction createAnchor(content, persist) {\n  var anchor = config.debug ? document.createComment(content) : document.createTextNode(persist ? ' ' : '');\n  anchor.__v_anchor = true;\n  return anchor;\n}\n\n/**\n * Find a component ref attribute that starts with $.\n *\n * @param {Element} node\n * @return {String|undefined}\n */\n\nvar refRE = /^v-ref:/;\n\nfunction findRef(node) {\n  if (node.hasAttributes()) {\n    var attrs = node.attributes;\n    for (var i = 0, l = attrs.length; i < l; i++) {\n      var name = attrs[i].name;\n      if (refRE.test(name)) {\n        return camelize(name.replace(refRE, ''));\n      }\n    }\n  }\n}\n\n/**\n * Map a function to a range of nodes .\n *\n * @param {Node} node\n * @param {Node} end\n * @param {Function} op\n */\n\nfunction mapNodeRange(node, end, op) {\n  var next;\n  while (node !== end) {\n    next = node.nextSibling;\n    op(node);\n    node = next;\n  }\n  op(end);\n}\n\n/**\n * Remove a range of nodes with transition, store\n * the nodes in a fragment with correct ordering,\n * and call callback when done.\n *\n * @param {Node} start\n * @param {Node} end\n * @param {Vue} vm\n * @param {DocumentFragment} frag\n * @param {Function} cb\n */\n\nfunction removeNodeRange(start, end, vm, frag, cb) {\n  var done = false;\n  var removed = 0;\n  var nodes = [];\n  mapNodeRange(start, end, function (node) {\n    if (node === end) done = true;\n    nodes.push(node);\n    removeWithTransition(node, vm, onRemoved);\n  });\n  function onRemoved() {\n    removed++;\n    if (done && removed >= nodes.length) {\n      for (var i = 0; i < nodes.length; i++) {\n        frag.appendChild(nodes[i]);\n      }\n      cb && cb();\n    }\n  }\n}\n\n/**\n * Check if a node is a DocumentFragment.\n *\n * @param {Node} node\n * @return {Boolean}\n */\n\nfunction isFragment(node) {\n  return node && node.nodeType === 11;\n}\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n *\n * @param {Element} el\n * @return {String}\n */\n\nfunction getOuterHTML(el) {\n  if (el.outerHTML) {\n    return el.outerHTML;\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML;\n  }\n}\n\nvar commonTagRE = /^(div|p|span|img|a|b|i|br|ul|ol|li|h1|h2|h3|h4|h5|h6|code|pre|table|th|td|tr|form|label|input|select|option|nav|article|section|header|footer)$/i;\nvar reservedTagRE = /^(slot|partial|component)$/i;\n\nvar isUnknownElement = undefined;\nif (process.env.NODE_ENV !== 'production') {\n  isUnknownElement = function (el, tag) {\n    if (tag.indexOf('-') > -1) {\n      // http://stackoverflow.com/a/28210364/1070244\n      return el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;\n    } else {\n      return (/HTMLUnknownElement/.test(el.toString()) &&\n        // Chrome returns unknown for several HTML5 elements.\n        // https://code.google.com/p/chromium/issues/detail?id=540526\n        // Firefox returns unknown for some \"Interactive elements.\"\n        !/^(data|time|rtc|rb|details|dialog|summary)$/.test(tag)\n      );\n    }\n  };\n}\n\n/**\n * Check if an element is a component, if yes return its\n * component id.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Object|undefined}\n */\n\nfunction checkComponentAttr(el, options) {\n  var tag = el.tagName.toLowerCase();\n  var hasAttrs = el.hasAttributes();\n  if (!commonTagRE.test(tag) && !reservedTagRE.test(tag)) {\n    if (resolveAsset(options, 'components', tag)) {\n      return { id: tag };\n    } else {\n      var is = hasAttrs && getIsBinding(el, options);\n      if (is) {\n        return is;\n      } else if (process.env.NODE_ENV !== 'production') {\n        var expectedTag = options._componentNameMap && options._componentNameMap[tag];\n        if (expectedTag) {\n          warn('Unknown custom element: <' + tag + '> - ' + 'did you mean <' + expectedTag + '>? ' + 'HTML is case-insensitive, remember to use kebab-case in templates.');\n        } else if (isUnknownElement(el, tag)) {\n          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the \"name\" option.');\n        }\n      }\n    }\n  } else if (hasAttrs) {\n    return getIsBinding(el, options);\n  }\n}\n\n/**\n * Get \"is\" binding from an element.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Object|undefined}\n */\n\nfunction getIsBinding(el, options) {\n  // dynamic syntax\n  var exp = el.getAttribute('is');\n  if (exp != null) {\n    if (resolveAsset(options, 'components', exp)) {\n      el.removeAttribute('is');\n      return { id: exp };\n    }\n  } else {\n    exp = getBindAttr(el, 'is');\n    if (exp != null) {\n      return { id: exp, dynamic: true };\n    }\n  }\n}\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n *\n * All strategy functions follow the same signature:\n *\n * @param {*} parentVal\n * @param {*} childVal\n * @param {Vue} [vm]\n */\n\nvar strats = config.optionMergeStrategies = Object.create(null);\n\n/**\n * Helper that recursively merges two data objects together.\n */\n\nfunction mergeData(to, from) {\n  var key, toVal, fromVal;\n  for (key in from) {\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (isObject(toVal) && isObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to;\n}\n\n/**\n * Data\n */\n\nstrats.data = function (parentVal, childVal, vm) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal;\n    }\n    if (typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn('The \"data\" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);\n      return parentVal;\n    }\n    if (!parentVal) {\n      return childVal;\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn() {\n      return mergeData(childVal.call(this), parentVal.call(this));\n    };\n  } else if (parentVal || childVal) {\n    return function mergedInstanceDataFn() {\n      // instance merge\n      var instanceData = typeof childVal === 'function' ? childVal.call(vm) : childVal;\n      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm) : undefined;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData);\n      } else {\n        return defaultData;\n      }\n    };\n  }\n};\n\n/**\n * El\n */\n\nstrats.el = function (parentVal, childVal, vm) {\n  if (!vm && childVal && typeof childVal !== 'function') {\n    process.env.NODE_ENV !== 'production' && warn('The \"el\" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);\n    return;\n  }\n  var ret = childVal || parentVal;\n  // invoke the element factory if this is instance merge\n  return vm && typeof ret === 'function' ? ret.call(vm) : ret;\n};\n\n/**\n * Hooks and param attributes are merged as arrays.\n */\n\nstrats.init = strats.created = strats.ready = strats.attached = strats.detached = strats.beforeCompile = strats.compiled = strats.beforeDestroy = strats.destroyed = strats.activate = function (parentVal, childVal) {\n  return childVal ? parentVal ? parentVal.concat(childVal) : isArray(childVal) ? childVal : [childVal] : parentVal;\n};\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\n\nfunction mergeAssets(parentVal, childVal) {\n  var res = Object.create(parentVal || null);\n  return childVal ? extend(res, guardArrayAssets(childVal)) : res;\n}\n\nconfig._assetTypes.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Events & Watchers.\n *\n * Events & watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\n\nstrats.watch = strats.events = function (parentVal, childVal) {\n  if (!childVal) return parentVal;\n  if (!parentVal) return childVal;\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key in childVal) {\n    var parent = ret[key];\n    var child = childVal[key];\n    if (parent && !isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key] = parent ? parent.concat(child) : [child];\n  }\n  return ret;\n};\n\n/**\n * Other object hashes.\n */\n\nstrats.props = strats.methods = strats.computed = function (parentVal, childVal) {\n  if (!childVal) return parentVal;\n  if (!parentVal) return childVal;\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  extend(ret, childVal);\n  return ret;\n};\n\n/**\n * Default strategy.\n */\n\nvar defaultStrat = function defaultStrat(parentVal, childVal) {\n  return childVal === undefined ? parentVal : childVal;\n};\n\n/**\n * Make sure component options get converted to actual\n * constructors.\n *\n * @param {Object} options\n */\n\nfunction guardComponents(options) {\n  if (options.components) {\n    var components = options.components = guardArrayAssets(options.components);\n    var ids = Object.keys(components);\n    var def;\n    if (process.env.NODE_ENV !== 'production') {\n      var map = options._componentNameMap = {};\n    }\n    for (var i = 0, l = ids.length; i < l; i++) {\n      var key = ids[i];\n      if (commonTagRE.test(key) || reservedTagRE.test(key)) {\n        process.env.NODE_ENV !== 'production' && warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + key);\n        continue;\n      }\n      // record a all lowercase <-> kebab-case mapping for\n      // possible custom element case error warning\n      if (process.env.NODE_ENV !== 'production') {\n        map[key.replace(/-/g, '').toLowerCase()] = hyphenate(key);\n      }\n      def = components[key];\n      if (isPlainObject(def)) {\n        components[key] = Vue.extend(def);\n      }\n    }\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n *\n * @param {Object} options\n */\n\nfunction guardProps(options) {\n  var props = options.props;\n  var i, val;\n  if (isArray(props)) {\n    options.props = {};\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        options.props[val] = null;\n      } else if (val.name) {\n        options.props[val.name] = val;\n      }\n    }\n  } else if (isPlainObject(props)) {\n    var keys = Object.keys(props);\n    i = keys.length;\n    while (i--) {\n      val = props[keys[i]];\n      if (typeof val === 'function') {\n        props[keys[i]] = { type: val };\n      }\n    }\n  }\n}\n\n/**\n * Guard an Array-format assets option and converted it\n * into the key-value Object format.\n *\n * @param {Object|Array} assets\n * @return {Object}\n */\n\nfunction guardArrayAssets(assets) {\n  if (isArray(assets)) {\n    var res = {};\n    var i = assets.length;\n    var asset;\n    while (i--) {\n      asset = assets[i];\n      var id = typeof asset === 'function' ? asset.options && asset.options.name || asset.id : asset.name || asset.id;\n      if (!id) {\n        process.env.NODE_ENV !== 'production' && warn('Array-syntax assets must provide a \"name\" or \"id\" field.');\n      } else {\n        res[id] = asset;\n      }\n    }\n    return res;\n  }\n  return assets;\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n *\n * @param {Object} parent\n * @param {Object} child\n * @param {Vue} [vm] - if vm is present, indicates this is\n *                     an instantiation merge.\n */\n\nfunction mergeOptions(parent, child, vm) {\n  guardComponents(child);\n  guardProps(child);\n  if (process.env.NODE_ENV !== 'production') {\n    if (child.propsData && !vm) {\n      warn('propsData can only be used as an instantiation option.');\n    }\n  }\n  var options = {};\n  var key;\n  if (child['extends']) {\n    parent = typeof child['extends'] === 'function' ? mergeOptions(parent, child['extends'].options, vm) : mergeOptions(parent, child['extends'], vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      var mixin = child.mixins[i];\n      var mixinOptions = mixin.prototype instanceof Vue ? mixin.options : mixin;\n      parent = mergeOptions(parent, mixinOptions, vm);\n    }\n  }\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField(key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options;\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n *\n * @param {Object} options\n * @param {String} type\n * @param {String} id\n * @param {Boolean} warnMissing\n * @return {Object|Function}\n */\n\nfunction resolveAsset(options, type, id, warnMissing) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return;\n  }\n  var assets = options[type];\n  var camelizedId;\n  var res = assets[id] ||\n  // camelCase ID\n  assets[camelizedId = camelize(id)] ||\n  // Pascal Case ID\n  assets[camelizedId.charAt(0).toUpperCase() + camelizedId.slice(1)];\n  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {\n    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);\n  }\n  return res;\n}\n\nvar uid$1 = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n *\n * @constructor\n */\nfunction Dep() {\n  this.id = uid$1++;\n  this.subs = [];\n}\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\n\n/**\n * Add a directive subscriber.\n *\n * @param {Directive} sub\n */\n\nDep.prototype.addSub = function (sub) {\n  this.subs.push(sub);\n};\n\n/**\n * Remove a directive subscriber.\n *\n * @param {Directive} sub\n */\n\nDep.prototype.removeSub = function (sub) {\n  this.subs.$remove(sub);\n};\n\n/**\n * Add self as a dependency to the target watcher.\n */\n\nDep.prototype.depend = function () {\n  Dep.target.addDep(this);\n};\n\n/**\n * Notify all subscribers of a new value.\n */\n\nDep.prototype.notify = function () {\n  // stablize the subscriber list first\n  var subs = toArray(this.subs);\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto)\n\n/**\n * Intercept mutating methods and emit events\n */\n\n;['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator() {\n    // avoid leaking arguments:\n    // http://jsperf.com/closure-with-arguments\n    var i = arguments.length;\n    var args = new Array(i);\n    while (i--) {\n      args[i] = arguments[i];\n    }\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n        inserted = args;\n        break;\n      case 'unshift':\n        inserted = args;\n        break;\n      case 'splice':\n        inserted = args.slice(2);\n        break;\n    }\n    if (inserted) ob.observeArray(inserted);\n    // notify change\n    ob.dep.notify();\n    return result;\n  });\n});\n\n/**\n * Swap the element at the given index with a new value\n * and emits corresponding event.\n *\n * @param {Number} index\n * @param {*} val\n * @return {*} - replaced element\n */\n\ndef(arrayProto, '$set', function $set(index, val) {\n  if (index >= this.length) {\n    this.length = Number(index) + 1;\n  }\n  return this.splice(index, 1, val)[0];\n});\n\n/**\n * Convenience method to remove the element at given index or target element reference.\n *\n * @param {*} item\n */\n\ndef(arrayProto, '$remove', function $remove(item) {\n  /* istanbul ignore if */\n  if (!this.length) return;\n  var index = indexOf(this, item);\n  if (index > -1) {\n    return this.splice(index, 1);\n  }\n});\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * By default, when a reactive property is set, the new value is\n * also converted to become reactive. However in certain cases, e.g.\n * v-for scope alias and props, we don't want to force conversion\n * because the value may be a nested value under a frozen data structure.\n *\n * So whenever we want to set a reactive property without forcing\n * conversion on the new value, we wrap that call inside this function.\n */\n\nvar shouldConvert = true;\n\nfunction withoutConversion(fn) {\n  shouldConvert = false;\n  fn();\n  shouldConvert = true;\n}\n\n/**\n * Observer class that are attached to each observed\n * object. Once attached, the observer converts target\n * object's property keys into getter/setters that\n * collect dependencies and dispatches updates.\n *\n * @param {Array|Object} value\n * @constructor\n */\n\nfunction Observer(value) {\n  this.value = value;\n  this.dep = new Dep();\n  def(value, '__ob__', this);\n  if (isArray(value)) {\n    var augment = hasProto ? protoAugment : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n}\n\n// Instance methods\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n *\n * @param {Object} obj\n */\n\nObserver.prototype.walk = function (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0, l = keys.length; i < l; i++) {\n    this.convert(keys[i], obj[keys[i]]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n *\n * @param {Array} items\n */\n\nObserver.prototype.observeArray = function (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n/**\n * Convert a property into getter/setter so we can emit\n * the events when the property is accessed/changed.\n *\n * @param {String} key\n * @param {*} val\n */\n\nObserver.prototype.convert = function (key, val) {\n  defineReactive(this.value, key, val);\n};\n\n/**\n * Add an owner vm, so that when $set/$delete mutations\n * happen we can notify owner vms to proxy the keys and\n * digest the watchers. This is only called when the object\n * is observed as an instance's root $data.\n *\n * @param {Vue} vm\n */\n\nObserver.prototype.addVm = function (vm) {\n  (this.vms || (this.vms = [])).push(vm);\n};\n\n/**\n * Remove an owner vm. This is called when the object is\n * swapped out as an instance's $data object.\n *\n * @param {Vue} vm\n */\n\nObserver.prototype.removeVm = function (vm) {\n  this.vms.$remove(vm);\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n *\n * @param {Object|Array} target\n * @param {Object} src\n */\n\nfunction protoAugment(target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n *\n * @param {Object|Array} target\n * @param {Object} proto\n */\n\nfunction copyAugment(target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n *\n * @param {*} value\n * @param {Vue} [vm]\n * @return {Observer|undefined}\n * @static\n */\n\nfunction observe(value, vm) {\n  if (!value || typeof value !== 'object') {\n    return;\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (shouldConvert && (isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {\n    ob = new Observer(value);\n  }\n  if (ob && vm) {\n    ob.addVm(vm);\n  }\n  return ob;\n}\n\n/**\n * Define a reactive property on an Object.\n *\n * @param {Object} obj\n * @param {String} key\n * @param {*} val\n */\n\nfunction defineReactive(obj, key, val) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return;\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n\n  var childOb = observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter() {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n        }\n        if (isArray(value)) {\n          for (var e, i = 0, l = value.length; i < l; i++) {\n            e = value[i];\n            e && e.__ob__ && e.__ob__.dep.depend();\n          }\n        }\n      }\n      return value;\n    },\n    set: function reactiveSetter(newVal) {\n      var value = getter ? getter.call(obj) : val;\n      if (newVal === value) {\n        return;\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n\n\nvar util = Object.freeze({\n\tdefineReactive: defineReactive,\n\tset: set,\n\tdel: del,\n\thasOwn: hasOwn,\n\tisLiteral: isLiteral,\n\tisReserved: isReserved,\n\t_toString: _toString,\n\ttoNumber: toNumber,\n\ttoBoolean: toBoolean,\n\tstripQuotes: stripQuotes,\n\tcamelize: camelize,\n\thyphenate: hyphenate,\n\tclassify: classify,\n\tbind: bind,\n\ttoArray: toArray,\n\textend: extend,\n\tisObject: isObject,\n\tisPlainObject: isPlainObject,\n\tdef: def,\n\tdebounce: _debounce,\n\tindexOf: indexOf,\n\tcancellable: cancellable,\n\tlooseEqual: looseEqual,\n\tisArray: isArray,\n\thasProto: hasProto,\n\tinBrowser: inBrowser,\n\tdevtools: devtools,\n\tisIE: isIE,\n\tisIE9: isIE9,\n\tisAndroid: isAndroid,\n\tisIos: isIos,\n\tiosVersionMatch: iosVersionMatch,\n\tiosVersion: iosVersion,\n\thasMutationObserverBug: hasMutationObserverBug,\n\tget transitionProp () { return transitionProp; },\n\tget transitionEndEvent () { return transitionEndEvent; },\n\tget animationProp () { return animationProp; },\n\tget animationEndEvent () { return animationEndEvent; },\n\tnextTick: nextTick,\n\tget _Set () { return _Set; },\n\tquery: query,\n\tinDoc: inDoc,\n\tgetAttr: getAttr,\n\tgetBindAttr: getBindAttr,\n\thasBindAttr: hasBindAttr,\n\tbefore: before,\n\tafter: after,\n\tremove: remove,\n\tprepend: prepend,\n\treplace: replace,\n\ton: on,\n\toff: off,\n\tsetClass: setClass,\n\taddClass: addClass,\n\tremoveClass: removeClass,\n\textractContent: extractContent,\n\ttrimNode: trimNode,\n\tisTemplate: isTemplate,\n\tcreateAnchor: createAnchor,\n\tfindRef: findRef,\n\tmapNodeRange: mapNodeRange,\n\tremoveNodeRange: removeNodeRange,\n\tisFragment: isFragment,\n\tgetOuterHTML: getOuterHTML,\n\tmergeOptions: mergeOptions,\n\tresolveAsset: resolveAsset,\n\tcheckComponentAttr: checkComponentAttr,\n\tcommonTagRE: commonTagRE,\n\treservedTagRE: reservedTagRE,\n\tget warn () { return warn; }\n});\n\nvar uid = 0;\n\nfunction initMixin (Vue) {\n  /**\n   * The main init sequence. This is called for every\n   * instance, including ones that are created from extended\n   * constructors.\n   *\n   * @param {Object} options - this options object should be\n   *                           the result of merging class\n   *                           options and the options passed\n   *                           in to the constructor.\n   */\n\n  Vue.prototype._init = function (options) {\n    options = options || {};\n\n    this.$el = null;\n    this.$parent = options.parent;\n    this.$root = this.$parent ? this.$parent.$root : this;\n    this.$children = [];\n    this.$refs = {}; // child vm references\n    this.$els = {}; // element references\n    this._watchers = []; // all watchers as an array\n    this._directives = []; // all directives\n\n    // a uid\n    this._uid = uid++;\n\n    // a flag to avoid this being observed\n    this._isVue = true;\n\n    // events bookkeeping\n    this._events = {}; // registered callbacks\n    this._eventsCount = {}; // for $broadcast optimization\n\n    // fragment instance properties\n    this._isFragment = false;\n    this._fragment = // @type {DocumentFragment}\n    this._fragmentStart = // @type {Text|Comment}\n    this._fragmentEnd = null; // @type {Text|Comment}\n\n    // lifecycle state\n    this._isCompiled = this._isDestroyed = this._isReady = this._isAttached = this._isBeingDestroyed = this._vForRemoving = false;\n    this._unlinkFn = null;\n\n    // context:\n    // if this is a transcluded component, context\n    // will be the common parent vm of this instance\n    // and its host.\n    this._context = options._context || this.$parent;\n\n    // scope:\n    // if this is inside an inline v-for, the scope\n    // will be the intermediate scope created for this\n    // repeat fragment. this is used for linking props\n    // and container directives.\n    this._scope = options._scope;\n\n    // fragment:\n    // if this instance is compiled inside a Fragment, it\n    // needs to reigster itself as a child of that fragment\n    // for attach/detach to work properly.\n    this._frag = options._frag;\n    if (this._frag) {\n      this._frag.children.push(this);\n    }\n\n    // push self into parent / transclusion host\n    if (this.$parent) {\n      this.$parent.$children.push(this);\n    }\n\n    // merge options.\n    options = this.$options = mergeOptions(this.constructor.options, options, this);\n\n    // set ref\n    this._updateRef();\n\n    // initialize data as empty object.\n    // it will be filled up in _initData().\n    this._data = {};\n\n    // call init hook\n    this._callHook('init');\n\n    // initialize data observation and scope inheritance.\n    this._initState();\n\n    // setup event system and option events.\n    this._initEvents();\n\n    // call created hook\n    this._callHook('created');\n\n    // if `el` option is passed, start compilation.\n    if (options.el) {\n      this.$mount(options.el);\n    }\n  };\n}\n\nvar pathCache = new Cache(1000);\n\n// actions\nvar APPEND = 0;\nvar PUSH = 1;\nvar INC_SUB_PATH_DEPTH = 2;\nvar PUSH_SUB_PATH = 3;\n\n// states\nvar BEFORE_PATH = 0;\nvar IN_PATH = 1;\nvar BEFORE_IDENT = 2;\nvar IN_IDENT = 3;\nvar IN_SUB_PATH = 4;\nvar IN_SINGLE_QUOTE = 5;\nvar IN_DOUBLE_QUOTE = 6;\nvar AFTER_PATH = 7;\nvar ERROR = 8;\n\nvar pathStateMachine = [];\n\npathStateMachine[BEFORE_PATH] = {\n  'ws': [BEFORE_PATH],\n  'ident': [IN_IDENT, APPEND],\n  '[': [IN_SUB_PATH],\n  'eof': [AFTER_PATH]\n};\n\npathStateMachine[IN_PATH] = {\n  'ws': [IN_PATH],\n  '.': [BEFORE_IDENT],\n  '[': [IN_SUB_PATH],\n  'eof': [AFTER_PATH]\n};\n\npathStateMachine[BEFORE_IDENT] = {\n  'ws': [BEFORE_IDENT],\n  'ident': [IN_IDENT, APPEND]\n};\n\npathStateMachine[IN_IDENT] = {\n  'ident': [IN_IDENT, APPEND],\n  '0': [IN_IDENT, APPEND],\n  'number': [IN_IDENT, APPEND],\n  'ws': [IN_PATH, PUSH],\n  '.': [BEFORE_IDENT, PUSH],\n  '[': [IN_SUB_PATH, PUSH],\n  'eof': [AFTER_PATH, PUSH]\n};\n\npathStateMachine[IN_SUB_PATH] = {\n  \"'\": [IN_SINGLE_QUOTE, APPEND],\n  '\"': [IN_DOUBLE_QUOTE, APPEND],\n  '[': [IN_SUB_PATH, INC_SUB_PATH_DEPTH],\n  ']': [IN_PATH, PUSH_SUB_PATH],\n  'eof': ERROR,\n  'else': [IN_SUB_PATH, APPEND]\n};\n\npathStateMachine[IN_SINGLE_QUOTE] = {\n  \"'\": [IN_SUB_PATH, APPEND],\n  'eof': ERROR,\n  'else': [IN_SINGLE_QUOTE, APPEND]\n};\n\npathStateMachine[IN_DOUBLE_QUOTE] = {\n  '\"': [IN_SUB_PATH, APPEND],\n  'eof': ERROR,\n  'else': [IN_DOUBLE_QUOTE, APPEND]\n};\n\n/**\n * Determine the type of a character in a keypath.\n *\n * @param {Char} ch\n * @return {String} type\n */\n\nfunction getPathCharType(ch) {\n  if (ch === undefined) {\n    return 'eof';\n  }\n\n  var code = ch.charCodeAt(0);\n\n  switch (code) {\n    case 0x5B: // [\n    case 0x5D: // ]\n    case 0x2E: // .\n    case 0x22: // \"\n    case 0x27: // '\n    case 0x30:\n      // 0\n      return ch;\n\n    case 0x5F: // _\n    case 0x24:\n      // $\n      return 'ident';\n\n    case 0x20: // Space\n    case 0x09: // Tab\n    case 0x0A: // Newline\n    case 0x0D: // Return\n    case 0xA0: // No-break space\n    case 0xFEFF: // Byte Order Mark\n    case 0x2028: // Line Separator\n    case 0x2029:\n      // Paragraph Separator\n      return 'ws';\n  }\n\n  // a-z, A-Z\n  if (code >= 0x61 && code <= 0x7A || code >= 0x41 && code <= 0x5A) {\n    return 'ident';\n  }\n\n  // 1-9\n  if (code >= 0x31 && code <= 0x39) {\n    return 'number';\n  }\n\n  return 'else';\n}\n\n/**\n * Format a subPath, return its plain form if it is\n * a literal string or number. Otherwise prepend the\n * dynamic indicator (*).\n *\n * @param {String} path\n * @return {String}\n */\n\nfunction formatSubPath(path) {\n  var trimmed = path.trim();\n  // invalid leading 0\n  if (path.charAt(0) === '0' && isNaN(path)) {\n    return false;\n  }\n  return isLiteral(trimmed) ? stripQuotes(trimmed) : '*' + trimmed;\n}\n\n/**\n * Parse a string path into an array of segments\n *\n * @param {String} path\n * @return {Array|undefined}\n */\n\nfunction parse(path) {\n  var keys = [];\n  var index = -1;\n  var mode = BEFORE_PATH;\n  var subPathDepth = 0;\n  var c, newChar, key, type, transition, action, typeMap;\n\n  var actions = [];\n\n  actions[PUSH] = function () {\n    if (key !== undefined) {\n      keys.push(key);\n      key = undefined;\n    }\n  };\n\n  actions[APPEND] = function () {\n    if (key === undefined) {\n      key = newChar;\n    } else {\n      key += newChar;\n    }\n  };\n\n  actions[INC_SUB_PATH_DEPTH] = function () {\n    actions[APPEND]();\n    subPathDepth++;\n  };\n\n  actions[PUSH_SUB_PATH] = function () {\n    if (subPathDepth > 0) {\n      subPathDepth--;\n      mode = IN_SUB_PATH;\n      actions[APPEND]();\n    } else {\n      subPathDepth = 0;\n      key = formatSubPath(key);\n      if (key === false) {\n        return false;\n      } else {\n        actions[PUSH]();\n      }\n    }\n  };\n\n  function maybeUnescapeQuote() {\n    var nextChar = path[index + 1];\n    if (mode === IN_SINGLE_QUOTE && nextChar === \"'\" || mode === IN_DOUBLE_QUOTE && nextChar === '\"') {\n      index++;\n      newChar = '\\\\' + nextChar;\n      actions[APPEND]();\n      return true;\n    }\n  }\n\n  while (mode != null) {\n    index++;\n    c = path[index];\n\n    if (c === '\\\\' && maybeUnescapeQuote()) {\n      continue;\n    }\n\n    type = getPathCharType(c);\n    typeMap = pathStateMachine[mode];\n    transition = typeMap[type] || typeMap['else'] || ERROR;\n\n    if (transition === ERROR) {\n      return; // parse error\n    }\n\n    mode = transition[0];\n    action = actions[transition[1]];\n    if (action) {\n      newChar = transition[2];\n      newChar = newChar === undefined ? c : newChar;\n      if (action() === false) {\n        return;\n      }\n    }\n\n    if (mode === AFTER_PATH) {\n      keys.raw = path;\n      return keys;\n    }\n  }\n}\n\n/**\n * External parse that check for a cache hit first\n *\n * @param {String} path\n * @return {Array|undefined}\n */\n\nfunction parsePath(path) {\n  var hit = pathCache.get(path);\n  if (!hit) {\n    hit = parse(path);\n    if (hit) {\n      pathCache.put(path, hit);\n    }\n  }\n  return hit;\n}\n\n/**\n * Get from an object from a path string\n *\n * @param {Object} obj\n * @param {String} path\n */\n\nfunction getPath(obj, path) {\n  return parseExpression(path).get(obj);\n}\n\n/**\n * Warn against setting non-existent root path on a vm.\n */\n\nvar warnNonExistent;\nif (process.env.NODE_ENV !== 'production') {\n  warnNonExistent = function (path, vm) {\n    warn('You are setting a non-existent path \"' + path.raw + '\" ' + 'on a vm instance. Consider pre-initializing the property ' + 'with the \"data\" option for more reliable reactivity ' + 'and better performance.', vm);\n  };\n}\n\n/**\n * Set on an object from a path\n *\n * @param {Object} obj\n * @param {String | Array} path\n * @param {*} val\n */\n\nfunction setPath(obj, path, val) {\n  var original = obj;\n  if (typeof path === 'string') {\n    path = parse(path);\n  }\n  if (!path || !isObject(obj)) {\n    return false;\n  }\n  var last, key;\n  for (var i = 0, l = path.length; i < l; i++) {\n    last = obj;\n    key = path[i];\n    if (key.charAt(0) === '*') {\n      key = parseExpression(key.slice(1)).get.call(original, original);\n    }\n    if (i < l - 1) {\n      obj = obj[key];\n      if (!isObject(obj)) {\n        obj = {};\n        if (process.env.NODE_ENV !== 'production' && last._isVue) {\n          warnNonExistent(path, last);\n        }\n        set(last, key, obj);\n      }\n    } else {\n      if (isArray(obj)) {\n        obj.$set(key, val);\n      } else if (key in obj) {\n        obj[key] = val;\n      } else {\n        if (process.env.NODE_ENV !== 'production' && obj._isVue) {\n          warnNonExistent(path, obj);\n        }\n        set(obj, key, val);\n      }\n    }\n  }\n  return true;\n}\n\nvar path = Object.freeze({\n  parsePath: parsePath,\n  getPath: getPath,\n  setPath: setPath\n});\n\nvar expressionCache = new Cache(1000);\n\nvar allowedKeywords = 'Math,Date,this,true,false,null,undefined,Infinity,NaN,' + 'isNaN,isFinite,decodeURI,decodeURIComponent,encodeURI,' + 'encodeURIComponent,parseInt,parseFloat';\nvar allowedKeywordsRE = new RegExp('^(' + allowedKeywords.replace(/,/g, '\\\\b|') + '\\\\b)');\n\n// keywords that don't make sense inside expressions\nvar improperKeywords = 'break,case,class,catch,const,continue,debugger,default,' + 'delete,do,else,export,extends,finally,for,function,if,' + 'import,in,instanceof,let,return,super,switch,throw,try,' + 'var,while,with,yield,enum,await,implements,package,' + 'protected,static,interface,private,public';\nvar improperKeywordsRE = new RegExp('^(' + improperKeywords.replace(/,/g, '\\\\b|') + '\\\\b)');\n\nvar wsRE = /\\s/g;\nvar newlineRE = /\\n/g;\nvar saveRE = /[\\{,]\\s*[\\w\\$_]+\\s*:|('(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`)|new |typeof |void /g;\nvar restoreRE = /\"(\\d+)\"/g;\nvar pathTestRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?'\\]|\\[\".*?\"\\]|\\[\\d+\\]|\\[[A-Za-z_$][\\w$]*\\])*$/;\nvar identRE = /[^\\w$\\.](?:[A-Za-z_$][\\w$]*)/g;\nvar literalValueRE$1 = /^(?:true|false|null|undefined|Infinity|NaN)$/;\n\nfunction noop() {}\n\n/**\n * Save / Rewrite / Restore\n *\n * When rewriting paths found in an expression, it is\n * possible for the same letter sequences to be found in\n * strings and Object literal property keys. Therefore we\n * remove and store these parts in a temporary array, and\n * restore them after the path rewrite.\n */\n\nvar saved = [];\n\n/**\n * Save replacer\n *\n * The save regex can match two possible cases:\n * 1. An opening object literal\n * 2. A string\n * If matched as a plain string, we need to escape its\n * newlines, since the string needs to be preserved when\n * generating the function body.\n *\n * @param {String} str\n * @param {String} isString - str if matched as a string\n * @return {String} - placeholder with index\n */\n\nfunction save(str, isString) {\n  var i = saved.length;\n  saved[i] = isString ? str.replace(newlineRE, '\\\\n') : str;\n  return '\"' + i + '\"';\n}\n\n/**\n * Path rewrite replacer\n *\n * @param {String} raw\n * @return {String}\n */\n\nfunction rewrite(raw) {\n  var c = raw.charAt(0);\n  var path = raw.slice(1);\n  if (allowedKeywordsRE.test(path)) {\n    return raw;\n  } else {\n    path = path.indexOf('\"') > -1 ? path.replace(restoreRE, restore) : path;\n    return c + 'scope.' + path;\n  }\n}\n\n/**\n * Restore replacer\n *\n * @param {String} str\n * @param {String} i - matched save index\n * @return {String}\n */\n\nfunction restore(str, i) {\n  return saved[i];\n}\n\n/**\n * Rewrite an expression, prefixing all path accessors with\n * `scope.` and generate getter/setter functions.\n *\n * @param {String} exp\n * @return {Function}\n */\n\nfunction compileGetter(exp) {\n  if (improperKeywordsRE.test(exp)) {\n    process.env.NODE_ENV !== 'production' && warn('Avoid using reserved keywords in expression: ' + exp);\n  }\n  // reset state\n  saved.length = 0;\n  // save strings and object literal keys\n  var body = exp.replace(saveRE, save).replace(wsRE, '');\n  // rewrite all paths\n  // pad 1 space here because the regex matches 1 extra char\n  body = (' ' + body).replace(identRE, rewrite).replace(restoreRE, restore);\n  return makeGetterFn(body);\n}\n\n/**\n * Build a getter function. Requires eval.\n *\n * We isolate the try/catch so it doesn't affect the\n * optimization of the parse function when it is not called.\n *\n * @param {String} body\n * @return {Function|undefined}\n */\n\nfunction makeGetterFn(body) {\n  try {\n    /* eslint-disable no-new-func */\n    return new Function('scope', 'return ' + body + ';');\n    /* eslint-enable no-new-func */\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      /* istanbul ignore if */\n      if (e.toString().match(/unsafe-eval|CSP/)) {\n        warn('It seems you are using the default build of Vue.js in an environment ' + 'with Content Security Policy that prohibits unsafe-eval. ' + 'Use the CSP-compliant build instead: ' + 'http://vuejs.org/guide/installation.html#CSP-compliant-build');\n      } else {\n        warn('Invalid expression. ' + 'Generated function body: ' + body);\n      }\n    }\n    return noop;\n  }\n}\n\n/**\n * Compile a setter function for the expression.\n *\n * @param {String} exp\n * @return {Function|undefined}\n */\n\nfunction compileSetter(exp) {\n  var path = parsePath(exp);\n  if (path) {\n    return function (scope, val) {\n      setPath(scope, path, val);\n    };\n  } else {\n    process.env.NODE_ENV !== 'production' && warn('Invalid setter expression: ' + exp);\n  }\n}\n\n/**\n * Parse an expression into re-written getter/setters.\n *\n * @param {String} exp\n * @param {Boolean} needSet\n * @return {Function}\n */\n\nfunction parseExpression(exp, needSet) {\n  exp = exp.trim();\n  // try cache\n  var hit = expressionCache.get(exp);\n  if (hit) {\n    if (needSet && !hit.set) {\n      hit.set = compileSetter(hit.exp);\n    }\n    return hit;\n  }\n  var res = { exp: exp };\n  res.get = isSimplePath(exp) && exp.indexOf('[') < 0\n  // optimized super simple getter\n  ? makeGetterFn('scope.' + exp)\n  // dynamic getter\n  : compileGetter(exp);\n  if (needSet) {\n    res.set = compileSetter(exp);\n  }\n  expressionCache.put(exp, res);\n  return res;\n}\n\n/**\n * Check if an expression is a simple path.\n *\n * @param {String} exp\n * @return {Boolean}\n */\n\nfunction isSimplePath(exp) {\n  return pathTestRE.test(exp) &&\n  // don't treat literal values as paths\n  !literalValueRE$1.test(exp) &&\n  // Math constants e.g. Math.PI, Math.E etc.\n  exp.slice(0, 5) !== 'Math.';\n}\n\nvar expression = Object.freeze({\n  parseExpression: parseExpression,\n  isSimplePath: isSimplePath\n});\n\n// we have two separate queues: one for directive updates\n// and one for user watcher registered via $watch().\n// we want to guarantee directive updates to be called\n// before user watchers so that when user watchers are\n// triggered, the DOM would have already been in updated\n// state.\n\nvar queue = [];\nvar userQueue = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\n\n/**\n * Reset the batcher's state.\n */\n\nfunction resetBatcherState() {\n  queue.length = 0;\n  userQueue.length = 0;\n  has = {};\n  circular = {};\n  waiting = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\n\nfunction flushBatcherQueue() {\n  var _again = true;\n\n  _function: while (_again) {\n    _again = false;\n\n    runBatcherQueue(queue);\n    runBatcherQueue(userQueue);\n    // user watchers triggered more watchers,\n    // keep flushing until it depletes\n    if (queue.length) {\n      _again = true;\n      continue _function;\n    }\n    // dev tool hook\n    /* istanbul ignore if */\n    if (devtools && config.devtools) {\n      devtools.emit('flush');\n    }\n    resetBatcherState();\n  }\n}\n\n/**\n * Run the watchers in a single queue.\n *\n * @param {Array} queue\n */\n\nfunction runBatcherQueue(queue) {\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (var i = 0; i < queue.length; i++) {\n    var watcher = queue[i];\n    var id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (process.env.NODE_ENV !== 'production' && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > config._maxUpdateCount) {\n        warn('You may have an infinite update loop for watcher ' + 'with expression \"' + watcher.expression + '\"', watcher.vm);\n        break;\n      }\n    }\n  }\n  queue.length = 0;\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n *\n * @param {Watcher} watcher\n *   properties:\n *   - {Number} id\n *   - {Function} run\n */\n\nfunction pushWatcher(watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    // push watcher into appropriate queue\n    var q = watcher.user ? userQueue : queue;\n    has[id] = q.length;\n    q.push(watcher);\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushBatcherQueue);\n    }\n  }\n}\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n *\n * @param {Vue} vm\n * @param {String|Function} expOrFn\n * @param {Function} cb\n * @param {Object} options\n *                 - {Array} filters\n *                 - {Boolean} twoWay\n *                 - {Boolean} deep\n *                 - {Boolean} user\n *                 - {Boolean} sync\n *                 - {Boolean} lazy\n *                 - {Function} [preProcess]\n *                 - {Function} [postProcess]\n * @constructor\n */\nfunction Watcher(vm, expOrFn, cb, options) {\n  // mix in options\n  if (options) {\n    extend(this, options);\n  }\n  var isFn = typeof expOrFn === 'function';\n  this.vm = vm;\n  vm._watchers.push(this);\n  this.expression = expOrFn;\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.prevError = null; // for async error stacks\n  // parse expression for getter/setter\n  if (isFn) {\n    this.getter = expOrFn;\n    this.setter = undefined;\n  } else {\n    var res = parseExpression(expOrFn, this.twoWay);\n    this.getter = res.get;\n    this.setter = res.set;\n  }\n  this.value = this.lazy ? undefined : this.get();\n  // state for avoiding false triggers for deep and Array\n  // watchers during vm._digest()\n  this.queued = this.shallow = false;\n}\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\n\nWatcher.prototype.get = function () {\n  this.beforeGet();\n  var scope = this.scope || this.vm;\n  var value;\n  try {\n    value = this.getter.call(scope, scope);\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production' && config.warnExpressionErrors) {\n      warn('Error when evaluating expression ' + '\"' + this.expression + '\": ' + e.toString(), this.vm);\n    }\n  }\n  // \"touch\" every property so they are all tracked as\n  // dependencies for deep watching\n  if (this.deep) {\n    traverse(value);\n  }\n  if (this.preProcess) {\n    value = this.preProcess(value);\n  }\n  if (this.filters) {\n    value = scope._applyFilters(value, null, this.filters, false);\n  }\n  if (this.postProcess) {\n    value = this.postProcess(value);\n  }\n  this.afterGet();\n  return value;\n};\n\n/**\n * Set the corresponding value with the setter.\n *\n * @param {*} value\n */\n\nWatcher.prototype.set = function (value) {\n  var scope = this.scope || this.vm;\n  if (this.filters) {\n    value = scope._applyFilters(value, this.value, this.filters, true);\n  }\n  try {\n    this.setter.call(scope, scope, value);\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production' && config.warnExpressionErrors) {\n      warn('Error when evaluating setter ' + '\"' + this.expression + '\": ' + e.toString(), this.vm);\n    }\n  }\n  // two-way sync for v-for alias\n  var forContext = scope.$forContext;\n  if (forContext && forContext.alias === this.expression) {\n    if (forContext.filters) {\n      process.env.NODE_ENV !== 'production' && warn('It seems you are using two-way binding on ' + 'a v-for alias (' + this.expression + '), and the ' + 'v-for has filters. This will not work properly. ' + 'Either remove the filters or use an array of ' + 'objects and bind to object properties instead.', this.vm);\n      return;\n    }\n    forContext._withLock(function () {\n      if (scope.$key) {\n        // original is an object\n        forContext.rawValue[scope.$key] = value;\n      } else {\n        forContext.rawValue.$set(scope.$index, value);\n      }\n    });\n  }\n};\n\n/**\n * Prepare for dependency collection.\n */\n\nWatcher.prototype.beforeGet = function () {\n  Dep.target = this;\n};\n\n/**\n * Add a dependency to this directive.\n *\n * @param {Dep} dep\n */\n\nWatcher.prototype.addDep = function (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\n\nWatcher.prototype.afterGet = function () {\n  Dep.target = null;\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n *\n * @param {Boolean} shallow\n */\n\nWatcher.prototype.update = function (shallow) {\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync || !config.async) {\n    this.run();\n  } else {\n    // if queued, only overwrite shallow with non-shallow,\n    // but not the other way around.\n    this.shallow = this.queued ? shallow ? this.shallow : false : !!shallow;\n    this.queued = true;\n    // record before-push error stack in debug mode\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.debug) {\n      this.prevError = new Error('[vue] async stack trace');\n    }\n    pushWatcher(this);\n  }\n};\n\n/**\n * Batcher job interface.\n * Will be called by the batcher.\n */\n\nWatcher.prototype.run = function () {\n  if (this.active) {\n    var value = this.get();\n    if (value !== this.value ||\n    // Deep watchers and watchers on Object/Arrays should fire even\n    // when the value is the same, because the value may\n    // have mutated; but only do so if this is a\n    // non-shallow update (caused by a vm digest).\n    (isObject(value) || this.deep) && !this.shallow) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      // in debug + async mode, when a watcher callbacks\n      // throws, we also throw the saved before-push error\n      // so the full cross-tick stack trace is available.\n      var prevError = this.prevError;\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.debug && prevError) {\n        this.prevError = null;\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          nextTick(function () {\n            throw prevError;\n          }, 0);\n          throw e;\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n    this.queued = this.shallow = false;\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\n\nWatcher.prototype.evaluate = function () {\n  // avoid overwriting another watcher that is being\n  // collected.\n  var current = Dep.target;\n  this.value = this.get();\n  this.dirty = false;\n  Dep.target = current;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\n\nWatcher.prototype.depend = function () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subcriber list.\n */\n\nWatcher.prototype.teardown = function () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed or is performing a v-for\n    // re-render (the watcher list is then filtered by v-for).\n    if (!this.vm._isBeingDestroyed && !this.vm._vForRemoving) {\n      this.vm._watchers.$remove(this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n    this.vm = this.cb = this.value = null;\n  }\n};\n\n/**\n * Recrusively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n *\n * @param {*} val\n */\n\nvar seenObjects = new _Set();\nfunction traverse(val, seen) {\n  var i = undefined,\n      keys = undefined;\n  if (!seen) {\n    seen = seenObjects;\n    seen.clear();\n  }\n  var isA = isArray(val);\n  var isO = isObject(val);\n  if ((isA || isO) && Object.isExtensible(val)) {\n    if (val.__ob__) {\n      var depId = val.__ob__.dep.id;\n      if (seen.has(depId)) {\n        return;\n      } else {\n        seen.add(depId);\n      }\n    }\n    if (isA) {\n      i = val.length;\n      while (i--) traverse(val[i], seen);\n    } else if (isO) {\n      keys = Object.keys(val);\n      i = keys.length;\n      while (i--) traverse(val[keys[i]], seen);\n    }\n  }\n}\n\nvar text$1 = {\n\n  bind: function bind() {\n    this.attr = this.el.nodeType === 3 ? 'data' : 'textContent';\n  },\n\n  update: function update(value) {\n    this.el[this.attr] = _toString(value);\n  }\n};\n\nvar templateCache = new Cache(1000);\nvar idSelectorCache = new Cache(1000);\n\nvar map = {\n  efault: [0, '', ''],\n  legend: [1, '<fieldset>', '</fieldset>'],\n  tr: [2, '<table><tbody>', '</tbody></table>'],\n  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>']\n};\n\nmap.td = map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];\n\nmap.option = map.optgroup = [1, '<select multiple=\"multiple\">', '</select>'];\n\nmap.thead = map.tbody = map.colgroup = map.caption = map.tfoot = [1, '<table>', '</table>'];\n\nmap.g = map.defs = map.symbol = map.use = map.image = map.text = map.circle = map.ellipse = map.line = map.path = map.polygon = map.polyline = map.rect = [1, '<svg ' + 'xmlns=\"http://www.w3.org/2000/svg\" ' + 'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ' + 'xmlns:ev=\"http://www.w3.org/2001/xml-events\"' + 'version=\"1.1\">', '</svg>'];\n\n/**\n * Check if a node is a supported template node with a\n * DocumentFragment content.\n *\n * @param {Node} node\n * @return {Boolean}\n */\n\nfunction isRealTemplate(node) {\n  return isTemplate(node) && isFragment(node.content);\n}\n\nvar tagRE$1 = /<([\\w:-]+)/;\nvar entityRE = /&#?\\w+?;/;\nvar commentRE = /<!--/;\n\n/**\n * Convert a string template to a DocumentFragment.\n * Determines correct wrapping by tag types. Wrapping\n * strategy found in jQuery & component/domify.\n *\n * @param {String} templateString\n * @param {Boolean} raw\n * @return {DocumentFragment}\n */\n\nfunction stringToFragment(templateString, raw) {\n  // try a cache hit first\n  var cacheKey = raw ? templateString : templateString.trim();\n  var hit = templateCache.get(cacheKey);\n  if (hit) {\n    return hit;\n  }\n\n  var frag = document.createDocumentFragment();\n  var tagMatch = templateString.match(tagRE$1);\n  var entityMatch = entityRE.test(templateString);\n  var commentMatch = commentRE.test(templateString);\n\n  if (!tagMatch && !entityMatch && !commentMatch) {\n    // text only, return a single text node.\n    frag.appendChild(document.createTextNode(templateString));\n  } else {\n    var tag = tagMatch && tagMatch[1];\n    var wrap = map[tag] || map.efault;\n    var depth = wrap[0];\n    var prefix = wrap[1];\n    var suffix = wrap[2];\n    var node = document.createElement('div');\n\n    node.innerHTML = prefix + templateString + suffix;\n    while (depth--) {\n      node = node.lastChild;\n    }\n\n    var child;\n    /* eslint-disable no-cond-assign */\n    while (child = node.firstChild) {\n      /* eslint-enable no-cond-assign */\n      frag.appendChild(child);\n    }\n  }\n  if (!raw) {\n    trimNode(frag);\n  }\n  templateCache.put(cacheKey, frag);\n  return frag;\n}\n\n/**\n * Convert a template node to a DocumentFragment.\n *\n * @param {Node} node\n * @return {DocumentFragment}\n */\n\nfunction nodeToFragment(node) {\n  // if its a template tag and the browser supports it,\n  // its content is already a document fragment. However, iOS Safari has\n  // bug when using directly cloned template content with touch\n  // events and can cause crashes when the nodes are removed from DOM, so we\n  // have to treat template elements as string templates. (#2805)\n  /* istanbul ignore if */\n  if (isRealTemplate(node)) {\n    return stringToFragment(node.innerHTML);\n  }\n  // script template\n  if (node.tagName === 'SCRIPT') {\n    return stringToFragment(node.textContent);\n  }\n  // normal node, clone it to avoid mutating the original\n  var clonedNode = cloneNode(node);\n  var frag = document.createDocumentFragment();\n  var child;\n  /* eslint-disable no-cond-assign */\n  while (child = clonedNode.firstChild) {\n    /* eslint-enable no-cond-assign */\n    frag.appendChild(child);\n  }\n  trimNode(frag);\n  return frag;\n}\n\n// Test for the presence of the Safari template cloning bug\n// https://bugs.webkit.org/showug.cgi?id=137755\nvar hasBrokenTemplate = (function () {\n  /* istanbul ignore else */\n  if (inBrowser) {\n    var a = document.createElement('div');\n    a.innerHTML = '<template>1</template>';\n    return !a.cloneNode(true).firstChild.innerHTML;\n  } else {\n    return false;\n  }\n})();\n\n// Test for IE10/11 textarea placeholder clone bug\nvar hasTextareaCloneBug = (function () {\n  /* istanbul ignore else */\n  if (inBrowser) {\n    var t = document.createElement('textarea');\n    t.placeholder = 't';\n    return t.cloneNode(true).value === 't';\n  } else {\n    return false;\n  }\n})();\n\n/**\n * 1. Deal with Safari cloning nested <template> bug by\n *    manually cloning all template instances.\n * 2. Deal with IE10/11 textarea placeholder bug by setting\n *    the correct value after cloning.\n *\n * @param {Element|DocumentFragment} node\n * @return {Element|DocumentFragment}\n */\n\nfunction cloneNode(node) {\n  /* istanbul ignore if */\n  if (!node.querySelectorAll) {\n    return node.cloneNode();\n  }\n  var res = node.cloneNode(true);\n  var i, original, cloned;\n  /* istanbul ignore if */\n  if (hasBrokenTemplate) {\n    var tempClone = res;\n    if (isRealTemplate(node)) {\n      node = node.content;\n      tempClone = res.content;\n    }\n    original = node.querySelectorAll('template');\n    if (original.length) {\n      cloned = tempClone.querySelectorAll('template');\n      i = cloned.length;\n      while (i--) {\n        cloned[i].parentNode.replaceChild(cloneNode(original[i]), cloned[i]);\n      }\n    }\n  }\n  /* istanbul ignore if */\n  if (hasTextareaCloneBug) {\n    if (node.tagName === 'TEXTAREA') {\n      res.value = node.value;\n    } else {\n      original = node.querySelectorAll('textarea');\n      if (original.length) {\n        cloned = res.querySelectorAll('textarea');\n        i = cloned.length;\n        while (i--) {\n          cloned[i].value = original[i].value;\n        }\n      }\n    }\n  }\n  return res;\n}\n\n/**\n * Process the template option and normalizes it into a\n * a DocumentFragment that can be used as a partial or a\n * instance template.\n *\n * @param {*} template\n *        Possible values include:\n *        - DocumentFragment object\n *        - Node object of type Template\n *        - id selector: '#some-template-id'\n *        - template string: '<div><span>{{msg}}</span></div>'\n * @param {Boolean} shouldClone\n * @param {Boolean} raw\n *        inline HTML interpolation. Do not check for id\n *        selector and keep whitespace in the string.\n * @return {DocumentFragment|undefined}\n */\n\nfunction parseTemplate(template, shouldClone, raw) {\n  var node, frag;\n\n  // if the template is already a document fragment,\n  // do nothing\n  if (isFragment(template)) {\n    trimNode(template);\n    return shouldClone ? cloneNode(template) : template;\n  }\n\n  if (typeof template === 'string') {\n    // id selector\n    if (!raw && template.charAt(0) === '#') {\n      // id selector can be cached too\n      frag = idSelectorCache.get(template);\n      if (!frag) {\n        node = document.getElementById(template.slice(1));\n        if (node) {\n          frag = nodeToFragment(node);\n          // save selector to cache\n          idSelectorCache.put(template, frag);\n        }\n      }\n    } else {\n      // normal string template\n      frag = stringToFragment(template, raw);\n    }\n  } else if (template.nodeType) {\n    // a direct node\n    frag = nodeToFragment(template);\n  }\n\n  return frag && shouldClone ? cloneNode(frag) : frag;\n}\n\nvar template = Object.freeze({\n  cloneNode: cloneNode,\n  parseTemplate: parseTemplate\n});\n\nvar html = {\n\n  bind: function bind() {\n    // a comment node means this is a binding for\n    // {{{ inline unescaped html }}}\n    if (this.el.nodeType === 8) {\n      // hold nodes\n      this.nodes = [];\n      // replace the placeholder with proper anchor\n      this.anchor = createAnchor('v-html');\n      replace(this.el, this.anchor);\n    }\n  },\n\n  update: function update(value) {\n    value = _toString(value);\n    if (this.nodes) {\n      this.swap(value);\n    } else {\n      this.el.innerHTML = value;\n    }\n  },\n\n  swap: function swap(value) {\n    // remove old nodes\n    var i = this.nodes.length;\n    while (i--) {\n      remove(this.nodes[i]);\n    }\n    // convert new value to a fragment\n    // do not attempt to retrieve from id selector\n    var frag = parseTemplate(value, true, true);\n    // save a reference to these nodes so we can remove later\n    this.nodes = toArray(frag.childNodes);\n    before(frag, this.anchor);\n  }\n};\n\n/**\n * Abstraction for a partially-compiled fragment.\n * Can optionally compile content with a child scope.\n *\n * @param {Function} linker\n * @param {Vue} vm\n * @param {DocumentFragment} frag\n * @param {Vue} [host]\n * @param {Object} [scope]\n * @param {Fragment} [parentFrag]\n */\nfunction Fragment(linker, vm, frag, host, scope, parentFrag) {\n  this.children = [];\n  this.childFrags = [];\n  this.vm = vm;\n  this.scope = scope;\n  this.inserted = false;\n  this.parentFrag = parentFrag;\n  if (parentFrag) {\n    parentFrag.childFrags.push(this);\n  }\n  this.unlink = linker(vm, frag, host, scope, this);\n  var single = this.single = frag.childNodes.length === 1 &&\n  // do not go single mode if the only node is an anchor\n  !frag.childNodes[0].__v_anchor;\n  if (single) {\n    this.node = frag.childNodes[0];\n    this.before = singleBefore;\n    this.remove = singleRemove;\n  } else {\n    this.node = createAnchor('fragment-start');\n    this.end = createAnchor('fragment-end');\n    this.frag = frag;\n    prepend(this.node, frag);\n    frag.appendChild(this.end);\n    this.before = multiBefore;\n    this.remove = multiRemove;\n  }\n  this.node.__v_frag = this;\n}\n\n/**\n * Call attach/detach for all components contained within\n * this fragment. Also do so recursively for all child\n * fragments.\n *\n * @param {Function} hook\n */\n\nFragment.prototype.callHook = function (hook) {\n  var i, l;\n  for (i = 0, l = this.childFrags.length; i < l; i++) {\n    this.childFrags[i].callHook(hook);\n  }\n  for (i = 0, l = this.children.length; i < l; i++) {\n    hook(this.children[i]);\n  }\n};\n\n/**\n * Insert fragment before target, single node version\n *\n * @param {Node} target\n * @param {Boolean} withTransition\n */\n\nfunction singleBefore(target, withTransition) {\n  this.inserted = true;\n  var method = withTransition !== false ? beforeWithTransition : before;\n  method(this.node, target, this.vm);\n  if (inDoc(this.node)) {\n    this.callHook(attach);\n  }\n}\n\n/**\n * Remove fragment, single node version\n */\n\nfunction singleRemove() {\n  this.inserted = false;\n  var shouldCallRemove = inDoc(this.node);\n  var self = this;\n  this.beforeRemove();\n  removeWithTransition(this.node, this.vm, function () {\n    if (shouldCallRemove) {\n      self.callHook(detach);\n    }\n    self.destroy();\n  });\n}\n\n/**\n * Insert fragment before target, multi-nodes version\n *\n * @param {Node} target\n * @param {Boolean} withTransition\n */\n\nfunction multiBefore(target, withTransition) {\n  this.inserted = true;\n  var vm = this.vm;\n  var method = withTransition !== false ? beforeWithTransition : before;\n  mapNodeRange(this.node, this.end, function (node) {\n    method(node, target, vm);\n  });\n  if (inDoc(this.node)) {\n    this.callHook(attach);\n  }\n}\n\n/**\n * Remove fragment, multi-nodes version\n */\n\nfunction multiRemove() {\n  this.inserted = false;\n  var self = this;\n  var shouldCallRemove = inDoc(this.node);\n  this.beforeRemove();\n  removeNodeRange(this.node, this.end, this.vm, this.frag, function () {\n    if (shouldCallRemove) {\n      self.callHook(detach);\n    }\n    self.destroy();\n  });\n}\n\n/**\n * Prepare the fragment for removal.\n */\n\nFragment.prototype.beforeRemove = function () {\n  var i, l;\n  for (i = 0, l = this.childFrags.length; i < l; i++) {\n    // call the same method recursively on child\n    // fragments, depth-first\n    this.childFrags[i].beforeRemove(false);\n  }\n  for (i = 0, l = this.children.length; i < l; i++) {\n    // Call destroy for all contained instances,\n    // with remove:false and defer:true.\n    // Defer is necessary because we need to\n    // keep the children to call detach hooks\n    // on them.\n    this.children[i].$destroy(false, true);\n  }\n  var dirs = this.unlink.dirs;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    // disable the watchers on all the directives\n    // so that the rendered content stays the same\n    // during removal.\n    dirs[i]._watcher && dirs[i]._watcher.teardown();\n  }\n};\n\n/**\n * Destroy the fragment.\n */\n\nFragment.prototype.destroy = function () {\n  if (this.parentFrag) {\n    this.parentFrag.childFrags.$remove(this);\n  }\n  this.node.__v_frag = null;\n  this.unlink();\n};\n\n/**\n * Call attach hook for a Vue instance.\n *\n * @param {Vue} child\n */\n\nfunction attach(child) {\n  if (!child._isAttached && inDoc(child.$el)) {\n    child._callHook('attached');\n  }\n}\n\n/**\n * Call detach hook for a Vue instance.\n *\n * @param {Vue} child\n */\n\nfunction detach(child) {\n  if (child._isAttached && !inDoc(child.$el)) {\n    child._callHook('detached');\n  }\n}\n\nvar linkerCache = new Cache(5000);\n\n/**\n * A factory that can be used to create instances of a\n * fragment. Caches the compiled linker if possible.\n *\n * @param {Vue} vm\n * @param {Element|String} el\n */\nfunction FragmentFactory(vm, el) {\n  this.vm = vm;\n  var template;\n  var isString = typeof el === 'string';\n  if (isString || isTemplate(el) && !el.hasAttribute('v-if')) {\n    template = parseTemplate(el, true);\n  } else {\n    template = document.createDocumentFragment();\n    template.appendChild(el);\n  }\n  this.template = template;\n  // linker can be cached, but only for components\n  var linker;\n  var cid = vm.constructor.cid;\n  if (cid > 0) {\n    var cacheId = cid + (isString ? el : getOuterHTML(el));\n    linker = linkerCache.get(cacheId);\n    if (!linker) {\n      linker = compile(template, vm.$options, true);\n      linkerCache.put(cacheId, linker);\n    }\n  } else {\n    linker = compile(template, vm.$options, true);\n  }\n  this.linker = linker;\n}\n\n/**\n * Create a fragment instance with given host and scope.\n *\n * @param {Vue} host\n * @param {Object} scope\n * @param {Fragment} parentFrag\n */\n\nFragmentFactory.prototype.create = function (host, scope, parentFrag) {\n  var frag = cloneNode(this.template);\n  return new Fragment(this.linker, this.vm, frag, host, scope, parentFrag);\n};\n\nvar ON = 700;\nvar MODEL = 800;\nvar BIND = 850;\nvar TRANSITION = 1100;\nvar EL = 1500;\nvar COMPONENT = 1500;\nvar PARTIAL = 1750;\nvar IF = 2100;\nvar FOR = 2200;\nvar SLOT = 2300;\n\nvar uid$3 = 0;\n\nvar vFor = {\n\n  priority: FOR,\n  terminal: true,\n\n  params: ['track-by', 'stagger', 'enter-stagger', 'leave-stagger'],\n\n  bind: function bind() {\n    // support \"item in/of items\" syntax\n    var inMatch = this.expression.match(/(.*) (?:in|of) (.*)/);\n    if (inMatch) {\n      var itMatch = inMatch[1].match(/\\((.*),(.*)\\)/);\n      if (itMatch) {\n        this.iterator = itMatch[1].trim();\n        this.alias = itMatch[2].trim();\n      } else {\n        this.alias = inMatch[1].trim();\n      }\n      this.expression = inMatch[2];\n    }\n\n    if (!this.alias) {\n      process.env.NODE_ENV !== 'production' && warn('Invalid v-for expression \"' + this.descriptor.raw + '\": ' + 'alias is required.', this.vm);\n      return;\n    }\n\n    // uid as a cache identifier\n    this.id = '__v-for__' + ++uid$3;\n\n    // check if this is an option list,\n    // so that we know if we need to update the <select>'s\n    // v-model when the option list has changed.\n    // because v-model has a lower priority than v-for,\n    // the v-model is not bound here yet, so we have to\n    // retrive it in the actual updateModel() function.\n    var tag = this.el.tagName;\n    this.isOption = (tag === 'OPTION' || tag === 'OPTGROUP') && this.el.parentNode.tagName === 'SELECT';\n\n    // setup anchor nodes\n    this.start = createAnchor('v-for-start');\n    this.end = createAnchor('v-for-end');\n    replace(this.el, this.end);\n    before(this.start, this.end);\n\n    // cache\n    this.cache = Object.create(null);\n\n    // fragment factory\n    this.factory = new FragmentFactory(this.vm, this.el);\n  },\n\n  update: function update(data) {\n    this.diff(data);\n    this.updateRef();\n    this.updateModel();\n  },\n\n  /**\n   * Diff, based on new data and old data, determine the\n   * minimum amount of DOM manipulations needed to make the\n   * DOM reflect the new data Array.\n   *\n   * The algorithm diffs the new data Array by storing a\n   * hidden reference to an owner vm instance on previously\n   * seen data. This allows us to achieve O(n) which is\n   * better than a levenshtein distance based algorithm,\n   * which is O(m * n).\n   *\n   * @param {Array} data\n   */\n\n  diff: function diff(data) {\n    // check if the Array was converted from an Object\n    var item = data[0];\n    var convertedFromObject = this.fromObject = isObject(item) && hasOwn(item, '$key') && hasOwn(item, '$value');\n\n    var trackByKey = this.params.trackBy;\n    var oldFrags = this.frags;\n    var frags = this.frags = new Array(data.length);\n    var alias = this.alias;\n    var iterator = this.iterator;\n    var start = this.start;\n    var end = this.end;\n    var inDocument = inDoc(start);\n    var init = !oldFrags;\n    var i, l, frag, key, value, primitive;\n\n    // First pass, go through the new Array and fill up\n    // the new frags array. If a piece of data has a cached\n    // instance for it, we reuse it. Otherwise build a new\n    // instance.\n    for (i = 0, l = data.length; i < l; i++) {\n      item = data[i];\n      key = convertedFromObject ? item.$key : null;\n      value = convertedFromObject ? item.$value : item;\n      primitive = !isObject(value);\n      frag = !init && this.getCachedFrag(value, i, key);\n      if (frag) {\n        // reusable fragment\n        frag.reused = true;\n        // update $index\n        frag.scope.$index = i;\n        // update $key\n        if (key) {\n          frag.scope.$key = key;\n        }\n        // update iterator\n        if (iterator) {\n          frag.scope[iterator] = key !== null ? key : i;\n        }\n        // update data for track-by, object repeat &\n        // primitive values.\n        if (trackByKey || convertedFromObject || primitive) {\n          withoutConversion(function () {\n            frag.scope[alias] = value;\n          });\n        }\n      } else {\n        // new isntance\n        frag = this.create(value, alias, i, key);\n        frag.fresh = !init;\n      }\n      frags[i] = frag;\n      if (init) {\n        frag.before(end);\n      }\n    }\n\n    // we're done for the initial render.\n    if (init) {\n      return;\n    }\n\n    // Second pass, go through the old fragments and\n    // destroy those who are not reused (and remove them\n    // from cache)\n    var removalIndex = 0;\n    var totalRemoved = oldFrags.length - frags.length;\n    // when removing a large number of fragments, watcher removal\n    // turns out to be a perf bottleneck, so we batch the watcher\n    // removals into a single filter call!\n    this.vm._vForRemoving = true;\n    for (i = 0, l = oldFrags.length; i < l; i++) {\n      frag = oldFrags[i];\n      if (!frag.reused) {\n        this.deleteCachedFrag(frag);\n        this.remove(frag, removalIndex++, totalRemoved, inDocument);\n      }\n    }\n    this.vm._vForRemoving = false;\n    if (removalIndex) {\n      this.vm._watchers = this.vm._watchers.filter(function (w) {\n        return w.active;\n      });\n    }\n\n    // Final pass, move/insert new fragments into the\n    // right place.\n    var targetPrev, prevEl, currentPrev;\n    var insertionIndex = 0;\n    for (i = 0, l = frags.length; i < l; i++) {\n      frag = frags[i];\n      // this is the frag that we should be after\n      targetPrev = frags[i - 1];\n      prevEl = targetPrev ? targetPrev.staggerCb ? targetPrev.staggerAnchor : targetPrev.end || targetPrev.node : start;\n      if (frag.reused && !frag.staggerCb) {\n        currentPrev = findPrevFrag(frag, start, this.id);\n        if (currentPrev !== targetPrev && (!currentPrev ||\n        // optimization for moving a single item.\n        // thanks to suggestions by @livoras in #1807\n        findPrevFrag(currentPrev, start, this.id) !== targetPrev)) {\n          this.move(frag, prevEl);\n        }\n      } else {\n        // new instance, or still in stagger.\n        // insert with updated stagger index.\n        this.insert(frag, insertionIndex++, prevEl, inDocument);\n      }\n      frag.reused = frag.fresh = false;\n    }\n  },\n\n  /**\n   * Create a new fragment instance.\n   *\n   * @param {*} value\n   * @param {String} alias\n   * @param {Number} index\n   * @param {String} [key]\n   * @return {Fragment}\n   */\n\n  create: function create(value, alias, index, key) {\n    var host = this._host;\n    // create iteration scope\n    var parentScope = this._scope || this.vm;\n    var scope = Object.create(parentScope);\n    // ref holder for the scope\n    scope.$refs = Object.create(parentScope.$refs);\n    scope.$els = Object.create(parentScope.$els);\n    // make sure point $parent to parent scope\n    scope.$parent = parentScope;\n    // for two-way binding on alias\n    scope.$forContext = this;\n    // define scope properties\n    // important: define the scope alias without forced conversion\n    // so that frozen data structures remain non-reactive.\n    withoutConversion(function () {\n      defineReactive(scope, alias, value);\n    });\n    defineReactive(scope, '$index', index);\n    if (key) {\n      defineReactive(scope, '$key', key);\n    } else if (scope.$key) {\n      // avoid accidental fallback\n      def(scope, '$key', null);\n    }\n    if (this.iterator) {\n      defineReactive(scope, this.iterator, key !== null ? key : index);\n    }\n    var frag = this.factory.create(host, scope, this._frag);\n    frag.forId = this.id;\n    this.cacheFrag(value, frag, index, key);\n    return frag;\n  },\n\n  /**\n   * Update the v-ref on owner vm.\n   */\n\n  updateRef: function updateRef() {\n    var ref = this.descriptor.ref;\n    if (!ref) return;\n    var hash = (this._scope || this.vm).$refs;\n    var refs;\n    if (!this.fromObject) {\n      refs = this.frags.map(findVmFromFrag);\n    } else {\n      refs = {};\n      this.frags.forEach(function (frag) {\n        refs[frag.scope.$key] = findVmFromFrag(frag);\n      });\n    }\n    hash[ref] = refs;\n  },\n\n  /**\n   * For option lists, update the containing v-model on\n   * parent <select>.\n   */\n\n  updateModel: function updateModel() {\n    if (this.isOption) {\n      var parent = this.start.parentNode;\n      var model = parent && parent.__v_model;\n      if (model) {\n        model.forceUpdate();\n      }\n    }\n  },\n\n  /**\n   * Insert a fragment. Handles staggering.\n   *\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {Node} prevEl\n   * @param {Boolean} inDocument\n   */\n\n  insert: function insert(frag, index, prevEl, inDocument) {\n    if (frag.staggerCb) {\n      frag.staggerCb.cancel();\n      frag.staggerCb = null;\n    }\n    var staggerAmount = this.getStagger(frag, index, null, 'enter');\n    if (inDocument && staggerAmount) {\n      // create an anchor and insert it synchronously,\n      // so that we can resolve the correct order without\n      // worrying about some elements not inserted yet\n      var anchor = frag.staggerAnchor;\n      if (!anchor) {\n        anchor = frag.staggerAnchor = createAnchor('stagger-anchor');\n        anchor.__v_frag = frag;\n      }\n      after(anchor, prevEl);\n      var op = frag.staggerCb = cancellable(function () {\n        frag.staggerCb = null;\n        frag.before(anchor);\n        remove(anchor);\n      });\n      setTimeout(op, staggerAmount);\n    } else {\n      var target = prevEl.nextSibling;\n      /* istanbul ignore if */\n      if (!target) {\n        // reset end anchor position in case the position was messed up\n        // by an external drag-n-drop library.\n        after(this.end, prevEl);\n        target = this.end;\n      }\n      frag.before(target);\n    }\n  },\n\n  /**\n   * Remove a fragment. Handles staggering.\n   *\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {Number} total\n   * @param {Boolean} inDocument\n   */\n\n  remove: function remove(frag, index, total, inDocument) {\n    if (frag.staggerCb) {\n      frag.staggerCb.cancel();\n      frag.staggerCb = null;\n      // it's not possible for the same frag to be removed\n      // twice, so if we have a pending stagger callback,\n      // it means this frag is queued for enter but removed\n      // before its transition started. Since it is already\n      // destroyed, we can just leave it in detached state.\n      return;\n    }\n    var staggerAmount = this.getStagger(frag, index, total, 'leave');\n    if (inDocument && staggerAmount) {\n      var op = frag.staggerCb = cancellable(function () {\n        frag.staggerCb = null;\n        frag.remove();\n      });\n      setTimeout(op, staggerAmount);\n    } else {\n      frag.remove();\n    }\n  },\n\n  /**\n   * Move a fragment to a new position.\n   * Force no transition.\n   *\n   * @param {Fragment} frag\n   * @param {Node} prevEl\n   */\n\n  move: function move(frag, prevEl) {\n    // fix a common issue with Sortable:\n    // if prevEl doesn't have nextSibling, this means it's\n    // been dragged after the end anchor. Just re-position\n    // the end anchor to the end of the container.\n    /* istanbul ignore if */\n    if (!prevEl.nextSibling) {\n      this.end.parentNode.appendChild(this.end);\n    }\n    frag.before(prevEl.nextSibling, false);\n  },\n\n  /**\n   * Cache a fragment using track-by or the object key.\n   *\n   * @param {*} value\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {String} [key]\n   */\n\n  cacheFrag: function cacheFrag(value, frag, index, key) {\n    var trackByKey = this.params.trackBy;\n    var cache = this.cache;\n    var primitive = !isObject(value);\n    var id;\n    if (key || trackByKey || primitive) {\n      id = getTrackByKey(index, key, value, trackByKey);\n      if (!cache[id]) {\n        cache[id] = frag;\n      } else if (trackByKey !== '$index') {\n        process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);\n      }\n    } else {\n      id = this.id;\n      if (hasOwn(value, id)) {\n        if (value[id] === null) {\n          value[id] = frag;\n        } else {\n          process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);\n        }\n      } else if (Object.isExtensible(value)) {\n        def(value, id, frag);\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('Frozen v-for objects cannot be automatically tracked, make sure to ' + 'provide a track-by key.');\n      }\n    }\n    frag.raw = value;\n  },\n\n  /**\n   * Get a cached fragment from the value/index/key\n   *\n   * @param {*} value\n   * @param {Number} index\n   * @param {String} key\n   * @return {Fragment}\n   */\n\n  getCachedFrag: function getCachedFrag(value, index, key) {\n    var trackByKey = this.params.trackBy;\n    var primitive = !isObject(value);\n    var frag;\n    if (key || trackByKey || primitive) {\n      var id = getTrackByKey(index, key, value, trackByKey);\n      frag = this.cache[id];\n    } else {\n      frag = value[this.id];\n    }\n    if (frag && (frag.reused || frag.fresh)) {\n      process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);\n    }\n    return frag;\n  },\n\n  /**\n   * Delete a fragment from cache.\n   *\n   * @param {Fragment} frag\n   */\n\n  deleteCachedFrag: function deleteCachedFrag(frag) {\n    var value = frag.raw;\n    var trackByKey = this.params.trackBy;\n    var scope = frag.scope;\n    var index = scope.$index;\n    // fix #948: avoid accidentally fall through to\n    // a parent repeater which happens to have $key.\n    var key = hasOwn(scope, '$key') && scope.$key;\n    var primitive = !isObject(value);\n    if (trackByKey || key || primitive) {\n      var id = getTrackByKey(index, key, value, trackByKey);\n      this.cache[id] = null;\n    } else {\n      value[this.id] = null;\n      frag.raw = null;\n    }\n  },\n\n  /**\n   * Get the stagger amount for an insertion/removal.\n   *\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {Number} total\n   * @param {String} type\n   */\n\n  getStagger: function getStagger(frag, index, total, type) {\n    type = type + 'Stagger';\n    var trans = frag.node.__v_trans;\n    var hooks = trans && trans.hooks;\n    var hook = hooks && (hooks[type] || hooks.stagger);\n    return hook ? hook.call(frag, index, total) : index * parseInt(this.params[type] || this.params.stagger, 10);\n  },\n\n  /**\n   * Pre-process the value before piping it through the\n   * filters. This is passed to and called by the watcher.\n   */\n\n  _preProcess: function _preProcess(value) {\n    // regardless of type, store the un-filtered raw value.\n    this.rawValue = value;\n    return value;\n  },\n\n  /**\n   * Post-process the value after it has been piped through\n   * the filters. This is passed to and called by the watcher.\n   *\n   * It is necessary for this to be called during the\n   * watcher's dependency collection phase because we want\n   * the v-for to update when the source Object is mutated.\n   */\n\n  _postProcess: function _postProcess(value) {\n    if (isArray(value)) {\n      return value;\n    } else if (isPlainObject(value)) {\n      // convert plain object to array.\n      var keys = Object.keys(value);\n      var i = keys.length;\n      var res = new Array(i);\n      var key;\n      while (i--) {\n        key = keys[i];\n        res[i] = {\n          $key: key,\n          $value: value[key]\n        };\n      }\n      return res;\n    } else {\n      if (typeof value === 'number' && !isNaN(value)) {\n        value = range(value);\n      }\n      return value || [];\n    }\n  },\n\n  unbind: function unbind() {\n    if (this.descriptor.ref) {\n      (this._scope || this.vm).$refs[this.descriptor.ref] = null;\n    }\n    if (this.frags) {\n      var i = this.frags.length;\n      var frag;\n      while (i--) {\n        frag = this.frags[i];\n        this.deleteCachedFrag(frag);\n        frag.destroy();\n      }\n    }\n  }\n};\n\n/**\n * Helper to find the previous element that is a fragment\n * anchor. This is necessary because a destroyed frag's\n * element could still be lingering in the DOM before its\n * leaving transition finishes, but its inserted flag\n * should have been set to false so we can skip them.\n *\n * If this is a block repeat, we want to make sure we only\n * return frag that is bound to this v-for. (see #929)\n *\n * @param {Fragment} frag\n * @param {Comment|Text} anchor\n * @param {String} id\n * @return {Fragment}\n */\n\nfunction findPrevFrag(frag, anchor, id) {\n  var el = frag.node.previousSibling;\n  /* istanbul ignore if */\n  if (!el) return;\n  frag = el.__v_frag;\n  while ((!frag || frag.forId !== id || !frag.inserted) && el !== anchor) {\n    el = el.previousSibling;\n    /* istanbul ignore if */\n    if (!el) return;\n    frag = el.__v_frag;\n  }\n  return frag;\n}\n\n/**\n * Find a vm from a fragment.\n *\n * @param {Fragment} frag\n * @return {Vue|undefined}\n */\n\nfunction findVmFromFrag(frag) {\n  var node = frag.node;\n  // handle multi-node frag\n  if (frag.end) {\n    while (!node.__vue__ && node !== frag.end && node.nextSibling) {\n      node = node.nextSibling;\n    }\n  }\n  return node.__vue__;\n}\n\n/**\n * Create a range array from given number.\n *\n * @param {Number} n\n * @return {Array}\n */\n\nfunction range(n) {\n  var i = -1;\n  var ret = new Array(Math.floor(n));\n  while (++i < n) {\n    ret[i] = i;\n  }\n  return ret;\n}\n\n/**\n * Get the track by key for an item.\n *\n * @param {Number} index\n * @param {String} key\n * @param {*} value\n * @param {String} [trackByKey]\n */\n\nfunction getTrackByKey(index, key, value, trackByKey) {\n  return trackByKey ? trackByKey === '$index' ? index : trackByKey.charAt(0).match(/\\w/) ? getPath(value, trackByKey) : value[trackByKey] : key || value;\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  vFor.warnDuplicate = function (value) {\n    warn('Duplicate value found in v-for=\"' + this.descriptor.raw + '\": ' + JSON.stringify(value) + '. Use track-by=\"$index\" if ' + 'you are expecting duplicate values.', this.vm);\n  };\n}\n\nvar vIf = {\n\n  priority: IF,\n  terminal: true,\n\n  bind: function bind() {\n    var el = this.el;\n    if (!el.__vue__) {\n      // check else block\n      var next = el.nextElementSibling;\n      if (next && getAttr(next, 'v-else') !== null) {\n        remove(next);\n        this.elseEl = next;\n      }\n      // check main block\n      this.anchor = createAnchor('v-if');\n      replace(el, this.anchor);\n    } else {\n      process.env.NODE_ENV !== 'production' && warn('v-if=\"' + this.expression + '\" cannot be ' + 'used on an instance root element.', this.vm);\n      this.invalid = true;\n    }\n  },\n\n  update: function update(value) {\n    if (this.invalid) return;\n    if (value) {\n      if (!this.frag) {\n        this.insert();\n      }\n    } else {\n      this.remove();\n    }\n  },\n\n  insert: function insert() {\n    if (this.elseFrag) {\n      this.elseFrag.remove();\n      this.elseFrag = null;\n    }\n    // lazy init factory\n    if (!this.factory) {\n      this.factory = new FragmentFactory(this.vm, this.el);\n    }\n    this.frag = this.factory.create(this._host, this._scope, this._frag);\n    this.frag.before(this.anchor);\n  },\n\n  remove: function remove() {\n    if (this.frag) {\n      this.frag.remove();\n      this.frag = null;\n    }\n    if (this.elseEl && !this.elseFrag) {\n      if (!this.elseFactory) {\n        this.elseFactory = new FragmentFactory(this.elseEl._context || this.vm, this.elseEl);\n      }\n      this.elseFrag = this.elseFactory.create(this._host, this._scope, this._frag);\n      this.elseFrag.before(this.anchor);\n    }\n  },\n\n  unbind: function unbind() {\n    if (this.frag) {\n      this.frag.destroy();\n    }\n    if (this.elseFrag) {\n      this.elseFrag.destroy();\n    }\n  }\n};\n\nvar show = {\n\n  bind: function bind() {\n    // check else block\n    var next = this.el.nextElementSibling;\n    if (next && getAttr(next, 'v-else') !== null) {\n      this.elseEl = next;\n    }\n  },\n\n  update: function update(value) {\n    this.apply(this.el, value);\n    if (this.elseEl) {\n      this.apply(this.elseEl, !value);\n    }\n  },\n\n  apply: function apply(el, value) {\n    if (inDoc(el)) {\n      applyTransition(el, value ? 1 : -1, toggle, this.vm);\n    } else {\n      toggle();\n    }\n    function toggle() {\n      el.style.display = value ? '' : 'none';\n    }\n  }\n};\n\nvar text$2 = {\n\n  bind: function bind() {\n    var self = this;\n    var el = this.el;\n    var isRange = el.type === 'range';\n    var lazy = this.params.lazy;\n    var number = this.params.number;\n    var debounce = this.params.debounce;\n\n    // handle composition events.\n    //   http://blog.evanyou.me/2014/01/03/composition-event/\n    // skip this for Android because it handles composition\n    // events quite differently. Android doesn't trigger\n    // composition events for language input methods e.g.\n    // Chinese, but instead triggers them for spelling\n    // suggestions... (see Discussion/#162)\n    var composing = false;\n    if (!isAndroid && !isRange) {\n      this.on('compositionstart', function () {\n        composing = true;\n      });\n      this.on('compositionend', function () {\n        composing = false;\n        // in IE11 the \"compositionend\" event fires AFTER\n        // the \"input\" event, so the input handler is blocked\n        // at the end... have to call it here.\n        //\n        // #1327: in lazy mode this is unecessary.\n        if (!lazy) {\n          self.listener();\n        }\n      });\n    }\n\n    // prevent messing with the input when user is typing,\n    // and force update on blur.\n    this.focused = false;\n    if (!isRange && !lazy) {\n      this.on('focus', function () {\n        self.focused = true;\n      });\n      this.on('blur', function () {\n        self.focused = false;\n        // do not sync value after fragment removal (#2017)\n        if (!self._frag || self._frag.inserted) {\n          self.rawListener();\n        }\n      });\n    }\n\n    // Now attach the main listener\n    this.listener = this.rawListener = function () {\n      if (composing || !self._bound) {\n        return;\n      }\n      var val = number || isRange ? toNumber(el.value) : el.value;\n      self.set(val);\n      // force update on next tick to avoid lock & same value\n      // also only update when user is not typing\n      nextTick(function () {\n        if (self._bound && !self.focused) {\n          self.update(self._watcher.value);\n        }\n      });\n    };\n\n    // apply debounce\n    if (debounce) {\n      this.listener = _debounce(this.listener, debounce);\n    }\n\n    // Support jQuery events, since jQuery.trigger() doesn't\n    // trigger native events in some cases and some plugins\n    // rely on $.trigger()\n    //\n    // We want to make sure if a listener is attached using\n    // jQuery, it is also removed with jQuery, that's why\n    // we do the check for each directive instance and\n    // store that check result on itself. This also allows\n    // easier test coverage control by unsetting the global\n    // jQuery variable in tests.\n    this.hasjQuery = typeof jQuery === 'function';\n    if (this.hasjQuery) {\n      var method = jQuery.fn.on ? 'on' : 'bind';\n      jQuery(el)[method]('change', this.rawListener);\n      if (!lazy) {\n        jQuery(el)[method]('input', this.listener);\n      }\n    } else {\n      this.on('change', this.rawListener);\n      if (!lazy) {\n        this.on('input', this.listener);\n      }\n    }\n\n    // IE9 doesn't fire input event on backspace/del/cut\n    if (!lazy && isIE9) {\n      this.on('cut', function () {\n        nextTick(self.listener);\n      });\n      this.on('keyup', function (e) {\n        if (e.keyCode === 46 || e.keyCode === 8) {\n          self.listener();\n        }\n      });\n    }\n\n    // set initial value if present\n    if (el.hasAttribute('value') || el.tagName === 'TEXTAREA' && el.value.trim()) {\n      this.afterBind = this.listener;\n    }\n  },\n\n  update: function update(value) {\n    // #3029 only update when the value changes. This prevent\n    // browsers from overwriting values like selectionStart\n    value = _toString(value);\n    if (value !== this.el.value) this.el.value = value;\n  },\n\n  unbind: function unbind() {\n    var el = this.el;\n    if (this.hasjQuery) {\n      var method = jQuery.fn.off ? 'off' : 'unbind';\n      jQuery(el)[method]('change', this.listener);\n      jQuery(el)[method]('input', this.listener);\n    }\n  }\n};\n\nvar radio = {\n\n  bind: function bind() {\n    var self = this;\n    var el = this.el;\n\n    this.getValue = function () {\n      // value overwrite via v-bind:value\n      if (el.hasOwnProperty('_value')) {\n        return el._value;\n      }\n      var val = el.value;\n      if (self.params.number) {\n        val = toNumber(val);\n      }\n      return val;\n    };\n\n    this.listener = function () {\n      self.set(self.getValue());\n    };\n    this.on('change', this.listener);\n\n    if (el.hasAttribute('checked')) {\n      this.afterBind = this.listener;\n    }\n  },\n\n  update: function update(value) {\n    this.el.checked = looseEqual(value, this.getValue());\n  }\n};\n\nvar select = {\n\n  bind: function bind() {\n    var _this = this;\n\n    var self = this;\n    var el = this.el;\n\n    // method to force update DOM using latest value.\n    this.forceUpdate = function () {\n      if (self._watcher) {\n        self.update(self._watcher.get());\n      }\n    };\n\n    // check if this is a multiple select\n    var multiple = this.multiple = el.hasAttribute('multiple');\n\n    // attach listener\n    this.listener = function () {\n      var value = getValue(el, multiple);\n      value = self.params.number ? isArray(value) ? value.map(toNumber) : toNumber(value) : value;\n      self.set(value);\n    };\n    this.on('change', this.listener);\n\n    // if has initial value, set afterBind\n    var initValue = getValue(el, multiple, true);\n    if (multiple && initValue.length || !multiple && initValue !== null) {\n      this.afterBind = this.listener;\n    }\n\n    // All major browsers except Firefox resets\n    // selectedIndex with value -1 to 0 when the element\n    // is appended to a new parent, therefore we have to\n    // force a DOM update whenever that happens...\n    this.vm.$on('hook:attached', function () {\n      nextTick(_this.forceUpdate);\n    });\n    if (!inDoc(el)) {\n      nextTick(this.forceUpdate);\n    }\n  },\n\n  update: function update(value) {\n    var el = this.el;\n    el.selectedIndex = -1;\n    var multi = this.multiple && isArray(value);\n    var options = el.options;\n    var i = options.length;\n    var op, val;\n    while (i--) {\n      op = options[i];\n      val = op.hasOwnProperty('_value') ? op._value : op.value;\n      /* eslint-disable eqeqeq */\n      op.selected = multi ? indexOf$1(value, val) > -1 : looseEqual(value, val);\n      /* eslint-enable eqeqeq */\n    }\n  },\n\n  unbind: function unbind() {\n    /* istanbul ignore next */\n    this.vm.$off('hook:attached', this.forceUpdate);\n  }\n};\n\n/**\n * Get select value\n *\n * @param {SelectElement} el\n * @param {Boolean} multi\n * @param {Boolean} init\n * @return {Array|*}\n */\n\nfunction getValue(el, multi, init) {\n  var res = multi ? [] : null;\n  var op, val, selected;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    op = el.options[i];\n    selected = init ? op.hasAttribute('selected') : op.selected;\n    if (selected) {\n      val = op.hasOwnProperty('_value') ? op._value : op.value;\n      if (multi) {\n        res.push(val);\n      } else {\n        return val;\n      }\n    }\n  }\n  return res;\n}\n\n/**\n * Native Array.indexOf uses strict equal, but in this\n * case we need to match string/numbers with custom equal.\n *\n * @param {Array} arr\n * @param {*} val\n */\n\nfunction indexOf$1(arr, val) {\n  var i = arr.length;\n  while (i--) {\n    if (looseEqual(arr[i], val)) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nvar checkbox = {\n\n  bind: function bind() {\n    var self = this;\n    var el = this.el;\n\n    this.getValue = function () {\n      return el.hasOwnProperty('_value') ? el._value : self.params.number ? toNumber(el.value) : el.value;\n    };\n\n    function getBooleanValue() {\n      var val = el.checked;\n      if (val && el.hasOwnProperty('_trueValue')) {\n        return el._trueValue;\n      }\n      if (!val && el.hasOwnProperty('_falseValue')) {\n        return el._falseValue;\n      }\n      return val;\n    }\n\n    this.listener = function () {\n      var model = self._watcher.value;\n      if (isArray(model)) {\n        var val = self.getValue();\n        if (el.checked) {\n          if (indexOf(model, val) < 0) {\n            model.push(val);\n          }\n        } else {\n          model.$remove(val);\n        }\n      } else {\n        self.set(getBooleanValue());\n      }\n    };\n\n    this.on('change', this.listener);\n    if (el.hasAttribute('checked')) {\n      this.afterBind = this.listener;\n    }\n  },\n\n  update: function update(value) {\n    var el = this.el;\n    if (isArray(value)) {\n      el.checked = indexOf(value, this.getValue()) > -1;\n    } else {\n      if (el.hasOwnProperty('_trueValue')) {\n        el.checked = looseEqual(value, el._trueValue);\n      } else {\n        el.checked = !!value;\n      }\n    }\n  }\n};\n\nvar handlers = {\n  text: text$2,\n  radio: radio,\n  select: select,\n  checkbox: checkbox\n};\n\nvar model = {\n\n  priority: MODEL,\n  twoWay: true,\n  handlers: handlers,\n  params: ['lazy', 'number', 'debounce'],\n\n  /**\n   * Possible elements:\n   *   <select>\n   *   <textarea>\n   *   <input type=\"*\">\n   *     - text\n   *     - checkbox\n   *     - radio\n   *     - number\n   */\n\n  bind: function bind() {\n    // friendly warning...\n    this.checkFilters();\n    if (this.hasRead && !this.hasWrite) {\n      process.env.NODE_ENV !== 'production' && warn('It seems you are using a read-only filter with ' + 'v-model=\"' + this.descriptor.raw + '\". ' + 'You might want to use a two-way filter to ensure correct behavior.', this.vm);\n    }\n    var el = this.el;\n    var tag = el.tagName;\n    var handler;\n    if (tag === 'INPUT') {\n      handler = handlers[el.type] || handlers.text;\n    } else if (tag === 'SELECT') {\n      handler = handlers.select;\n    } else if (tag === 'TEXTAREA') {\n      handler = handlers.text;\n    } else {\n      process.env.NODE_ENV !== 'production' && warn('v-model does not support element type: ' + tag, this.vm);\n      return;\n    }\n    el.__v_model = this;\n    handler.bind.call(this);\n    this.update = handler.update;\n    this._unbind = handler.unbind;\n  },\n\n  /**\n   * Check read/write filter stats.\n   */\n\n  checkFilters: function checkFilters() {\n    var filters = this.filters;\n    if (!filters) return;\n    var i = filters.length;\n    while (i--) {\n      var filter = resolveAsset(this.vm.$options, 'filters', filters[i].name);\n      if (typeof filter === 'function' || filter.read) {\n        this.hasRead = true;\n      }\n      if (filter.write) {\n        this.hasWrite = true;\n      }\n    }\n  },\n\n  unbind: function unbind() {\n    this.el.__v_model = null;\n    this._unbind && this._unbind();\n  }\n};\n\n// keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  'delete': [8, 46],\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40\n};\n\nfunction keyFilter(handler, keys) {\n  var codes = keys.map(function (key) {\n    var charCode = key.charCodeAt(0);\n    if (charCode > 47 && charCode < 58) {\n      return parseInt(key, 10);\n    }\n    if (key.length === 1) {\n      charCode = key.toUpperCase().charCodeAt(0);\n      if (charCode > 64 && charCode < 91) {\n        return charCode;\n      }\n    }\n    return keyCodes[key];\n  });\n  codes = [].concat.apply([], codes);\n  return function keyHandler(e) {\n    if (codes.indexOf(e.keyCode) > -1) {\n      return handler.call(this, e);\n    }\n  };\n}\n\nfunction stopFilter(handler) {\n  return function stopHandler(e) {\n    e.stopPropagation();\n    return handler.call(this, e);\n  };\n}\n\nfunction preventFilter(handler) {\n  return function preventHandler(e) {\n    e.preventDefault();\n    return handler.call(this, e);\n  };\n}\n\nfunction selfFilter(handler) {\n  return function selfHandler(e) {\n    if (e.target === e.currentTarget) {\n      return handler.call(this, e);\n    }\n  };\n}\n\nvar on$1 = {\n\n  priority: ON,\n  acceptStatement: true,\n  keyCodes: keyCodes,\n\n  bind: function bind() {\n    // deal with iframes\n    if (this.el.tagName === 'IFRAME' && this.arg !== 'load') {\n      var self = this;\n      this.iframeBind = function () {\n        on(self.el.contentWindow, self.arg, self.handler, self.modifiers.capture);\n      };\n      this.on('load', this.iframeBind);\n    }\n  },\n\n  update: function update(handler) {\n    // stub a noop for v-on with no value,\n    // e.g. @mousedown.prevent\n    if (!this.descriptor.raw) {\n      handler = function () {};\n    }\n\n    if (typeof handler !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn('v-on:' + this.arg + '=\"' + this.expression + '\" expects a function value, ' + 'got ' + handler, this.vm);\n      return;\n    }\n\n    // apply modifiers\n    if (this.modifiers.stop) {\n      handler = stopFilter(handler);\n    }\n    if (this.modifiers.prevent) {\n      handler = preventFilter(handler);\n    }\n    if (this.modifiers.self) {\n      handler = selfFilter(handler);\n    }\n    // key filter\n    var keys = Object.keys(this.modifiers).filter(function (key) {\n      return key !== 'stop' && key !== 'prevent' && key !== 'self' && key !== 'capture';\n    });\n    if (keys.length) {\n      handler = keyFilter(handler, keys);\n    }\n\n    this.reset();\n    this.handler = handler;\n\n    if (this.iframeBind) {\n      this.iframeBind();\n    } else {\n      on(this.el, this.arg, this.handler, this.modifiers.capture);\n    }\n  },\n\n  reset: function reset() {\n    var el = this.iframeBind ? this.el.contentWindow : this.el;\n    if (this.handler) {\n      off(el, this.arg, this.handler);\n    }\n  },\n\n  unbind: function unbind() {\n    this.reset();\n  }\n};\n\nvar prefixes = ['-webkit-', '-moz-', '-ms-'];\nvar camelPrefixes = ['Webkit', 'Moz', 'ms'];\nvar importantRE = /!important;?$/;\nvar propCache = Object.create(null);\n\nvar testEl = null;\n\nvar style = {\n\n  deep: true,\n\n  update: function update(value) {\n    if (typeof value === 'string') {\n      this.el.style.cssText = value;\n    } else if (isArray(value)) {\n      this.handleObject(value.reduce(extend, {}));\n    } else {\n      this.handleObject(value || {});\n    }\n  },\n\n  handleObject: function handleObject(value) {\n    // cache object styles so that only changed props\n    // are actually updated.\n    var cache = this.cache || (this.cache = {});\n    var name, val;\n    for (name in cache) {\n      if (!(name in value)) {\n        this.handleSingle(name, null);\n        delete cache[name];\n      }\n    }\n    for (name in value) {\n      val = value[name];\n      if (val !== cache[name]) {\n        cache[name] = val;\n        this.handleSingle(name, val);\n      }\n    }\n  },\n\n  handleSingle: function handleSingle(prop, value) {\n    prop = normalize(prop);\n    if (!prop) return; // unsupported prop\n    // cast possible numbers/booleans into strings\n    if (value != null) value += '';\n    if (value) {\n      var isImportant = importantRE.test(value) ? 'important' : '';\n      if (isImportant) {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production') {\n          warn('It\\'s probably a bad idea to use !important with inline rules. ' + 'This feature will be deprecated in a future version of Vue.');\n        }\n        value = value.replace(importantRE, '').trim();\n        this.el.style.setProperty(prop.kebab, value, isImportant);\n      } else {\n        this.el.style[prop.camel] = value;\n      }\n    } else {\n      this.el.style[prop.camel] = '';\n    }\n  }\n\n};\n\n/**\n * Normalize a CSS property name.\n * - cache result\n * - auto prefix\n * - camelCase -> dash-case\n *\n * @param {String} prop\n * @return {String}\n */\n\nfunction normalize(prop) {\n  if (propCache[prop]) {\n    return propCache[prop];\n  }\n  var res = prefix(prop);\n  propCache[prop] = propCache[res] = res;\n  return res;\n}\n\n/**\n * Auto detect the appropriate prefix for a CSS property.\n * https://gist.github.com/paulirish/523692\n *\n * @param {String} prop\n * @return {String}\n */\n\nfunction prefix(prop) {\n  prop = hyphenate(prop);\n  var camel = camelize(prop);\n  var upper = camel.charAt(0).toUpperCase() + camel.slice(1);\n  if (!testEl) {\n    testEl = document.createElement('div');\n  }\n  var i = prefixes.length;\n  var prefixed;\n  if (camel !== 'filter' && camel in testEl.style) {\n    return {\n      kebab: prop,\n      camel: camel\n    };\n  }\n  while (i--) {\n    prefixed = camelPrefixes[i] + upper;\n    if (prefixed in testEl.style) {\n      return {\n        kebab: prefixes[i] + prop,\n        camel: prefixed\n      };\n    }\n  }\n}\n\n// xlink\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\nvar xlinkRE = /^xlink:/;\n\n// check for attributes that prohibit interpolations\nvar disallowedInterpAttrRE = /^v-|^:|^@|^(?:is|transition|transition-mode|debounce|track-by|stagger|enter-stagger|leave-stagger)$/;\n// these attributes should also set their corresponding properties\n// because they only affect the initial state of the element\nvar attrWithPropsRE = /^(?:value|checked|selected|muted)$/;\n// these attributes expect enumrated values of \"true\" or \"false\"\n// but are not boolean attributes\nvar enumeratedAttrRE = /^(?:draggable|contenteditable|spellcheck)$/;\n\n// these attributes should set a hidden property for\n// binding v-model to object values\nvar modelProps = {\n  value: '_value',\n  'true-value': '_trueValue',\n  'false-value': '_falseValue'\n};\n\nvar bind$1 = {\n\n  priority: BIND,\n\n  bind: function bind() {\n    var attr = this.arg;\n    var tag = this.el.tagName;\n    // should be deep watch on object mode\n    if (!attr) {\n      this.deep = true;\n    }\n    // handle interpolation bindings\n    var descriptor = this.descriptor;\n    var tokens = descriptor.interp;\n    if (tokens) {\n      // handle interpolations with one-time tokens\n      if (descriptor.hasOneTime) {\n        this.expression = tokensToExp(tokens, this._scope || this.vm);\n      }\n\n      // only allow binding on native attributes\n      if (disallowedInterpAttrRE.test(attr) || attr === 'name' && (tag === 'PARTIAL' || tag === 'SLOT')) {\n        process.env.NODE_ENV !== 'production' && warn(attr + '=\"' + descriptor.raw + '\": ' + 'attribute interpolation is not allowed in Vue.js ' + 'directives and special attributes.', this.vm);\n        this.el.removeAttribute(attr);\n        this.invalid = true;\n      }\n\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production') {\n        var raw = attr + '=\"' + descriptor.raw + '\": ';\n        // warn src\n        if (attr === 'src') {\n          warn(raw + 'interpolation in \"src\" attribute will cause ' + 'a 404 request. Use v-bind:src instead.', this.vm);\n        }\n\n        // warn style\n        if (attr === 'style') {\n          warn(raw + 'interpolation in \"style\" attribute will cause ' + 'the attribute to be discarded in Internet Explorer. ' + 'Use v-bind:style instead.', this.vm);\n        }\n      }\n    }\n  },\n\n  update: function update(value) {\n    if (this.invalid) {\n      return;\n    }\n    var attr = this.arg;\n    if (this.arg) {\n      this.handleSingle(attr, value);\n    } else {\n      this.handleObject(value || {});\n    }\n  },\n\n  // share object handler with v-bind:class\n  handleObject: style.handleObject,\n\n  handleSingle: function handleSingle(attr, value) {\n    var el = this.el;\n    var interp = this.descriptor.interp;\n    if (this.modifiers.camel) {\n      attr = camelize(attr);\n    }\n    if (!interp && attrWithPropsRE.test(attr) && attr in el) {\n      var attrValue = attr === 'value' ? value == null // IE9 will set input.value to \"null\" for null...\n      ? '' : value : value;\n\n      if (el[attr] !== attrValue) {\n        el[attr] = attrValue;\n      }\n    }\n    // set model props\n    var modelProp = modelProps[attr];\n    if (!interp && modelProp) {\n      el[modelProp] = value;\n      // update v-model if present\n      var model = el.__v_model;\n      if (model) {\n        model.listener();\n      }\n    }\n    // do not set value attribute for textarea\n    if (attr === 'value' && el.tagName === 'TEXTAREA') {\n      el.removeAttribute(attr);\n      return;\n    }\n    // update attribute\n    if (enumeratedAttrRE.test(attr)) {\n      el.setAttribute(attr, value ? 'true' : 'false');\n    } else if (value != null && value !== false) {\n      if (attr === 'class') {\n        // handle edge case #1960:\n        // class interpolation should not overwrite Vue transition class\n        if (el.__v_trans) {\n          value += ' ' + el.__v_trans.id + '-transition';\n        }\n        setClass(el, value);\n      } else if (xlinkRE.test(attr)) {\n        el.setAttributeNS(xlinkNS, attr, value === true ? '' : value);\n      } else {\n        el.setAttribute(attr, value === true ? '' : value);\n      }\n    } else {\n      el.removeAttribute(attr);\n    }\n  }\n};\n\nvar el = {\n\n  priority: EL,\n\n  bind: function bind() {\n    /* istanbul ignore if */\n    if (!this.arg) {\n      return;\n    }\n    var id = this.id = camelize(this.arg);\n    var refs = (this._scope || this.vm).$els;\n    if (hasOwn(refs, id)) {\n      refs[id] = this.el;\n    } else {\n      defineReactive(refs, id, this.el);\n    }\n  },\n\n  unbind: function unbind() {\n    var refs = (this._scope || this.vm).$els;\n    if (refs[this.id] === this.el) {\n      refs[this.id] = null;\n    }\n  }\n};\n\nvar ref = {\n  bind: function bind() {\n    process.env.NODE_ENV !== 'production' && warn('v-ref:' + this.arg + ' must be used on a child ' + 'component. Found on <' + this.el.tagName.toLowerCase() + '>.', this.vm);\n  }\n};\n\nvar cloak = {\n  bind: function bind() {\n    var el = this.el;\n    this.vm.$once('pre-hook:compiled', function () {\n      el.removeAttribute('v-cloak');\n    });\n  }\n};\n\n// must export plain object\nvar directives = {\n  text: text$1,\n  html: html,\n  'for': vFor,\n  'if': vIf,\n  show: show,\n  model: model,\n  on: on$1,\n  bind: bind$1,\n  el: el,\n  ref: ref,\n  cloak: cloak\n};\n\nvar vClass = {\n\n  deep: true,\n\n  update: function update(value) {\n    if (!value) {\n      this.cleanup();\n    } else if (typeof value === 'string') {\n      this.setClass(value.trim().split(/\\s+/));\n    } else {\n      this.setClass(normalize$1(value));\n    }\n  },\n\n  setClass: function setClass(value) {\n    this.cleanup(value);\n    for (var i = 0, l = value.length; i < l; i++) {\n      var val = value[i];\n      if (val) {\n        apply(this.el, val, addClass);\n      }\n    }\n    this.prevKeys = value;\n  },\n\n  cleanup: function cleanup(value) {\n    var prevKeys = this.prevKeys;\n    if (!prevKeys) return;\n    var i = prevKeys.length;\n    while (i--) {\n      var key = prevKeys[i];\n      if (!value || value.indexOf(key) < 0) {\n        apply(this.el, key, removeClass);\n      }\n    }\n  }\n};\n\n/**\n * Normalize objects and arrays (potentially containing objects)\n * into array of strings.\n *\n * @param {Object|Array<String|Object>} value\n * @return {Array<String>}\n */\n\nfunction normalize$1(value) {\n  var res = [];\n  if (isArray(value)) {\n    for (var i = 0, l = value.length; i < l; i++) {\n      var _key = value[i];\n      if (_key) {\n        if (typeof _key === 'string') {\n          res.push(_key);\n        } else {\n          for (var k in _key) {\n            if (_key[k]) res.push(k);\n          }\n        }\n      }\n    }\n  } else if (isObject(value)) {\n    for (var key in value) {\n      if (value[key]) res.push(key);\n    }\n  }\n  return res;\n}\n\n/**\n * Add or remove a class/classes on an element\n *\n * @param {Element} el\n * @param {String} key The class name. This may or may not\n *                     contain a space character, in such a\n *                     case we'll deal with multiple class\n *                     names at once.\n * @param {Function} fn\n */\n\nfunction apply(el, key, fn) {\n  key = key.trim();\n  if (key.indexOf(' ') === -1) {\n    fn(el, key);\n    return;\n  }\n  // The key contains one or more space characters.\n  // Since a class name doesn't accept such characters, we\n  // treat it as multiple classes.\n  var keys = key.split(/\\s+/);\n  for (var i = 0, l = keys.length; i < l; i++) {\n    fn(el, keys[i]);\n  }\n}\n\nvar component = {\n\n  priority: COMPONENT,\n\n  params: ['keep-alive', 'transition-mode', 'inline-template'],\n\n  /**\n   * Setup. Two possible usages:\n   *\n   * - static:\n   *   <comp> or <div v-component=\"comp\">\n   *\n   * - dynamic:\n   *   <component :is=\"view\">\n   */\n\n  bind: function bind() {\n    if (!this.el.__vue__) {\n      // keep-alive cache\n      this.keepAlive = this.params.keepAlive;\n      if (this.keepAlive) {\n        this.cache = {};\n      }\n      // check inline-template\n      if (this.params.inlineTemplate) {\n        // extract inline template as a DocumentFragment\n        this.inlineTemplate = extractContent(this.el, true);\n      }\n      // component resolution related state\n      this.pendingComponentCb = this.Component = null;\n      // transition related state\n      this.pendingRemovals = 0;\n      this.pendingRemovalCb = null;\n      // create a ref anchor\n      this.anchor = createAnchor('v-component');\n      replace(this.el, this.anchor);\n      // remove is attribute.\n      // this is removed during compilation, but because compilation is\n      // cached, when the component is used elsewhere this attribute\n      // will remain at link time.\n      this.el.removeAttribute('is');\n      this.el.removeAttribute(':is');\n      // remove ref, same as above\n      if (this.descriptor.ref) {\n        this.el.removeAttribute('v-ref:' + hyphenate(this.descriptor.ref));\n      }\n      // if static, build right now.\n      if (this.literal) {\n        this.setComponent(this.expression);\n      }\n    } else {\n      process.env.NODE_ENV !== 'production' && warn('cannot mount component \"' + this.expression + '\" ' + 'on already mounted element: ' + this.el);\n    }\n  },\n\n  /**\n   * Public update, called by the watcher in the dynamic\n   * literal scenario, e.g. <component :is=\"view\">\n   */\n\n  update: function update(value) {\n    if (!this.literal) {\n      this.setComponent(value);\n    }\n  },\n\n  /**\n   * Switch dynamic components. May resolve the component\n   * asynchronously, and perform transition based on\n   * specified transition mode. Accepts a few additional\n   * arguments specifically for vue-router.\n   *\n   * The callback is called when the full transition is\n   * finished.\n   *\n   * @param {String} value\n   * @param {Function} [cb]\n   */\n\n  setComponent: function setComponent(value, cb) {\n    this.invalidatePending();\n    if (!value) {\n      // just remove current\n      this.unbuild(true);\n      this.remove(this.childVM, cb);\n      this.childVM = null;\n    } else {\n      var self = this;\n      this.resolveComponent(value, function () {\n        self.mountComponent(cb);\n      });\n    }\n  },\n\n  /**\n   * Resolve the component constructor to use when creating\n   * the child vm.\n   *\n   * @param {String|Function} value\n   * @param {Function} cb\n   */\n\n  resolveComponent: function resolveComponent(value, cb) {\n    var self = this;\n    this.pendingComponentCb = cancellable(function (Component) {\n      self.ComponentName = Component.options.name || (typeof value === 'string' ? value : null);\n      self.Component = Component;\n      cb();\n    });\n    this.vm._resolveComponent(value, this.pendingComponentCb);\n  },\n\n  /**\n   * Create a new instance using the current constructor and\n   * replace the existing instance. This method doesn't care\n   * whether the new component and the old one are actually\n   * the same.\n   *\n   * @param {Function} [cb]\n   */\n\n  mountComponent: function mountComponent(cb) {\n    // actual mount\n    this.unbuild(true);\n    var self = this;\n    var activateHooks = this.Component.options.activate;\n    var cached = this.getCached();\n    var newComponent = this.build();\n    if (activateHooks && !cached) {\n      this.waitingFor = newComponent;\n      callActivateHooks(activateHooks, newComponent, function () {\n        if (self.waitingFor !== newComponent) {\n          return;\n        }\n        self.waitingFor = null;\n        self.transition(newComponent, cb);\n      });\n    } else {\n      // update ref for kept-alive component\n      if (cached) {\n        newComponent._updateRef();\n      }\n      this.transition(newComponent, cb);\n    }\n  },\n\n  /**\n   * When the component changes or unbinds before an async\n   * constructor is resolved, we need to invalidate its\n   * pending callback.\n   */\n\n  invalidatePending: function invalidatePending() {\n    if (this.pendingComponentCb) {\n      this.pendingComponentCb.cancel();\n      this.pendingComponentCb = null;\n    }\n  },\n\n  /**\n   * Instantiate/insert a new child vm.\n   * If keep alive and has cached instance, insert that\n   * instance; otherwise build a new one and cache it.\n   *\n   * @param {Object} [extraOptions]\n   * @return {Vue} - the created instance\n   */\n\n  build: function build(extraOptions) {\n    var cached = this.getCached();\n    if (cached) {\n      return cached;\n    }\n    if (this.Component) {\n      // default options\n      var options = {\n        name: this.ComponentName,\n        el: cloneNode(this.el),\n        template: this.inlineTemplate,\n        // make sure to add the child with correct parent\n        // if this is a transcluded component, its parent\n        // should be the transclusion host.\n        parent: this._host || this.vm,\n        // if no inline-template, then the compiled\n        // linker can be cached for better performance.\n        _linkerCachable: !this.inlineTemplate,\n        _ref: this.descriptor.ref,\n        _asComponent: true,\n        _isRouterView: this._isRouterView,\n        // if this is a transcluded component, context\n        // will be the common parent vm of this instance\n        // and its host.\n        _context: this.vm,\n        // if this is inside an inline v-for, the scope\n        // will be the intermediate scope created for this\n        // repeat fragment. this is used for linking props\n        // and container directives.\n        _scope: this._scope,\n        // pass in the owner fragment of this component.\n        // this is necessary so that the fragment can keep\n        // track of its contained components in order to\n        // call attach/detach hooks for them.\n        _frag: this._frag\n      };\n      // extra options\n      // in 1.0.0 this is used by vue-router only\n      /* istanbul ignore if */\n      if (extraOptions) {\n        extend(options, extraOptions);\n      }\n      var child = new this.Component(options);\n      if (this.keepAlive) {\n        this.cache[this.Component.cid] = child;\n      }\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && this.el.hasAttribute('transition') && child._isFragment) {\n        warn('Transitions will not work on a fragment instance. ' + 'Template: ' + child.$options.template, child);\n      }\n      return child;\n    }\n  },\n\n  /**\n   * Try to get a cached instance of the current component.\n   *\n   * @return {Vue|undefined}\n   */\n\n  getCached: function getCached() {\n    return this.keepAlive && this.cache[this.Component.cid];\n  },\n\n  /**\n   * Teardown the current child, but defers cleanup so\n   * that we can separate the destroy and removal steps.\n   *\n   * @param {Boolean} defer\n   */\n\n  unbuild: function unbuild(defer) {\n    if (this.waitingFor) {\n      if (!this.keepAlive) {\n        this.waitingFor.$destroy();\n      }\n      this.waitingFor = null;\n    }\n    var child = this.childVM;\n    if (!child || this.keepAlive) {\n      if (child) {\n        // remove ref\n        child._inactive = true;\n        child._updateRef(true);\n      }\n      return;\n    }\n    // the sole purpose of `deferCleanup` is so that we can\n    // \"deactivate\" the vm right now and perform DOM removal\n    // later.\n    child.$destroy(false, defer);\n  },\n\n  /**\n   * Remove current destroyed child and manually do\n   * the cleanup after removal.\n   *\n   * @param {Function} cb\n   */\n\n  remove: function remove(child, cb) {\n    var keepAlive = this.keepAlive;\n    if (child) {\n      // we may have a component switch when a previous\n      // component is still being transitioned out.\n      // we want to trigger only one lastest insertion cb\n      // when the existing transition finishes. (#1119)\n      this.pendingRemovals++;\n      this.pendingRemovalCb = cb;\n      var self = this;\n      child.$remove(function () {\n        self.pendingRemovals--;\n        if (!keepAlive) child._cleanup();\n        if (!self.pendingRemovals && self.pendingRemovalCb) {\n          self.pendingRemovalCb();\n          self.pendingRemovalCb = null;\n        }\n      });\n    } else if (cb) {\n      cb();\n    }\n  },\n\n  /**\n   * Actually swap the components, depending on the\n   * transition mode. Defaults to simultaneous.\n   *\n   * @param {Vue} target\n   * @param {Function} [cb]\n   */\n\n  transition: function transition(target, cb) {\n    var self = this;\n    var current = this.childVM;\n    // for devtool inspection\n    if (current) current._inactive = true;\n    target._inactive = false;\n    this.childVM = target;\n    switch (self.params.transitionMode) {\n      case 'in-out':\n        target.$before(self.anchor, function () {\n          self.remove(current, cb);\n        });\n        break;\n      case 'out-in':\n        self.remove(current, function () {\n          target.$before(self.anchor, cb);\n        });\n        break;\n      default:\n        self.remove(current);\n        target.$before(self.anchor, cb);\n    }\n  },\n\n  /**\n   * Unbind.\n   */\n\n  unbind: function unbind() {\n    this.invalidatePending();\n    // Do not defer cleanup when unbinding\n    this.unbuild();\n    // destroy all keep-alive cached instances\n    if (this.cache) {\n      for (var key in this.cache) {\n        this.cache[key].$destroy();\n      }\n      this.cache = null;\n    }\n  }\n};\n\n/**\n * Call activate hooks in order (asynchronous)\n *\n * @param {Array} hooks\n * @param {Vue} vm\n * @param {Function} cb\n */\n\nfunction callActivateHooks(hooks, vm, cb) {\n  var total = hooks.length;\n  var called = 0;\n  hooks[0].call(vm, next);\n  function next() {\n    if (++called >= total) {\n      cb();\n    } else {\n      hooks[called].call(vm, next);\n    }\n  }\n}\n\nvar propBindingModes = config._propBindingModes;\nvar empty = {};\n\n// regexes\nvar identRE$1 = /^[$_a-zA-Z]+[\\w$]*$/;\nvar settablePathRE = /^[A-Za-z_$][\\w$]*(\\.[A-Za-z_$][\\w$]*|\\[[^\\[\\]]+\\])*$/;\n\n/**\n * Compile props on a root element and return\n * a props link function.\n *\n * @param {Element|DocumentFragment} el\n * @param {Array} propOptions\n * @param {Vue} vm\n * @return {Function} propsLinkFn\n */\n\nfunction compileProps(el, propOptions, vm) {\n  var props = [];\n  var names = Object.keys(propOptions);\n  var i = names.length;\n  var options, name, attr, value, path, parsed, prop;\n  while (i--) {\n    name = names[i];\n    options = propOptions[name] || empty;\n\n    if (process.env.NODE_ENV !== 'production' && name === '$data') {\n      warn('Do not use $data as prop.', vm);\n      continue;\n    }\n\n    // props could contain dashes, which will be\n    // interpreted as minus calculations by the parser\n    // so we need to camelize the path here\n    path = camelize(name);\n    if (!identRE$1.test(path)) {\n      process.env.NODE_ENV !== 'production' && warn('Invalid prop key: \"' + name + '\". Prop keys ' + 'must be valid identifiers.', vm);\n      continue;\n    }\n\n    prop = {\n      name: name,\n      path: path,\n      options: options,\n      mode: propBindingModes.ONE_WAY,\n      raw: null\n    };\n\n    attr = hyphenate(name);\n    // first check dynamic version\n    if ((value = getBindAttr(el, attr)) === null) {\n      if ((value = getBindAttr(el, attr + '.sync')) !== null) {\n        prop.mode = propBindingModes.TWO_WAY;\n      } else if ((value = getBindAttr(el, attr + '.once')) !== null) {\n        prop.mode = propBindingModes.ONE_TIME;\n      }\n    }\n    if (value !== null) {\n      // has dynamic binding!\n      prop.raw = value;\n      parsed = parseDirective(value);\n      value = parsed.expression;\n      prop.filters = parsed.filters;\n      // check binding type\n      if (isLiteral(value) && !parsed.filters) {\n        // for expressions containing literal numbers and\n        // booleans, there's no need to setup a prop binding,\n        // so we can optimize them as a one-time set.\n        prop.optimizedLiteral = true;\n      } else {\n        prop.dynamic = true;\n        // check non-settable path for two-way bindings\n        if (process.env.NODE_ENV !== 'production' && prop.mode === propBindingModes.TWO_WAY && !settablePathRE.test(value)) {\n          prop.mode = propBindingModes.ONE_WAY;\n          warn('Cannot bind two-way prop with non-settable ' + 'parent path: ' + value, vm);\n        }\n      }\n      prop.parentPath = value;\n\n      // warn required two-way\n      if (process.env.NODE_ENV !== 'production' && options.twoWay && prop.mode !== propBindingModes.TWO_WAY) {\n        warn('Prop \"' + name + '\" expects a two-way binding type.', vm);\n      }\n    } else if ((value = getAttr(el, attr)) !== null) {\n      // has literal binding!\n      prop.raw = value;\n    } else if (process.env.NODE_ENV !== 'production') {\n      // check possible camelCase prop usage\n      var lowerCaseName = path.toLowerCase();\n      value = /[A-Z\\-]/.test(name) && (el.getAttribute(lowerCaseName) || el.getAttribute(':' + lowerCaseName) || el.getAttribute('v-bind:' + lowerCaseName) || el.getAttribute(':' + lowerCaseName + '.once') || el.getAttribute('v-bind:' + lowerCaseName + '.once') || el.getAttribute(':' + lowerCaseName + '.sync') || el.getAttribute('v-bind:' + lowerCaseName + '.sync'));\n      if (value) {\n        warn('Possible usage error for prop `' + lowerCaseName + '` - ' + 'did you mean `' + attr + '`? HTML is case-insensitive, remember to use ' + 'kebab-case for props in templates.', vm);\n      } else if (options.required) {\n        // warn missing required\n        warn('Missing required prop: ' + name, vm);\n      }\n    }\n    // push prop\n    props.push(prop);\n  }\n  return makePropsLinkFn(props);\n}\n\n/**\n * Build a function that applies props to a vm.\n *\n * @param {Array} props\n * @return {Function} propsLinkFn\n */\n\nfunction makePropsLinkFn(props) {\n  return function propsLinkFn(vm, scope) {\n    // store resolved props info\n    vm._props = {};\n    var inlineProps = vm.$options.propsData;\n    var i = props.length;\n    var prop, path, options, value, raw;\n    while (i--) {\n      prop = props[i];\n      raw = prop.raw;\n      path = prop.path;\n      options = prop.options;\n      vm._props[path] = prop;\n      if (inlineProps && hasOwn(inlineProps, path)) {\n        initProp(vm, prop, inlineProps[path]);\n      }if (raw === null) {\n        // initialize absent prop\n        initProp(vm, prop, undefined);\n      } else if (prop.dynamic) {\n        // dynamic prop\n        if (prop.mode === propBindingModes.ONE_TIME) {\n          // one time binding\n          value = (scope || vm._context || vm).$get(prop.parentPath);\n          initProp(vm, prop, value);\n        } else {\n          if (vm._context) {\n            // dynamic binding\n            vm._bindDir({\n              name: 'prop',\n              def: propDef,\n              prop: prop\n            }, null, null, scope); // el, host, scope\n          } else {\n              // root instance\n              initProp(vm, prop, vm.$get(prop.parentPath));\n            }\n        }\n      } else if (prop.optimizedLiteral) {\n        // optimized literal, cast it and just set once\n        var stripped = stripQuotes(raw);\n        value = stripped === raw ? toBoolean(toNumber(raw)) : stripped;\n        initProp(vm, prop, value);\n      } else {\n        // string literal, but we need to cater for\n        // Boolean props with no value, or with same\n        // literal value (e.g. disabled=\"disabled\")\n        // see https://github.com/vuejs/vue-loader/issues/182\n        value = options.type === Boolean && (raw === '' || raw === hyphenate(prop.name)) ? true : raw;\n        initProp(vm, prop, value);\n      }\n    }\n  };\n}\n\n/**\n * Process a prop with a rawValue, applying necessary coersions,\n * default values & assertions and call the given callback with\n * processed value.\n *\n * @param {Vue} vm\n * @param {Object} prop\n * @param {*} rawValue\n * @param {Function} fn\n */\n\nfunction processPropValue(vm, prop, rawValue, fn) {\n  var isSimple = prop.dynamic && isSimplePath(prop.parentPath);\n  var value = rawValue;\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop);\n  }\n  value = coerceProp(prop, value, vm);\n  var coerced = value !== rawValue;\n  if (!assertProp(prop, value, vm)) {\n    value = undefined;\n  }\n  if (isSimple && !coerced) {\n    withoutConversion(function () {\n      fn(value);\n    });\n  } else {\n    fn(value);\n  }\n}\n\n/**\n * Set a prop's initial value on a vm and its data object.\n *\n * @param {Vue} vm\n * @param {Object} prop\n * @param {*} value\n */\n\nfunction initProp(vm, prop, value) {\n  processPropValue(vm, prop, value, function (value) {\n    defineReactive(vm, prop.path, value);\n  });\n}\n\n/**\n * Update a prop's value on a vm.\n *\n * @param {Vue} vm\n * @param {Object} prop\n * @param {*} value\n */\n\nfunction updateProp(vm, prop, value) {\n  processPropValue(vm, prop, value, function (value) {\n    vm[prop.path] = value;\n  });\n}\n\n/**\n * Get the default value of a prop.\n *\n * @param {Vue} vm\n * @param {Object} prop\n * @return {*}\n */\n\nfunction getPropDefaultValue(vm, prop) {\n  // no default, return undefined\n  var options = prop.options;\n  if (!hasOwn(options, 'default')) {\n    // absent boolean value defaults to false\n    return options.type === Boolean ? false : undefined;\n  }\n  var def = options['default'];\n  // warn against non-factory defaults for Object & Array\n  if (isObject(def)) {\n    process.env.NODE_ENV !== 'production' && warn('Invalid default value for prop \"' + prop.name + '\": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);\n  }\n  // call factory function for non-Function types\n  return typeof def === 'function' && options.type !== Function ? def.call(vm) : def;\n}\n\n/**\n * Assert whether a prop is valid.\n *\n * @param {Object} prop\n * @param {*} value\n * @param {Vue} vm\n */\n\nfunction assertProp(prop, value, vm) {\n  if (!prop.options.required && ( // non-required\n  prop.raw === null || // abscent\n  value == null) // null or undefined\n  ) {\n      return true;\n    }\n  var options = prop.options;\n  var type = options.type;\n  var valid = !type;\n  var expectedTypes = [];\n  if (type) {\n    if (!isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType);\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn('Invalid prop: type check failed for prop \"' + prop.name + '\".' + ' Expected ' + expectedTypes.map(formatType).join(', ') + ', got ' + formatValue(value) + '.', vm);\n    }\n    return false;\n  }\n  var validator = options.validator;\n  if (validator) {\n    if (!validator(value)) {\n      process.env.NODE_ENV !== 'production' && warn('Invalid prop: custom validator check failed for prop \"' + prop.name + '\".', vm);\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Force parsing value with coerce option.\n *\n * @param {*} value\n * @param {Object} options\n * @return {*}\n */\n\nfunction coerceProp(prop, value, vm) {\n  var coerce = prop.options.coerce;\n  if (!coerce) {\n    return value;\n  }\n  if (typeof coerce === 'function') {\n    return coerce(value);\n  } else {\n    process.env.NODE_ENV !== 'production' && warn('Invalid coerce for prop \"' + prop.name + '\": expected function, got ' + typeof coerce + '.', vm);\n    return value;\n  }\n}\n\n/**\n * Assert the type of a value\n *\n * @param {*} value\n * @param {Function} type\n * @return {Object}\n */\n\nfunction assertType(value, type) {\n  var valid;\n  var expectedType;\n  if (type === String) {\n    expectedType = 'string';\n    valid = typeof value === expectedType;\n  } else if (type === Number) {\n    expectedType = 'number';\n    valid = typeof value === expectedType;\n  } else if (type === Boolean) {\n    expectedType = 'boolean';\n    valid = typeof value === expectedType;\n  } else if (type === Function) {\n    expectedType = 'function';\n    valid = typeof value === expectedType;\n  } else if (type === Object) {\n    expectedType = 'object';\n    valid = isPlainObject(value);\n  } else if (type === Array) {\n    expectedType = 'array';\n    valid = isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  };\n}\n\n/**\n * Format type for output\n *\n * @param {String} type\n * @return {String}\n */\n\nfunction formatType(type) {\n  return type ? type.charAt(0).toUpperCase() + type.slice(1) : 'custom type';\n}\n\n/**\n * Format value\n *\n * @param {*} value\n * @return {String}\n */\n\nfunction formatValue(val) {\n  return Object.prototype.toString.call(val).slice(8, -1);\n}\n\nvar bindingModes = config._propBindingModes;\n\nvar propDef = {\n\n  bind: function bind() {\n    var child = this.vm;\n    var parent = child._context;\n    // passed in from compiler directly\n    var prop = this.descriptor.prop;\n    var childKey = prop.path;\n    var parentKey = prop.parentPath;\n    var twoWay = prop.mode === bindingModes.TWO_WAY;\n\n    var parentWatcher = this.parentWatcher = new Watcher(parent, parentKey, function (val) {\n      updateProp(child, prop, val);\n    }, {\n      twoWay: twoWay,\n      filters: prop.filters,\n      // important: props need to be observed on the\n      // v-for scope if present\n      scope: this._scope\n    });\n\n    // set the child initial value.\n    initProp(child, prop, parentWatcher.value);\n\n    // setup two-way binding\n    if (twoWay) {\n      // important: defer the child watcher creation until\n      // the created hook (after data observation)\n      var self = this;\n      child.$once('pre-hook:created', function () {\n        self.childWatcher = new Watcher(child, childKey, function (val) {\n          parentWatcher.set(val);\n        }, {\n          // ensure sync upward before parent sync down.\n          // this is necessary in cases e.g. the child\n          // mutates a prop array, then replaces it. (#1683)\n          sync: true\n        });\n      });\n    }\n  },\n\n  unbind: function unbind() {\n    this.parentWatcher.teardown();\n    if (this.childWatcher) {\n      this.childWatcher.teardown();\n    }\n  }\n};\n\nvar queue$1 = [];\nvar queued = false;\n\n/**\n * Push a job into the queue.\n *\n * @param {Function} job\n */\n\nfunction pushJob(job) {\n  queue$1.push(job);\n  if (!queued) {\n    queued = true;\n    nextTick(flush);\n  }\n}\n\n/**\n * Flush the queue, and do one forced reflow before\n * triggering transitions.\n */\n\nfunction flush() {\n  // Force layout\n  var f = document.documentElement.offsetHeight;\n  for (var i = 0; i < queue$1.length; i++) {\n    queue$1[i]();\n  }\n  queue$1 = [];\n  queued = false;\n  // dummy return, so js linters don't complain about\n  // unused variable f\n  return f;\n}\n\nvar TYPE_TRANSITION = 'transition';\nvar TYPE_ANIMATION = 'animation';\nvar transDurationProp = transitionProp + 'Duration';\nvar animDurationProp = animationProp + 'Duration';\n\n/**\n * If a just-entered element is applied the\n * leave class while its enter transition hasn't started yet,\n * and the transitioned property has the same value for both\n * enter/leave, then the leave transition will be skipped and\n * the transitionend event never fires. This function ensures\n * its callback to be called after a transition has started\n * by waiting for double raf.\n *\n * It falls back to setTimeout on devices that support CSS\n * transitions but not raf (e.g. Android 4.2 browser) - since\n * these environments are usually slow, we are giving it a\n * relatively large timeout.\n */\n\nvar raf = inBrowser && window.requestAnimationFrame;\nvar waitForTransitionStart = raf\n/* istanbul ignore next */\n? function (fn) {\n  raf(function () {\n    raf(fn);\n  });\n} : function (fn) {\n  setTimeout(fn, 50);\n};\n\n/**\n * A Transition object that encapsulates the state and logic\n * of the transition.\n *\n * @param {Element} el\n * @param {String} id\n * @param {Object} hooks\n * @param {Vue} vm\n */\nfunction Transition(el, id, hooks, vm) {\n  this.id = id;\n  this.el = el;\n  this.enterClass = hooks && hooks.enterClass || id + '-enter';\n  this.leaveClass = hooks && hooks.leaveClass || id + '-leave';\n  this.hooks = hooks;\n  this.vm = vm;\n  // async state\n  this.pendingCssEvent = this.pendingCssCb = this.cancel = this.pendingJsCb = this.op = this.cb = null;\n  this.justEntered = false;\n  this.entered = this.left = false;\n  this.typeCache = {};\n  // check css transition type\n  this.type = hooks && hooks.type;\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV !== 'production') {\n    if (this.type && this.type !== TYPE_TRANSITION && this.type !== TYPE_ANIMATION) {\n      warn('invalid CSS transition type for transition=\"' + this.id + '\": ' + this.type, vm);\n    }\n  }\n  // bind\n  var self = this;['enterNextTick', 'enterDone', 'leaveNextTick', 'leaveDone'].forEach(function (m) {\n    self[m] = bind(self[m], self);\n  });\n}\n\nvar p$1 = Transition.prototype;\n\n/**\n * Start an entering transition.\n *\n * 1. enter transition triggered\n * 2. call beforeEnter hook\n * 3. add enter class\n * 4. insert/show element\n * 5. call enter hook (with possible explicit js callback)\n * 6. reflow\n * 7. based on transition type:\n *    - transition:\n *        remove class now, wait for transitionend,\n *        then done if there's no explicit js callback.\n *    - animation:\n *        wait for animationend, remove class,\n *        then done if there's no explicit js callback.\n *    - no css transition:\n *        done now if there's no explicit js callback.\n * 8. wait for either done or js callback, then call\n *    afterEnter hook.\n *\n * @param {Function} op - insert/show the element\n * @param {Function} [cb]\n */\n\np$1.enter = function (op, cb) {\n  this.cancelPending();\n  this.callHook('beforeEnter');\n  this.cb = cb;\n  addClass(this.el, this.enterClass);\n  op();\n  this.entered = false;\n  this.callHookWithCb('enter');\n  if (this.entered) {\n    return; // user called done synchronously.\n  }\n  this.cancel = this.hooks && this.hooks.enterCancelled;\n  pushJob(this.enterNextTick);\n};\n\n/**\n * The \"nextTick\" phase of an entering transition, which is\n * to be pushed into a queue and executed after a reflow so\n * that removing the class can trigger a CSS transition.\n */\n\np$1.enterNextTick = function () {\n  var _this = this;\n\n  // prevent transition skipping\n  this.justEntered = true;\n  waitForTransitionStart(function () {\n    _this.justEntered = false;\n  });\n  var enterDone = this.enterDone;\n  var type = this.getCssTransitionType(this.enterClass);\n  if (!this.pendingJsCb) {\n    if (type === TYPE_TRANSITION) {\n      // trigger transition by removing enter class now\n      removeClass(this.el, this.enterClass);\n      this.setupCssCb(transitionEndEvent, enterDone);\n    } else if (type === TYPE_ANIMATION) {\n      this.setupCssCb(animationEndEvent, enterDone);\n    } else {\n      enterDone();\n    }\n  } else if (type === TYPE_TRANSITION) {\n    removeClass(this.el, this.enterClass);\n  }\n};\n\n/**\n * The \"cleanup\" phase of an entering transition.\n */\n\np$1.enterDone = function () {\n  this.entered = true;\n  this.cancel = this.pendingJsCb = null;\n  removeClass(this.el, this.enterClass);\n  this.callHook('afterEnter');\n  if (this.cb) this.cb();\n};\n\n/**\n * Start a leaving transition.\n *\n * 1. leave transition triggered.\n * 2. call beforeLeave hook\n * 3. add leave class (trigger css transition)\n * 4. call leave hook (with possible explicit js callback)\n * 5. reflow if no explicit js callback is provided\n * 6. based on transition type:\n *    - transition or animation:\n *        wait for end event, remove class, then done if\n *        there's no explicit js callback.\n *    - no css transition:\n *        done if there's no explicit js callback.\n * 7. wait for either done or js callback, then call\n *    afterLeave hook.\n *\n * @param {Function} op - remove/hide the element\n * @param {Function} [cb]\n */\n\np$1.leave = function (op, cb) {\n  this.cancelPending();\n  this.callHook('beforeLeave');\n  this.op = op;\n  this.cb = cb;\n  addClass(this.el, this.leaveClass);\n  this.left = false;\n  this.callHookWithCb('leave');\n  if (this.left) {\n    return; // user called done synchronously.\n  }\n  this.cancel = this.hooks && this.hooks.leaveCancelled;\n  // only need to handle leaveDone if\n  // 1. the transition is already done (synchronously called\n  //    by the user, which causes this.op set to null)\n  // 2. there's no explicit js callback\n  if (this.op && !this.pendingJsCb) {\n    // if a CSS transition leaves immediately after enter,\n    // the transitionend event never fires. therefore we\n    // detect such cases and end the leave immediately.\n    if (this.justEntered) {\n      this.leaveDone();\n    } else {\n      pushJob(this.leaveNextTick);\n    }\n  }\n};\n\n/**\n * The \"nextTick\" phase of a leaving transition.\n */\n\np$1.leaveNextTick = function () {\n  var type = this.getCssTransitionType(this.leaveClass);\n  if (type) {\n    var event = type === TYPE_TRANSITION ? transitionEndEvent : animationEndEvent;\n    this.setupCssCb(event, this.leaveDone);\n  } else {\n    this.leaveDone();\n  }\n};\n\n/**\n * The \"cleanup\" phase of a leaving transition.\n */\n\np$1.leaveDone = function () {\n  this.left = true;\n  this.cancel = this.pendingJsCb = null;\n  this.op();\n  removeClass(this.el, this.leaveClass);\n  this.callHook('afterLeave');\n  if (this.cb) this.cb();\n  this.op = null;\n};\n\n/**\n * Cancel any pending callbacks from a previously running\n * but not finished transition.\n */\n\np$1.cancelPending = function () {\n  this.op = this.cb = null;\n  var hasPending = false;\n  if (this.pendingCssCb) {\n    hasPending = true;\n    off(this.el, this.pendingCssEvent, this.pendingCssCb);\n    this.pendingCssEvent = this.pendingCssCb = null;\n  }\n  if (this.pendingJsCb) {\n    hasPending = true;\n    this.pendingJsCb.cancel();\n    this.pendingJsCb = null;\n  }\n  if (hasPending) {\n    removeClass(this.el, this.enterClass);\n    removeClass(this.el, this.leaveClass);\n  }\n  if (this.cancel) {\n    this.cancel.call(this.vm, this.el);\n    this.cancel = null;\n  }\n};\n\n/**\n * Call a user-provided synchronous hook function.\n *\n * @param {String} type\n */\n\np$1.callHook = function (type) {\n  if (this.hooks && this.hooks[type]) {\n    this.hooks[type].call(this.vm, this.el);\n  }\n};\n\n/**\n * Call a user-provided, potentially-async hook function.\n * We check for the length of arguments to see if the hook\n * expects a `done` callback. If true, the transition's end\n * will be determined by when the user calls that callback;\n * otherwise, the end is determined by the CSS transition or\n * animation.\n *\n * @param {String} type\n */\n\np$1.callHookWithCb = function (type) {\n  var hook = this.hooks && this.hooks[type];\n  if (hook) {\n    if (hook.length > 1) {\n      this.pendingJsCb = cancellable(this[type + 'Done']);\n    }\n    hook.call(this.vm, this.el, this.pendingJsCb);\n  }\n};\n\n/**\n * Get an element's transition type based on the\n * calculated styles.\n *\n * @param {String} className\n * @return {Number}\n */\n\np$1.getCssTransitionType = function (className) {\n  /* istanbul ignore if */\n  if (!transitionEndEvent ||\n  // skip CSS transitions if page is not visible -\n  // this solves the issue of transitionend events not\n  // firing until the page is visible again.\n  // pageVisibility API is supported in IE10+, same as\n  // CSS transitions.\n  document.hidden ||\n  // explicit js-only transition\n  this.hooks && this.hooks.css === false ||\n  // element is hidden\n  isHidden(this.el)) {\n    return;\n  }\n  var type = this.type || this.typeCache[className];\n  if (type) return type;\n  var inlineStyles = this.el.style;\n  var computedStyles = window.getComputedStyle(this.el);\n  var transDuration = inlineStyles[transDurationProp] || computedStyles[transDurationProp];\n  if (transDuration && transDuration !== '0s') {\n    type = TYPE_TRANSITION;\n  } else {\n    var animDuration = inlineStyles[animDurationProp] || computedStyles[animDurationProp];\n    if (animDuration && animDuration !== '0s') {\n      type = TYPE_ANIMATION;\n    }\n  }\n  if (type) {\n    this.typeCache[className] = type;\n  }\n  return type;\n};\n\n/**\n * Setup a CSS transitionend/animationend callback.\n *\n * @param {String} event\n * @param {Function} cb\n */\n\np$1.setupCssCb = function (event, cb) {\n  this.pendingCssEvent = event;\n  var self = this;\n  var el = this.el;\n  var onEnd = this.pendingCssCb = function (e) {\n    if (e.target === el) {\n      off(el, event, onEnd);\n      self.pendingCssEvent = self.pendingCssCb = null;\n      if (!self.pendingJsCb && cb) {\n        cb();\n      }\n    }\n  };\n  on(el, event, onEnd);\n};\n\n/**\n * Check if an element is hidden - in that case we can just\n * skip the transition alltogether.\n *\n * @param {Element} el\n * @return {Boolean}\n */\n\nfunction isHidden(el) {\n  if (/svg$/.test(el.namespaceURI)) {\n    // SVG elements do not have offset(Width|Height)\n    // so we need to check the client rect\n    var rect = el.getBoundingClientRect();\n    return !(rect.width || rect.height);\n  } else {\n    return !(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n  }\n}\n\nvar transition$1 = {\n\n  priority: TRANSITION,\n\n  update: function update(id, oldId) {\n    var el = this.el;\n    // resolve on owner vm\n    var hooks = resolveAsset(this.vm.$options, 'transitions', id);\n    id = id || 'v';\n    oldId = oldId || 'v';\n    el.__v_trans = new Transition(el, id, hooks, this.vm);\n    removeClass(el, oldId + '-transition');\n    addClass(el, id + '-transition');\n  }\n};\n\nvar internalDirectives = {\n  style: style,\n  'class': vClass,\n  component: component,\n  prop: propDef,\n  transition: transition$1\n};\n\n// special binding prefixes\nvar bindRE = /^v-bind:|^:/;\nvar onRE = /^v-on:|^@/;\nvar dirAttrRE = /^v-([^:]+)(?:$|:(.*)$)/;\nvar modifierRE = /\\.[^\\.]+/g;\nvar transitionRE = /^(v-bind:|:)?transition$/;\n\n// default directive priority\nvar DEFAULT_PRIORITY = 1000;\nvar DEFAULT_TERMINAL_PRIORITY = 2000;\n\n/**\n * Compile a template and return a reusable composite link\n * function, which recursively contains more link functions\n * inside. This top level compile function would normally\n * be called on instance root nodes, but can also be used\n * for partial compilation if the partial argument is true.\n *\n * The returned composite link function, when called, will\n * return an unlink function that tearsdown all directives\n * created during the linking phase.\n *\n * @param {Element|DocumentFragment} el\n * @param {Object} options\n * @param {Boolean} partial\n * @return {Function}\n */\n\nfunction compile(el, options, partial) {\n  // link function for the node itself.\n  var nodeLinkFn = partial || !options._asComponent ? compileNode(el, options) : null;\n  // link function for the childNodes\n  var childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && !isScript(el) && el.hasChildNodes() ? compileNodeList(el.childNodes, options) : null;\n\n  /**\n   * A composite linker function to be called on a already\n   * compiled piece of DOM, which instantiates all directive\n   * instances.\n   *\n   * @param {Vue} vm\n   * @param {Element|DocumentFragment} el\n   * @param {Vue} [host] - host vm of transcluded content\n   * @param {Object} [scope] - v-for scope\n   * @param {Fragment} [frag] - link context fragment\n   * @return {Function|undefined}\n   */\n\n  return function compositeLinkFn(vm, el, host, scope, frag) {\n    // cache childNodes before linking parent, fix #657\n    var childNodes = toArray(el.childNodes);\n    // link\n    var dirs = linkAndCapture(function compositeLinkCapturer() {\n      if (nodeLinkFn) nodeLinkFn(vm, el, host, scope, frag);\n      if (childLinkFn) childLinkFn(vm, childNodes, host, scope, frag);\n    }, vm);\n    return makeUnlinkFn(vm, dirs);\n  };\n}\n\n/**\n * Apply a linker to a vm/element pair and capture the\n * directives created during the process.\n *\n * @param {Function} linker\n * @param {Vue} vm\n */\n\nfunction linkAndCapture(linker, vm) {\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV === 'production') {\n    // reset directives before every capture in production\n    // mode, so that when unlinking we don't need to splice\n    // them out (which turns out to be a perf hit).\n    // they are kept in development mode because they are\n    // useful for Vue's own tests.\n    vm._directives = [];\n  }\n  var originalDirCount = vm._directives.length;\n  linker();\n  var dirs = vm._directives.slice(originalDirCount);\n  dirs.sort(directiveComparator);\n  for (var i = 0, l = dirs.length; i < l; i++) {\n    dirs[i]._bind();\n  }\n  return dirs;\n}\n\n/**\n * Directive priority sort comparator\n *\n * @param {Object} a\n * @param {Object} b\n */\n\nfunction directiveComparator(a, b) {\n  a = a.descriptor.def.priority || DEFAULT_PRIORITY;\n  b = b.descriptor.def.priority || DEFAULT_PRIORITY;\n  return a > b ? -1 : a === b ? 0 : 1;\n}\n\n/**\n * Linker functions return an unlink function that\n * tearsdown all directives instances generated during\n * the process.\n *\n * We create unlink functions with only the necessary\n * information to avoid retaining additional closures.\n *\n * @param {Vue} vm\n * @param {Array} dirs\n * @param {Vue} [context]\n * @param {Array} [contextDirs]\n * @return {Function}\n */\n\nfunction makeUnlinkFn(vm, dirs, context, contextDirs) {\n  function unlink(destroying) {\n    teardownDirs(vm, dirs, destroying);\n    if (context && contextDirs) {\n      teardownDirs(context, contextDirs);\n    }\n  }\n  // expose linked directives\n  unlink.dirs = dirs;\n  return unlink;\n}\n\n/**\n * Teardown partial linked directives.\n *\n * @param {Vue} vm\n * @param {Array} dirs\n * @param {Boolean} destroying\n */\n\nfunction teardownDirs(vm, dirs, destroying) {\n  var i = dirs.length;\n  while (i--) {\n    dirs[i]._teardown();\n    if (process.env.NODE_ENV !== 'production' && !destroying) {\n      vm._directives.$remove(dirs[i]);\n    }\n  }\n}\n\n/**\n * Compile link props on an instance.\n *\n * @param {Vue} vm\n * @param {Element} el\n * @param {Object} props\n * @param {Object} [scope]\n * @return {Function}\n */\n\nfunction compileAndLinkProps(vm, el, props, scope) {\n  var propsLinkFn = compileProps(el, props, vm);\n  var propDirs = linkAndCapture(function () {\n    propsLinkFn(vm, scope);\n  }, vm);\n  return makeUnlinkFn(vm, propDirs);\n}\n\n/**\n * Compile the root element of an instance.\n *\n * 1. attrs on context container (context scope)\n * 2. attrs on the component template root node, if\n *    replace:true (child scope)\n *\n * If this is a fragment instance, we only need to compile 1.\n *\n * @param {Element} el\n * @param {Object} options\n * @param {Object} contextOptions\n * @return {Function}\n */\n\nfunction compileRoot(el, options, contextOptions) {\n  var containerAttrs = options._containerAttrs;\n  var replacerAttrs = options._replacerAttrs;\n  var contextLinkFn, replacerLinkFn;\n\n  // only need to compile other attributes for\n  // non-fragment instances\n  if (el.nodeType !== 11) {\n    // for components, container and replacer need to be\n    // compiled separately and linked in different scopes.\n    if (options._asComponent) {\n      // 2. container attributes\n      if (containerAttrs && contextOptions) {\n        contextLinkFn = compileDirectives(containerAttrs, contextOptions);\n      }\n      if (replacerAttrs) {\n        // 3. replacer attributes\n        replacerLinkFn = compileDirectives(replacerAttrs, options);\n      }\n    } else {\n      // non-component, just compile as a normal element.\n      replacerLinkFn = compileDirectives(el.attributes, options);\n    }\n  } else if (process.env.NODE_ENV !== 'production' && containerAttrs) {\n    // warn container directives for fragment instances\n    var names = containerAttrs.filter(function (attr) {\n      // allow vue-loader/vueify scoped css attributes\n      return attr.name.indexOf('_v-') < 0 &&\n      // allow event listeners\n      !onRE.test(attr.name) &&\n      // allow slots\n      attr.name !== 'slot';\n    }).map(function (attr) {\n      return '\"' + attr.name + '\"';\n    });\n    if (names.length) {\n      var plural = names.length > 1;\n      warn('Attribute' + (plural ? 's ' : ' ') + names.join(', ') + (plural ? ' are' : ' is') + ' ignored on component ' + '<' + options.el.tagName.toLowerCase() + '> because ' + 'the component is a fragment instance: ' + 'http://vuejs.org/guide/components.html#Fragment-Instance');\n    }\n  }\n\n  options._containerAttrs = options._replacerAttrs = null;\n  return function rootLinkFn(vm, el, scope) {\n    // link context scope dirs\n    var context = vm._context;\n    var contextDirs;\n    if (context && contextLinkFn) {\n      contextDirs = linkAndCapture(function () {\n        contextLinkFn(context, el, null, scope);\n      }, context);\n    }\n\n    // link self\n    var selfDirs = linkAndCapture(function () {\n      if (replacerLinkFn) replacerLinkFn(vm, el);\n    }, vm);\n\n    // return the unlink function that tearsdown context\n    // container directives.\n    return makeUnlinkFn(vm, selfDirs, context, contextDirs);\n  };\n}\n\n/**\n * Compile a node and return a nodeLinkFn based on the\n * node type.\n *\n * @param {Node} node\n * @param {Object} options\n * @return {Function|null}\n */\n\nfunction compileNode(node, options) {\n  var type = node.nodeType;\n  if (type === 1 && !isScript(node)) {\n    return compileElement(node, options);\n  } else if (type === 3 && node.data.trim()) {\n    return compileTextNode(node, options);\n  } else {\n    return null;\n  }\n}\n\n/**\n * Compile an element and return a nodeLinkFn.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Function|null}\n */\n\nfunction compileElement(el, options) {\n  // preprocess textareas.\n  // textarea treats its text content as the initial value.\n  // just bind it as an attr directive for value.\n  if (el.tagName === 'TEXTAREA') {\n    var tokens = parseText(el.value);\n    if (tokens) {\n      el.setAttribute(':value', tokensToExp(tokens));\n      el.value = '';\n    }\n  }\n  var linkFn;\n  var hasAttrs = el.hasAttributes();\n  var attrs = hasAttrs && toArray(el.attributes);\n  // check terminal directives (for & if)\n  if (hasAttrs) {\n    linkFn = checkTerminalDirectives(el, attrs, options);\n  }\n  // check element directives\n  if (!linkFn) {\n    linkFn = checkElementDirectives(el, options);\n  }\n  // check component\n  if (!linkFn) {\n    linkFn = checkComponent(el, options);\n  }\n  // normal directives\n  if (!linkFn && hasAttrs) {\n    linkFn = compileDirectives(attrs, options);\n  }\n  return linkFn;\n}\n\n/**\n * Compile a textNode and return a nodeLinkFn.\n *\n * @param {TextNode} node\n * @param {Object} options\n * @return {Function|null} textNodeLinkFn\n */\n\nfunction compileTextNode(node, options) {\n  // skip marked text nodes\n  if (node._skip) {\n    return removeText;\n  }\n\n  var tokens = parseText(node.wholeText);\n  if (!tokens) {\n    return null;\n  }\n\n  // mark adjacent text nodes as skipped,\n  // because we are using node.wholeText to compile\n  // all adjacent text nodes together. This fixes\n  // issues in IE where sometimes it splits up a single\n  // text node into multiple ones.\n  var next = node.nextSibling;\n  while (next && next.nodeType === 3) {\n    next._skip = true;\n    next = next.nextSibling;\n  }\n\n  var frag = document.createDocumentFragment();\n  var el, token;\n  for (var i = 0, l = tokens.length; i < l; i++) {\n    token = tokens[i];\n    el = token.tag ? processTextToken(token, options) : document.createTextNode(token.value);\n    frag.appendChild(el);\n  }\n  return makeTextNodeLinkFn(tokens, frag, options);\n}\n\n/**\n * Linker for an skipped text node.\n *\n * @param {Vue} vm\n * @param {Text} node\n */\n\nfunction removeText(vm, node) {\n  remove(node);\n}\n\n/**\n * Process a single text token.\n *\n * @param {Object} token\n * @param {Object} options\n * @return {Node}\n */\n\nfunction processTextToken(token, options) {\n  var el;\n  if (token.oneTime) {\n    el = document.createTextNode(token.value);\n  } else {\n    if (token.html) {\n      el = document.createComment('v-html');\n      setTokenType('html');\n    } else {\n      // IE will clean up empty textNodes during\n      // frag.cloneNode(true), so we have to give it\n      // something here...\n      el = document.createTextNode(' ');\n      setTokenType('text');\n    }\n  }\n  function setTokenType(type) {\n    if (token.descriptor) return;\n    var parsed = parseDirective(token.value);\n    token.descriptor = {\n      name: type,\n      def: directives[type],\n      expression: parsed.expression,\n      filters: parsed.filters\n    };\n  }\n  return el;\n}\n\n/**\n * Build a function that processes a textNode.\n *\n * @param {Array<Object>} tokens\n * @param {DocumentFragment} frag\n */\n\nfunction makeTextNodeLinkFn(tokens, frag) {\n  return function textNodeLinkFn(vm, el, host, scope) {\n    var fragClone = frag.cloneNode(true);\n    var childNodes = toArray(fragClone.childNodes);\n    var token, value, node;\n    for (var i = 0, l = tokens.length; i < l; i++) {\n      token = tokens[i];\n      value = token.value;\n      if (token.tag) {\n        node = childNodes[i];\n        if (token.oneTime) {\n          value = (scope || vm).$eval(value);\n          if (token.html) {\n            replace(node, parseTemplate(value, true));\n          } else {\n            node.data = _toString(value);\n          }\n        } else {\n          vm._bindDir(token.descriptor, node, host, scope);\n        }\n      }\n    }\n    replace(el, fragClone);\n  };\n}\n\n/**\n * Compile a node list and return a childLinkFn.\n *\n * @param {NodeList} nodeList\n * @param {Object} options\n * @return {Function|undefined}\n */\n\nfunction compileNodeList(nodeList, options) {\n  var linkFns = [];\n  var nodeLinkFn, childLinkFn, node;\n  for (var i = 0, l = nodeList.length; i < l; i++) {\n    node = nodeList[i];\n    nodeLinkFn = compileNode(node, options);\n    childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && node.tagName !== 'SCRIPT' && node.hasChildNodes() ? compileNodeList(node.childNodes, options) : null;\n    linkFns.push(nodeLinkFn, childLinkFn);\n  }\n  return linkFns.length ? makeChildLinkFn(linkFns) : null;\n}\n\n/**\n * Make a child link function for a node's childNodes.\n *\n * @param {Array<Function>} linkFns\n * @return {Function} childLinkFn\n */\n\nfunction makeChildLinkFn(linkFns) {\n  return function childLinkFn(vm, nodes, host, scope, frag) {\n    var node, nodeLinkFn, childrenLinkFn;\n    for (var i = 0, n = 0, l = linkFns.length; i < l; n++) {\n      node = nodes[n];\n      nodeLinkFn = linkFns[i++];\n      childrenLinkFn = linkFns[i++];\n      // cache childNodes before linking parent, fix #657\n      var childNodes = toArray(node.childNodes);\n      if (nodeLinkFn) {\n        nodeLinkFn(vm, node, host, scope, frag);\n      }\n      if (childrenLinkFn) {\n        childrenLinkFn(vm, childNodes, host, scope, frag);\n      }\n    }\n  };\n}\n\n/**\n * Check for element directives (custom elements that should\n * be resovled as terminal directives).\n *\n * @param {Element} el\n * @param {Object} options\n */\n\nfunction checkElementDirectives(el, options) {\n  var tag = el.tagName.toLowerCase();\n  if (commonTagRE.test(tag)) {\n    return;\n  }\n  var def = resolveAsset(options, 'elementDirectives', tag);\n  if (def) {\n    return makeTerminalNodeLinkFn(el, tag, '', options, def);\n  }\n}\n\n/**\n * Check if an element is a component. If yes, return\n * a component link function.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Function|undefined}\n */\n\nfunction checkComponent(el, options) {\n  var component = checkComponentAttr(el, options);\n  if (component) {\n    var ref = findRef(el);\n    var descriptor = {\n      name: 'component',\n      ref: ref,\n      expression: component.id,\n      def: internalDirectives.component,\n      modifiers: {\n        literal: !component.dynamic\n      }\n    };\n    var componentLinkFn = function componentLinkFn(vm, el, host, scope, frag) {\n      if (ref) {\n        defineReactive((scope || vm).$refs, ref, null);\n      }\n      vm._bindDir(descriptor, el, host, scope, frag);\n    };\n    componentLinkFn.terminal = true;\n    return componentLinkFn;\n  }\n}\n\n/**\n * Check an element for terminal directives in fixed order.\n * If it finds one, return a terminal link function.\n *\n * @param {Element} el\n * @param {Array} attrs\n * @param {Object} options\n * @return {Function} terminalLinkFn\n */\n\nfunction checkTerminalDirectives(el, attrs, options) {\n  // skip v-pre\n  if (getAttr(el, 'v-pre') !== null) {\n    return skip;\n  }\n  // skip v-else block, but only if following v-if\n  if (el.hasAttribute('v-else')) {\n    var prev = el.previousElementSibling;\n    if (prev && prev.hasAttribute('v-if')) {\n      return skip;\n    }\n  }\n\n  var attr, name, value, modifiers, matched, dirName, rawName, arg, def, termDef;\n  for (var i = 0, j = attrs.length; i < j; i++) {\n    attr = attrs[i];\n    name = attr.name.replace(modifierRE, '');\n    if (matched = name.match(dirAttrRE)) {\n      def = resolveAsset(options, 'directives', matched[1]);\n      if (def && def.terminal) {\n        if (!termDef || (def.priority || DEFAULT_TERMINAL_PRIORITY) > termDef.priority) {\n          termDef = def;\n          rawName = attr.name;\n          modifiers = parseModifiers(attr.name);\n          value = attr.value;\n          dirName = matched[1];\n          arg = matched[2];\n        }\n      }\n    }\n  }\n\n  if (termDef) {\n    return makeTerminalNodeLinkFn(el, dirName, value, options, termDef, rawName, arg, modifiers);\n  }\n}\n\nfunction skip() {}\nskip.terminal = true;\n\n/**\n * Build a node link function for a terminal directive.\n * A terminal link function terminates the current\n * compilation recursion and handles compilation of the\n * subtree in the directive.\n *\n * @param {Element} el\n * @param {String} dirName\n * @param {String} value\n * @param {Object} options\n * @param {Object} def\n * @param {String} [rawName]\n * @param {String} [arg]\n * @param {Object} [modifiers]\n * @return {Function} terminalLinkFn\n */\n\nfunction makeTerminalNodeLinkFn(el, dirName, value, options, def, rawName, arg, modifiers) {\n  var parsed = parseDirective(value);\n  var descriptor = {\n    name: dirName,\n    arg: arg,\n    expression: parsed.expression,\n    filters: parsed.filters,\n    raw: value,\n    attr: rawName,\n    modifiers: modifiers,\n    def: def\n  };\n  // check ref for v-for and router-view\n  if (dirName === 'for' || dirName === 'router-view') {\n    descriptor.ref = findRef(el);\n  }\n  var fn = function terminalNodeLinkFn(vm, el, host, scope, frag) {\n    if (descriptor.ref) {\n      defineReactive((scope || vm).$refs, descriptor.ref, null);\n    }\n    vm._bindDir(descriptor, el, host, scope, frag);\n  };\n  fn.terminal = true;\n  return fn;\n}\n\n/**\n * Compile the directives on an element and return a linker.\n *\n * @param {Array|NamedNodeMap} attrs\n * @param {Object} options\n * @return {Function}\n */\n\nfunction compileDirectives(attrs, options) {\n  var i = attrs.length;\n  var dirs = [];\n  var attr, name, value, rawName, rawValue, dirName, arg, modifiers, dirDef, tokens, matched;\n  while (i--) {\n    attr = attrs[i];\n    name = rawName = attr.name;\n    value = rawValue = attr.value;\n    tokens = parseText(value);\n    // reset arg\n    arg = null;\n    // check modifiers\n    modifiers = parseModifiers(name);\n    name = name.replace(modifierRE, '');\n\n    // attribute interpolations\n    if (tokens) {\n      value = tokensToExp(tokens);\n      arg = name;\n      pushDir('bind', directives.bind, tokens);\n      // warn against mixing mustaches with v-bind\n      if (process.env.NODE_ENV !== 'production') {\n        if (name === 'class' && Array.prototype.some.call(attrs, function (attr) {\n          return attr.name === ':class' || attr.name === 'v-bind:class';\n        })) {\n          warn('class=\"' + rawValue + '\": Do not mix mustache interpolation ' + 'and v-bind for \"class\" on the same element. Use one or the other.', options);\n        }\n      }\n    } else\n\n      // special attribute: transition\n      if (transitionRE.test(name)) {\n        modifiers.literal = !bindRE.test(name);\n        pushDir('transition', internalDirectives.transition);\n      } else\n\n        // event handlers\n        if (onRE.test(name)) {\n          arg = name.replace(onRE, '');\n          pushDir('on', directives.on);\n        } else\n\n          // attribute bindings\n          if (bindRE.test(name)) {\n            dirName = name.replace(bindRE, '');\n            if (dirName === 'style' || dirName === 'class') {\n              pushDir(dirName, internalDirectives[dirName]);\n            } else {\n              arg = dirName;\n              pushDir('bind', directives.bind);\n            }\n          } else\n\n            // normal directives\n            if (matched = name.match(dirAttrRE)) {\n              dirName = matched[1];\n              arg = matched[2];\n\n              // skip v-else (when used with v-show)\n              if (dirName === 'else') {\n                continue;\n              }\n\n              dirDef = resolveAsset(options, 'directives', dirName, true);\n              if (dirDef) {\n                pushDir(dirName, dirDef);\n              }\n            }\n  }\n\n  /**\n   * Push a directive.\n   *\n   * @param {String} dirName\n   * @param {Object|Function} def\n   * @param {Array} [interpTokens]\n   */\n\n  function pushDir(dirName, def, interpTokens) {\n    var hasOneTimeToken = interpTokens && hasOneTime(interpTokens);\n    var parsed = !hasOneTimeToken && parseDirective(value);\n    dirs.push({\n      name: dirName,\n      attr: rawName,\n      raw: rawValue,\n      def: def,\n      arg: arg,\n      modifiers: modifiers,\n      // conversion from interpolation strings with one-time token\n      // to expression is differed until directive bind time so that we\n      // have access to the actual vm context for one-time bindings.\n      expression: parsed && parsed.expression,\n      filters: parsed && parsed.filters,\n      interp: interpTokens,\n      hasOneTime: hasOneTimeToken\n    });\n  }\n\n  if (dirs.length) {\n    return makeNodeLinkFn(dirs);\n  }\n}\n\n/**\n * Parse modifiers from directive attribute name.\n *\n * @param {String} name\n * @return {Object}\n */\n\nfunction parseModifiers(name) {\n  var res = Object.create(null);\n  var match = name.match(modifierRE);\n  if (match) {\n    var i = match.length;\n    while (i--) {\n      res[match[i].slice(1)] = true;\n    }\n  }\n  return res;\n}\n\n/**\n * Build a link function for all directives on a single node.\n *\n * @param {Array} directives\n * @return {Function} directivesLinkFn\n */\n\nfunction makeNodeLinkFn(directives) {\n  return function nodeLinkFn(vm, el, host, scope, frag) {\n    // reverse apply because it's sorted low to high\n    var i = directives.length;\n    while (i--) {\n      vm._bindDir(directives[i], el, host, scope, frag);\n    }\n  };\n}\n\n/**\n * Check if an interpolation string contains one-time tokens.\n *\n * @param {Array} tokens\n * @return {Boolean}\n */\n\nfunction hasOneTime(tokens) {\n  var i = tokens.length;\n  while (i--) {\n    if (tokens[i].oneTime) return true;\n  }\n}\n\nfunction isScript(el) {\n  return el.tagName === 'SCRIPT' && (!el.hasAttribute('type') || el.getAttribute('type') === 'text/javascript');\n}\n\nvar specialCharRE = /[^\\w\\-:\\.]/;\n\n/**\n * Process an element or a DocumentFragment based on a\n * instance option object. This allows us to transclude\n * a template node/fragment before the instance is created,\n * so the processed fragment can then be cloned and reused\n * in v-for.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Element|DocumentFragment}\n */\n\nfunction transclude(el, options) {\n  // extract container attributes to pass them down\n  // to compiler, because they need to be compiled in\n  // parent scope. we are mutating the options object here\n  // assuming the same object will be used for compile\n  // right after this.\n  if (options) {\n    options._containerAttrs = extractAttrs(el);\n  }\n  // for template tags, what we want is its content as\n  // a documentFragment (for fragment instances)\n  if (isTemplate(el)) {\n    el = parseTemplate(el);\n  }\n  if (options) {\n    if (options._asComponent && !options.template) {\n      options.template = '<slot></slot>';\n    }\n    if (options.template) {\n      options._content = extractContent(el);\n      el = transcludeTemplate(el, options);\n    }\n  }\n  if (isFragment(el)) {\n    // anchors for fragment instance\n    // passing in `persist: true` to avoid them being\n    // discarded by IE during template cloning\n    prepend(createAnchor('v-start', true), el);\n    el.appendChild(createAnchor('v-end', true));\n  }\n  return el;\n}\n\n/**\n * Process the template option.\n * If the replace option is true this will swap the $el.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Element|DocumentFragment}\n */\n\nfunction transcludeTemplate(el, options) {\n  var template = options.template;\n  var frag = parseTemplate(template, true);\n  if (frag) {\n    var replacer = frag.firstChild;\n    var tag = replacer.tagName && replacer.tagName.toLowerCase();\n    if (options.replace) {\n      /* istanbul ignore if */\n      if (el === document.body) {\n        process.env.NODE_ENV !== 'production' && warn('You are mounting an instance with a template to ' + '<body>. This will replace <body> entirely. You ' + 'should probably use `replace: false` here.');\n      }\n      // there are many cases where the instance must\n      // become a fragment instance: basically anything that\n      // can create more than 1 root nodes.\n      if (\n      // multi-children template\n      frag.childNodes.length > 1 ||\n      // non-element template\n      replacer.nodeType !== 1 ||\n      // single nested component\n      tag === 'component' || resolveAsset(options, 'components', tag) || hasBindAttr(replacer, 'is') ||\n      // element directive\n      resolveAsset(options, 'elementDirectives', tag) ||\n      // for block\n      replacer.hasAttribute('v-for') ||\n      // if block\n      replacer.hasAttribute('v-if')) {\n        return frag;\n      } else {\n        options._replacerAttrs = extractAttrs(replacer);\n        mergeAttrs(el, replacer);\n        return replacer;\n      }\n    } else {\n      el.appendChild(frag);\n      return el;\n    }\n  } else {\n    process.env.NODE_ENV !== 'production' && warn('Invalid template option: ' + template);\n  }\n}\n\n/**\n * Helper to extract a component container's attributes\n * into a plain object array.\n *\n * @param {Element} el\n * @return {Array}\n */\n\nfunction extractAttrs(el) {\n  if (el.nodeType === 1 && el.hasAttributes()) {\n    return toArray(el.attributes);\n  }\n}\n\n/**\n * Merge the attributes of two elements, and make sure\n * the class names are merged properly.\n *\n * @param {Element} from\n * @param {Element} to\n */\n\nfunction mergeAttrs(from, to) {\n  var attrs = from.attributes;\n  var i = attrs.length;\n  var name, value;\n  while (i--) {\n    name = attrs[i].name;\n    value = attrs[i].value;\n    if (!to.hasAttribute(name) && !specialCharRE.test(name)) {\n      to.setAttribute(name, value);\n    } else if (name === 'class' && !parseText(value) && (value = value.trim())) {\n      value.split(/\\s+/).forEach(function (cls) {\n        addClass(to, cls);\n      });\n    }\n  }\n}\n\n/**\n * Scan and determine slot content distribution.\n * We do this during transclusion instead at compile time so that\n * the distribution is decoupled from the compilation order of\n * the slots.\n *\n * @param {Element|DocumentFragment} template\n * @param {Element} content\n * @param {Vue} vm\n */\n\nfunction resolveSlots(vm, content) {\n  if (!content) {\n    return;\n  }\n  var contents = vm._slotContents = Object.create(null);\n  var el, name;\n  for (var i = 0, l = content.children.length; i < l; i++) {\n    el = content.children[i];\n    /* eslint-disable no-cond-assign */\n    if (name = el.getAttribute('slot')) {\n      (contents[name] || (contents[name] = [])).push(el);\n    }\n    /* eslint-enable no-cond-assign */\n    if (process.env.NODE_ENV !== 'production' && getBindAttr(el, 'slot')) {\n      warn('The \"slot\" attribute must be static.', vm.$parent);\n    }\n  }\n  for (name in contents) {\n    contents[name] = extractFragment(contents[name], content);\n  }\n  if (content.hasChildNodes()) {\n    var nodes = content.childNodes;\n    if (nodes.length === 1 && nodes[0].nodeType === 3 && !nodes[0].data.trim()) {\n      return;\n    }\n    contents['default'] = extractFragment(content.childNodes, content);\n  }\n}\n\n/**\n * Extract qualified content nodes from a node list.\n *\n * @param {NodeList} nodes\n * @return {DocumentFragment}\n */\n\nfunction extractFragment(nodes, parent) {\n  var frag = document.createDocumentFragment();\n  nodes = toArray(nodes);\n  for (var i = 0, l = nodes.length; i < l; i++) {\n    var node = nodes[i];\n    if (isTemplate(node) && !node.hasAttribute('v-if') && !node.hasAttribute('v-for')) {\n      parent.removeChild(node);\n      node = parseTemplate(node, true);\n    }\n    frag.appendChild(node);\n  }\n  return frag;\n}\n\n\n\nvar compiler = Object.freeze({\n\tcompile: compile,\n\tcompileAndLinkProps: compileAndLinkProps,\n\tcompileRoot: compileRoot,\n\ttransclude: transclude,\n\tresolveSlots: resolveSlots\n});\n\nfunction stateMixin (Vue) {\n  /**\n   * Accessor for `$data` property, since setting $data\n   * requires observing the new object and updating\n   * proxied properties.\n   */\n\n  Object.defineProperty(Vue.prototype, '$data', {\n    get: function get() {\n      return this._data;\n    },\n    set: function set(newData) {\n      if (newData !== this._data) {\n        this._setData(newData);\n      }\n    }\n  });\n\n  /**\n   * Setup the scope of an instance, which contains:\n   * - observed data\n   * - computed properties\n   * - user methods\n   * - meta properties\n   */\n\n  Vue.prototype._initState = function () {\n    this._initProps();\n    this._initMeta();\n    this._initMethods();\n    this._initData();\n    this._initComputed();\n  };\n\n  /**\n   * Initialize props.\n   */\n\n  Vue.prototype._initProps = function () {\n    var options = this.$options;\n    var el = options.el;\n    var props = options.props;\n    if (props && !el) {\n      process.env.NODE_ENV !== 'production' && warn('Props will not be compiled if no `el` option is ' + 'provided at instantiation.', this);\n    }\n    // make sure to convert string selectors into element now\n    el = options.el = query(el);\n    this._propsUnlinkFn = el && el.nodeType === 1 && props\n    // props must be linked in proper scope if inside v-for\n    ? compileAndLinkProps(this, el, props, this._scope) : null;\n  };\n\n  /**\n   * Initialize the data.\n   */\n\n  Vue.prototype._initData = function () {\n    var dataFn = this.$options.data;\n    var data = this._data = dataFn ? dataFn() : {};\n    if (!isPlainObject(data)) {\n      data = {};\n      process.env.NODE_ENV !== 'production' && warn('data functions should return an object.', this);\n    }\n    var props = this._props;\n    // proxy data on instance\n    var keys = Object.keys(data);\n    var i, key;\n    i = keys.length;\n    while (i--) {\n      key = keys[i];\n      // there are two scenarios where we can proxy a data key:\n      // 1. it's not already defined as a prop\n      // 2. it's provided via a instantiation option AND there are no\n      //    template prop present\n      if (!props || !hasOwn(props, key)) {\n        this._proxy(key);\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('Data field \"' + key + '\" is already defined ' + 'as a prop. To provide default value for a prop, use the \"default\" ' + 'prop option; if you want to pass prop values to an instantiation ' + 'call, use the \"propsData\" option.', this);\n      }\n    }\n    // observe data\n    observe(data, this);\n  };\n\n  /**\n   * Swap the instance's $data. Called in $data's setter.\n   *\n   * @param {Object} newData\n   */\n\n  Vue.prototype._setData = function (newData) {\n    newData = newData || {};\n    var oldData = this._data;\n    this._data = newData;\n    var keys, key, i;\n    // unproxy keys not present in new data\n    keys = Object.keys(oldData);\n    i = keys.length;\n    while (i--) {\n      key = keys[i];\n      if (!(key in newData)) {\n        this._unproxy(key);\n      }\n    }\n    // proxy keys not already proxied,\n    // and trigger change for changed values\n    keys = Object.keys(newData);\n    i = keys.length;\n    while (i--) {\n      key = keys[i];\n      if (!hasOwn(this, key)) {\n        // new property\n        this._proxy(key);\n      }\n    }\n    oldData.__ob__.removeVm(this);\n    observe(newData, this);\n    this._digest();\n  };\n\n  /**\n   * Proxy a property, so that\n   * vm.prop === vm._data.prop\n   *\n   * @param {String} key\n   */\n\n  Vue.prototype._proxy = function (key) {\n    if (!isReserved(key)) {\n      // need to store ref to self here\n      // because these getter/setters might\n      // be called by child scopes via\n      // prototype inheritance.\n      var self = this;\n      Object.defineProperty(self, key, {\n        configurable: true,\n        enumerable: true,\n        get: function proxyGetter() {\n          return self._data[key];\n        },\n        set: function proxySetter(val) {\n          self._data[key] = val;\n        }\n      });\n    }\n  };\n\n  /**\n   * Unproxy a property.\n   *\n   * @param {String} key\n   */\n\n  Vue.prototype._unproxy = function (key) {\n    if (!isReserved(key)) {\n      delete this[key];\n    }\n  };\n\n  /**\n   * Force update on every watcher in scope.\n   */\n\n  Vue.prototype._digest = function () {\n    for (var i = 0, l = this._watchers.length; i < l; i++) {\n      this._watchers[i].update(true); // shallow updates\n    }\n  };\n\n  /**\n   * Setup computed properties. They are essentially\n   * special getter/setters\n   */\n\n  function noop() {}\n  Vue.prototype._initComputed = function () {\n    var computed = this.$options.computed;\n    if (computed) {\n      for (var key in computed) {\n        var userDef = computed[key];\n        var def = {\n          enumerable: true,\n          configurable: true\n        };\n        if (typeof userDef === 'function') {\n          def.get = makeComputedGetter(userDef, this);\n          def.set = noop;\n        } else {\n          def.get = userDef.get ? userDef.cache !== false ? makeComputedGetter(userDef.get, this) : bind(userDef.get, this) : noop;\n          def.set = userDef.set ? bind(userDef.set, this) : noop;\n        }\n        Object.defineProperty(this, key, def);\n      }\n    }\n  };\n\n  function makeComputedGetter(getter, owner) {\n    var watcher = new Watcher(owner, getter, null, {\n      lazy: true\n    });\n    return function computedGetter() {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value;\n    };\n  }\n\n  /**\n   * Setup instance methods. Methods must be bound to the\n   * instance since they might be passed down as a prop to\n   * child components.\n   */\n\n  Vue.prototype._initMethods = function () {\n    var methods = this.$options.methods;\n    if (methods) {\n      for (var key in methods) {\n        this[key] = bind(methods[key], this);\n      }\n    }\n  };\n\n  /**\n   * Initialize meta information like $index, $key & $value.\n   */\n\n  Vue.prototype._initMeta = function () {\n    var metas = this.$options._meta;\n    if (metas) {\n      for (var key in metas) {\n        defineReactive(this, key, metas[key]);\n      }\n    }\n  };\n}\n\nvar eventRE = /^v-on:|^@/;\n\nfunction eventsMixin (Vue) {\n  /**\n   * Setup the instance's option events & watchers.\n   * If the value is a string, we pull it from the\n   * instance's methods by name.\n   */\n\n  Vue.prototype._initEvents = function () {\n    var options = this.$options;\n    if (options._asComponent) {\n      registerComponentEvents(this, options.el);\n    }\n    registerCallbacks(this, '$on', options.events);\n    registerCallbacks(this, '$watch', options.watch);\n  };\n\n  /**\n   * Register v-on events on a child component\n   *\n   * @param {Vue} vm\n   * @param {Element} el\n   */\n\n  function registerComponentEvents(vm, el) {\n    var attrs = el.attributes;\n    var name, value, handler;\n    for (var i = 0, l = attrs.length; i < l; i++) {\n      name = attrs[i].name;\n      if (eventRE.test(name)) {\n        name = name.replace(eventRE, '');\n        // force the expression into a statement so that\n        // it always dynamically resolves the method to call (#2670)\n        // kinda ugly hack, but does the job.\n        value = attrs[i].value;\n        if (isSimplePath(value)) {\n          value += '.apply(this, $arguments)';\n        }\n        handler = (vm._scope || vm._context).$eval(value, true);\n        handler._fromParent = true;\n        vm.$on(name.replace(eventRE), handler);\n      }\n    }\n  }\n\n  /**\n   * Register callbacks for option events and watchers.\n   *\n   * @param {Vue} vm\n   * @param {String} action\n   * @param {Object} hash\n   */\n\n  function registerCallbacks(vm, action, hash) {\n    if (!hash) return;\n    var handlers, key, i, j;\n    for (key in hash) {\n      handlers = hash[key];\n      if (isArray(handlers)) {\n        for (i = 0, j = handlers.length; i < j; i++) {\n          register(vm, action, key, handlers[i]);\n        }\n      } else {\n        register(vm, action, key, handlers);\n      }\n    }\n  }\n\n  /**\n   * Helper to register an event/watch callback.\n   *\n   * @param {Vue} vm\n   * @param {String} action\n   * @param {String} key\n   * @param {Function|String|Object} handler\n   * @param {Object} [options]\n   */\n\n  function register(vm, action, key, handler, options) {\n    var type = typeof handler;\n    if (type === 'function') {\n      vm[action](key, handler, options);\n    } else if (type === 'string') {\n      var methods = vm.$options.methods;\n      var method = methods && methods[handler];\n      if (method) {\n        vm[action](key, method, options);\n      } else {\n        process.env.NODE_ENV !== 'production' && warn('Unknown method: \"' + handler + '\" when ' + 'registering callback for ' + action + ': \"' + key + '\".', vm);\n      }\n    } else if (handler && type === 'object') {\n      register(vm, action, key, handler.handler, handler);\n    }\n  }\n\n  /**\n   * Setup recursive attached/detached calls\n   */\n\n  Vue.prototype._initDOMHooks = function () {\n    this.$on('hook:attached', onAttached);\n    this.$on('hook:detached', onDetached);\n  };\n\n  /**\n   * Callback to recursively call attached hook on children\n   */\n\n  function onAttached() {\n    if (!this._isAttached) {\n      this._isAttached = true;\n      this.$children.forEach(callAttach);\n    }\n  }\n\n  /**\n   * Iterator to call attached hook\n   *\n   * @param {Vue} child\n   */\n\n  function callAttach(child) {\n    if (!child._isAttached && inDoc(child.$el)) {\n      child._callHook('attached');\n    }\n  }\n\n  /**\n   * Callback to recursively call detached hook on children\n   */\n\n  function onDetached() {\n    if (this._isAttached) {\n      this._isAttached = false;\n      this.$children.forEach(callDetach);\n    }\n  }\n\n  /**\n   * Iterator to call detached hook\n   *\n   * @param {Vue} child\n   */\n\n  function callDetach(child) {\n    if (child._isAttached && !inDoc(child.$el)) {\n      child._callHook('detached');\n    }\n  }\n\n  /**\n   * Trigger all handlers for a hook\n   *\n   * @param {String} hook\n   */\n\n  Vue.prototype._callHook = function (hook) {\n    this.$emit('pre-hook:' + hook);\n    var handlers = this.$options[hook];\n    if (handlers) {\n      for (var i = 0, j = handlers.length; i < j; i++) {\n        handlers[i].call(this);\n      }\n    }\n    this.$emit('hook:' + hook);\n  };\n}\n\nfunction noop$1() {}\n\n/**\n * A directive links a DOM element with a piece of data,\n * which is the result of evaluating an expression.\n * It registers a watcher with the expression and calls\n * the DOM update function when a change is triggered.\n *\n * @param {Object} descriptor\n *                 - {String} name\n *                 - {Object} def\n *                 - {String} expression\n *                 - {Array<Object>} [filters]\n *                 - {Object} [modifiers]\n *                 - {Boolean} literal\n *                 - {String} attr\n *                 - {String} arg\n *                 - {String} raw\n *                 - {String} [ref]\n *                 - {Array<Object>} [interp]\n *                 - {Boolean} [hasOneTime]\n * @param {Vue} vm\n * @param {Node} el\n * @param {Vue} [host] - transclusion host component\n * @param {Object} [scope] - v-for scope\n * @param {Fragment} [frag] - owner fragment\n * @constructor\n */\nfunction Directive(descriptor, vm, el, host, scope, frag) {\n  this.vm = vm;\n  this.el = el;\n  // copy descriptor properties\n  this.descriptor = descriptor;\n  this.name = descriptor.name;\n  this.expression = descriptor.expression;\n  this.arg = descriptor.arg;\n  this.modifiers = descriptor.modifiers;\n  this.filters = descriptor.filters;\n  this.literal = this.modifiers && this.modifiers.literal;\n  // private\n  this._locked = false;\n  this._bound = false;\n  this._listeners = null;\n  // link context\n  this._host = host;\n  this._scope = scope;\n  this._frag = frag;\n  // store directives on node in dev mode\n  if (process.env.NODE_ENV !== 'production' && this.el) {\n    this.el._vue_directives = this.el._vue_directives || [];\n    this.el._vue_directives.push(this);\n  }\n}\n\n/**\n * Initialize the directive, mixin definition properties,\n * setup the watcher, call definition bind() and update()\n * if present.\n */\n\nDirective.prototype._bind = function () {\n  var name = this.name;\n  var descriptor = this.descriptor;\n\n  // remove attribute\n  if ((name !== 'cloak' || this.vm._isCompiled) && this.el && this.el.removeAttribute) {\n    var attr = descriptor.attr || 'v-' + name;\n    this.el.removeAttribute(attr);\n  }\n\n  // copy def properties\n  var def = descriptor.def;\n  if (typeof def === 'function') {\n    this.update = def;\n  } else {\n    extend(this, def);\n  }\n\n  // setup directive params\n  this._setupParams();\n\n  // initial bind\n  if (this.bind) {\n    this.bind();\n  }\n  this._bound = true;\n\n  if (this.literal) {\n    this.update && this.update(descriptor.raw);\n  } else if ((this.expression || this.modifiers) && (this.update || this.twoWay) && !this._checkStatement()) {\n    // wrapped updater for context\n    var dir = this;\n    if (this.update) {\n      this._update = function (val, oldVal) {\n        if (!dir._locked) {\n          dir.update(val, oldVal);\n        }\n      };\n    } else {\n      this._update = noop$1;\n    }\n    var preProcess = this._preProcess ? bind(this._preProcess, this) : null;\n    var postProcess = this._postProcess ? bind(this._postProcess, this) : null;\n    var watcher = this._watcher = new Watcher(this.vm, this.expression, this._update, // callback\n    {\n      filters: this.filters,\n      twoWay: this.twoWay,\n      deep: this.deep,\n      preProcess: preProcess,\n      postProcess: postProcess,\n      scope: this._scope\n    });\n    // v-model with inital inline value need to sync back to\n    // model instead of update to DOM on init. They would\n    // set the afterBind hook to indicate that.\n    if (this.afterBind) {\n      this.afterBind();\n    } else if (this.update) {\n      this.update(watcher.value);\n    }\n  }\n};\n\n/**\n * Setup all param attributes, e.g. track-by,\n * transition-mode, etc...\n */\n\nDirective.prototype._setupParams = function () {\n  if (!this.params) {\n    return;\n  }\n  var params = this.params;\n  // swap the params array with a fresh object.\n  this.params = Object.create(null);\n  var i = params.length;\n  var key, val, mappedKey;\n  while (i--) {\n    key = hyphenate(params[i]);\n    mappedKey = camelize(key);\n    val = getBindAttr(this.el, key);\n    if (val != null) {\n      // dynamic\n      this._setupParamWatcher(mappedKey, val);\n    } else {\n      // static\n      val = getAttr(this.el, key);\n      if (val != null) {\n        this.params[mappedKey] = val === '' ? true : val;\n      }\n    }\n  }\n};\n\n/**\n * Setup a watcher for a dynamic param.\n *\n * @param {String} key\n * @param {String} expression\n */\n\nDirective.prototype._setupParamWatcher = function (key, expression) {\n  var self = this;\n  var called = false;\n  var unwatch = (this._scope || this.vm).$watch(expression, function (val, oldVal) {\n    self.params[key] = val;\n    // since we are in immediate mode,\n    // only call the param change callbacks if this is not the first update.\n    if (called) {\n      var cb = self.paramWatchers && self.paramWatchers[key];\n      if (cb) {\n        cb.call(self, val, oldVal);\n      }\n    } else {\n      called = true;\n    }\n  }, {\n    immediate: true,\n    user: false\n  });(this._paramUnwatchFns || (this._paramUnwatchFns = [])).push(unwatch);\n};\n\n/**\n * Check if the directive is a function caller\n * and if the expression is a callable one. If both true,\n * we wrap up the expression and use it as the event\n * handler.\n *\n * e.g. on-click=\"a++\"\n *\n * @return {Boolean}\n */\n\nDirective.prototype._checkStatement = function () {\n  var expression = this.expression;\n  if (expression && this.acceptStatement && !isSimplePath(expression)) {\n    var fn = parseExpression(expression).get;\n    var scope = this._scope || this.vm;\n    var handler = function handler(e) {\n      scope.$event = e;\n      fn.call(scope, scope);\n      scope.$event = null;\n    };\n    if (this.filters) {\n      handler = scope._applyFilters(handler, null, this.filters);\n    }\n    this.update(handler);\n    return true;\n  }\n};\n\n/**\n * Set the corresponding value with the setter.\n * This should only be used in two-way directives\n * e.g. v-model.\n *\n * @param {*} value\n * @public\n */\n\nDirective.prototype.set = function (value) {\n  /* istanbul ignore else */\n  if (this.twoWay) {\n    this._withLock(function () {\n      this._watcher.set(value);\n    });\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn('Directive.set() can only be used inside twoWay' + 'directives.');\n  }\n};\n\n/**\n * Execute a function while preventing that function from\n * triggering updates on this directive instance.\n *\n * @param {Function} fn\n */\n\nDirective.prototype._withLock = function (fn) {\n  var self = this;\n  self._locked = true;\n  fn.call(self);\n  nextTick(function () {\n    self._locked = false;\n  });\n};\n\n/**\n * Convenience method that attaches a DOM event listener\n * to the directive element and autometically tears it down\n * during unbind.\n *\n * @param {String} event\n * @param {Function} handler\n * @param {Boolean} [useCapture]\n */\n\nDirective.prototype.on = function (event, handler, useCapture) {\n  on(this.el, event, handler, useCapture);(this._listeners || (this._listeners = [])).push([event, handler]);\n};\n\n/**\n * Teardown the watcher and call unbind.\n */\n\nDirective.prototype._teardown = function () {\n  if (this._bound) {\n    this._bound = false;\n    if (this.unbind) {\n      this.unbind();\n    }\n    if (this._watcher) {\n      this._watcher.teardown();\n    }\n    var listeners = this._listeners;\n    var i;\n    if (listeners) {\n      i = listeners.length;\n      while (i--) {\n        off(this.el, listeners[i][0], listeners[i][1]);\n      }\n    }\n    var unwatchFns = this._paramUnwatchFns;\n    if (unwatchFns) {\n      i = unwatchFns.length;\n      while (i--) {\n        unwatchFns[i]();\n      }\n    }\n    if (process.env.NODE_ENV !== 'production' && this.el) {\n      this.el._vue_directives.$remove(this);\n    }\n    this.vm = this.el = this._watcher = this._listeners = null;\n  }\n};\n\nfunction lifecycleMixin (Vue) {\n  /**\n   * Update v-ref for component.\n   *\n   * @param {Boolean} remove\n   */\n\n  Vue.prototype._updateRef = function (remove) {\n    var ref = this.$options._ref;\n    if (ref) {\n      var refs = (this._scope || this._context).$refs;\n      if (remove) {\n        if (refs[ref] === this) {\n          refs[ref] = null;\n        }\n      } else {\n        refs[ref] = this;\n      }\n    }\n  };\n\n  /**\n   * Transclude, compile and link element.\n   *\n   * If a pre-compiled linker is available, that means the\n   * passed in element will be pre-transcluded and compiled\n   * as well - all we need to do is to call the linker.\n   *\n   * Otherwise we need to call transclude/compile/link here.\n   *\n   * @param {Element} el\n   */\n\n  Vue.prototype._compile = function (el) {\n    var options = this.$options;\n\n    // transclude and init element\n    // transclude can potentially replace original\n    // so we need to keep reference; this step also injects\n    // the template and caches the original attributes\n    // on the container node and replacer node.\n    var original = el;\n    el = transclude(el, options);\n    this._initElement(el);\n\n    // handle v-pre on root node (#2026)\n    if (el.nodeType === 1 && getAttr(el, 'v-pre') !== null) {\n      return;\n    }\n\n    // root is always compiled per-instance, because\n    // container attrs and props can be different every time.\n    var contextOptions = this._context && this._context.$options;\n    var rootLinker = compileRoot(el, options, contextOptions);\n\n    // resolve slot distribution\n    resolveSlots(this, options._content);\n\n    // compile and link the rest\n    var contentLinkFn;\n    var ctor = this.constructor;\n    // component compilation can be cached\n    // as long as it's not using inline-template\n    if (options._linkerCachable) {\n      contentLinkFn = ctor.linker;\n      if (!contentLinkFn) {\n        contentLinkFn = ctor.linker = compile(el, options);\n      }\n    }\n\n    // link phase\n    // make sure to link root with prop scope!\n    var rootUnlinkFn = rootLinker(this, el, this._scope);\n    var contentUnlinkFn = contentLinkFn ? contentLinkFn(this, el) : compile(el, options)(this, el);\n\n    // register composite unlink function\n    // to be called during instance destruction\n    this._unlinkFn = function () {\n      rootUnlinkFn();\n      // passing destroying: true to avoid searching and\n      // splicing the directives\n      contentUnlinkFn(true);\n    };\n\n    // finally replace original\n    if (options.replace) {\n      replace(original, el);\n    }\n\n    this._isCompiled = true;\n    this._callHook('compiled');\n  };\n\n  /**\n   * Initialize instance element. Called in the public\n   * $mount() method.\n   *\n   * @param {Element} el\n   */\n\n  Vue.prototype._initElement = function (el) {\n    if (isFragment(el)) {\n      this._isFragment = true;\n      this.$el = this._fragmentStart = el.firstChild;\n      this._fragmentEnd = el.lastChild;\n      // set persisted text anchors to empty\n      if (this._fragmentStart.nodeType === 3) {\n        this._fragmentStart.data = this._fragmentEnd.data = '';\n      }\n      this._fragment = el;\n    } else {\n      this.$el = el;\n    }\n    this.$el.__vue__ = this;\n    this._callHook('beforeCompile');\n  };\n\n  /**\n   * Create and bind a directive to an element.\n   *\n   * @param {Object} descriptor - parsed directive descriptor\n   * @param {Node} node   - target node\n   * @param {Vue} [host] - transclusion host component\n   * @param {Object} [scope] - v-for scope\n   * @param {Fragment} [frag] - owner fragment\n   */\n\n  Vue.prototype._bindDir = function (descriptor, node, host, scope, frag) {\n    this._directives.push(new Directive(descriptor, this, node, host, scope, frag));\n  };\n\n  /**\n   * Teardown an instance, unobserves the data, unbind all the\n   * directives, turn off all the event listeners, etc.\n   *\n   * @param {Boolean} remove - whether to remove the DOM node.\n   * @param {Boolean} deferCleanup - if true, defer cleanup to\n   *                                 be called later\n   */\n\n  Vue.prototype._destroy = function (remove, deferCleanup) {\n    if (this._isBeingDestroyed) {\n      if (!deferCleanup) {\n        this._cleanup();\n      }\n      return;\n    }\n\n    var destroyReady;\n    var pendingRemoval;\n\n    var self = this;\n    // Cleanup should be called either synchronously or asynchronoysly as\n    // callback of this.$remove(), or if remove and deferCleanup are false.\n    // In any case it should be called after all other removing, unbinding and\n    // turning of is done\n    var cleanupIfPossible = function cleanupIfPossible() {\n      if (destroyReady && !pendingRemoval && !deferCleanup) {\n        self._cleanup();\n      }\n    };\n\n    // remove DOM element\n    if (remove && this.$el) {\n      pendingRemoval = true;\n      this.$remove(function () {\n        pendingRemoval = false;\n        cleanupIfPossible();\n      });\n    }\n\n    this._callHook('beforeDestroy');\n    this._isBeingDestroyed = true;\n    var i;\n    // remove self from parent. only necessary\n    // if parent is not being destroyed as well.\n    var parent = this.$parent;\n    if (parent && !parent._isBeingDestroyed) {\n      parent.$children.$remove(this);\n      // unregister ref (remove: true)\n      this._updateRef(true);\n    }\n    // destroy all children.\n    i = this.$children.length;\n    while (i--) {\n      this.$children[i].$destroy();\n    }\n    // teardown props\n    if (this._propsUnlinkFn) {\n      this._propsUnlinkFn();\n    }\n    // teardown all directives. this also tearsdown all\n    // directive-owned watchers.\n    if (this._unlinkFn) {\n      this._unlinkFn();\n    }\n    i = this._watchers.length;\n    while (i--) {\n      this._watchers[i].teardown();\n    }\n    // remove reference to self on $el\n    if (this.$el) {\n      this.$el.__vue__ = null;\n    }\n\n    destroyReady = true;\n    cleanupIfPossible();\n  };\n\n  /**\n   * Clean up to ensure garbage collection.\n   * This is called after the leave transition if there\n   * is any.\n   */\n\n  Vue.prototype._cleanup = function () {\n    if (this._isDestroyed) {\n      return;\n    }\n    // remove self from owner fragment\n    // do it in cleanup so that we can call $destroy with\n    // defer right when a fragment is about to be removed.\n    if (this._frag) {\n      this._frag.children.$remove(this);\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (this._data && this._data.__ob__) {\n      this._data.__ob__.removeVm(this);\n    }\n    // Clean up references to private properties and other\n    // instances. preserve reference to _data so that proxy\n    // accessors still work. The only potential side effect\n    // here is that mutating the instance after it's destroyed\n    // may affect the state of other components that are still\n    // observing the same object, but that seems to be a\n    // reasonable responsibility for the user rather than\n    // always throwing an error on them.\n    this.$el = this.$parent = this.$root = this.$children = this._watchers = this._context = this._scope = this._directives = null;\n    // call the last hook...\n    this._isDestroyed = true;\n    this._callHook('destroyed');\n    // turn off all instance listeners.\n    this.$off();\n  };\n}\n\nfunction miscMixin (Vue) {\n  /**\n   * Apply a list of filter (descriptors) to a value.\n   * Using plain for loops here because this will be called in\n   * the getter of any watcher with filters so it is very\n   * performance sensitive.\n   *\n   * @param {*} value\n   * @param {*} [oldValue]\n   * @param {Array} filters\n   * @param {Boolean} write\n   * @return {*}\n   */\n\n  Vue.prototype._applyFilters = function (value, oldValue, filters, write) {\n    var filter, fn, args, arg, offset, i, l, j, k;\n    for (i = 0, l = filters.length; i < l; i++) {\n      filter = filters[write ? l - i - 1 : i];\n      fn = resolveAsset(this.$options, 'filters', filter.name, true);\n      if (!fn) continue;\n      fn = write ? fn.write : fn.read || fn;\n      if (typeof fn !== 'function') continue;\n      args = write ? [value, oldValue] : [value];\n      offset = write ? 2 : 1;\n      if (filter.args) {\n        for (j = 0, k = filter.args.length; j < k; j++) {\n          arg = filter.args[j];\n          args[j + offset] = arg.dynamic ? this.$get(arg.value) : arg.value;\n        }\n      }\n      value = fn.apply(this, args);\n    }\n    return value;\n  };\n\n  /**\n   * Resolve a component, depending on whether the component\n   * is defined normally or using an async factory function.\n   * Resolves synchronously if already resolved, otherwise\n   * resolves asynchronously and caches the resolved\n   * constructor on the factory.\n   *\n   * @param {String|Function} value\n   * @param {Function} cb\n   */\n\n  Vue.prototype._resolveComponent = function (value, cb) {\n    var factory;\n    if (typeof value === 'function') {\n      factory = value;\n    } else {\n      factory = resolveAsset(this.$options, 'components', value, true);\n    }\n    /* istanbul ignore if */\n    if (!factory) {\n      return;\n    }\n    // async component factory\n    if (!factory.options) {\n      if (factory.resolved) {\n        // cached\n        cb(factory.resolved);\n      } else if (factory.requested) {\n        // pool callbacks\n        factory.pendingCallbacks.push(cb);\n      } else {\n        factory.requested = true;\n        var cbs = factory.pendingCallbacks = [cb];\n        factory.call(this, function resolve(res) {\n          if (isPlainObject(res)) {\n            res = Vue.extend(res);\n          }\n          // cache resolved\n          factory.resolved = res;\n          // invoke callbacks\n          for (var i = 0, l = cbs.length; i < l; i++) {\n            cbs[i](res);\n          }\n        }, function reject(reason) {\n          process.env.NODE_ENV !== 'production' && warn('Failed to resolve async component' + (typeof value === 'string' ? ': ' + value : '') + '. ' + (reason ? '\\nReason: ' + reason : ''));\n        });\n      }\n    } else {\n      // normal component\n      cb(factory);\n    }\n  };\n}\n\nvar filterRE$1 = /[^|]\\|[^|]/;\n\nfunction dataAPI (Vue) {\n  /**\n   * Get the value from an expression on this vm.\n   *\n   * @param {String} exp\n   * @param {Boolean} [asStatement]\n   * @return {*}\n   */\n\n  Vue.prototype.$get = function (exp, asStatement) {\n    var res = parseExpression(exp);\n    if (res) {\n      if (asStatement) {\n        var self = this;\n        return function statementHandler() {\n          self.$arguments = toArray(arguments);\n          var result = res.get.call(self, self);\n          self.$arguments = null;\n          return result;\n        };\n      } else {\n        try {\n          return res.get.call(this, this);\n        } catch (e) {}\n      }\n    }\n  };\n\n  /**\n   * Set the value from an expression on this vm.\n   * The expression must be a valid left-hand\n   * expression in an assignment.\n   *\n   * @param {String} exp\n   * @param {*} val\n   */\n\n  Vue.prototype.$set = function (exp, val) {\n    var res = parseExpression(exp, true);\n    if (res && res.set) {\n      res.set.call(this, this, val);\n    }\n  };\n\n  /**\n   * Delete a property on the VM\n   *\n   * @param {String} key\n   */\n\n  Vue.prototype.$delete = function (key) {\n    del(this._data, key);\n  };\n\n  /**\n   * Watch an expression, trigger callback when its\n   * value changes.\n   *\n   * @param {String|Function} expOrFn\n   * @param {Function} cb\n   * @param {Object} [options]\n   *                 - {Boolean} deep\n   *                 - {Boolean} immediate\n   * @return {Function} - unwatchFn\n   */\n\n  Vue.prototype.$watch = function (expOrFn, cb, options) {\n    var vm = this;\n    var parsed;\n    if (typeof expOrFn === 'string') {\n      parsed = parseDirective(expOrFn);\n      expOrFn = parsed.expression;\n    }\n    var watcher = new Watcher(vm, expOrFn, cb, {\n      deep: options && options.deep,\n      sync: options && options.sync,\n      filters: parsed && parsed.filters,\n      user: !options || options.user !== false\n    });\n    if (options && options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn() {\n      watcher.teardown();\n    };\n  };\n\n  /**\n   * Evaluate a text directive, including filters.\n   *\n   * @param {String} text\n   * @param {Boolean} [asStatement]\n   * @return {String}\n   */\n\n  Vue.prototype.$eval = function (text, asStatement) {\n    // check for filters.\n    if (filterRE$1.test(text)) {\n      var dir = parseDirective(text);\n      // the filter regex check might give false positive\n      // for pipes inside strings, so it's possible that\n      // we don't get any filters here\n      var val = this.$get(dir.expression, asStatement);\n      return dir.filters ? this._applyFilters(val, null, dir.filters) : val;\n    } else {\n      // no filter\n      return this.$get(text, asStatement);\n    }\n  };\n\n  /**\n   * Interpolate a piece of template text.\n   *\n   * @param {String} text\n   * @return {String}\n   */\n\n  Vue.prototype.$interpolate = function (text) {\n    var tokens = parseText(text);\n    var vm = this;\n    if (tokens) {\n      if (tokens.length === 1) {\n        return vm.$eval(tokens[0].value) + '';\n      } else {\n        return tokens.map(function (token) {\n          return token.tag ? vm.$eval(token.value) : token.value;\n        }).join('');\n      }\n    } else {\n      return text;\n    }\n  };\n\n  /**\n   * Log instance data as a plain JS object\n   * so that it is easier to inspect in console.\n   * This method assumes console is available.\n   *\n   * @param {String} [path]\n   */\n\n  Vue.prototype.$log = function (path) {\n    var data = path ? getPath(this._data, path) : this._data;\n    if (data) {\n      data = clean(data);\n    }\n    // include computed fields\n    if (!path) {\n      var key;\n      for (key in this.$options.computed) {\n        data[key] = clean(this[key]);\n      }\n      if (this._props) {\n        for (key in this._props) {\n          data[key] = clean(this[key]);\n        }\n      }\n    }\n    console.log(data);\n  };\n\n  /**\n   * \"clean\" a getter/setter converted object into a plain\n   * object copy.\n   *\n   * @param {Object} - obj\n   * @return {Object}\n   */\n\n  function clean(obj) {\n    return JSON.parse(JSON.stringify(obj));\n  }\n}\n\nfunction domAPI (Vue) {\n  /**\n   * Convenience on-instance nextTick. The callback is\n   * auto-bound to the instance, and this avoids component\n   * modules having to rely on the global Vue.\n   *\n   * @param {Function} fn\n   */\n\n  Vue.prototype.$nextTick = function (fn) {\n    nextTick(fn, this);\n  };\n\n  /**\n   * Append instance to target\n   *\n   * @param {Node} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$appendTo = function (target, cb, withTransition) {\n    return insert(this, target, cb, withTransition, append, appendWithTransition);\n  };\n\n  /**\n   * Prepend instance to target\n   *\n   * @param {Node} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$prependTo = function (target, cb, withTransition) {\n    target = query(target);\n    if (target.hasChildNodes()) {\n      this.$before(target.firstChild, cb, withTransition);\n    } else {\n      this.$appendTo(target, cb, withTransition);\n    }\n    return this;\n  };\n\n  /**\n   * Insert instance before target\n   *\n   * @param {Node} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$before = function (target, cb, withTransition) {\n    return insert(this, target, cb, withTransition, beforeWithCb, beforeWithTransition);\n  };\n\n  /**\n   * Insert instance after target\n   *\n   * @param {Node} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$after = function (target, cb, withTransition) {\n    target = query(target);\n    if (target.nextSibling) {\n      this.$before(target.nextSibling, cb, withTransition);\n    } else {\n      this.$appendTo(target.parentNode, cb, withTransition);\n    }\n    return this;\n  };\n\n  /**\n   * Remove instance from DOM\n   *\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$remove = function (cb, withTransition) {\n    if (!this.$el.parentNode) {\n      return cb && cb();\n    }\n    var inDocument = this._isAttached && inDoc(this.$el);\n    // if we are not in document, no need to check\n    // for transitions\n    if (!inDocument) withTransition = false;\n    var self = this;\n    var realCb = function realCb() {\n      if (inDocument) self._callHook('detached');\n      if (cb) cb();\n    };\n    if (this._isFragment) {\n      removeNodeRange(this._fragmentStart, this._fragmentEnd, this, this._fragment, realCb);\n    } else {\n      var op = withTransition === false ? removeWithCb : removeWithTransition;\n      op(this.$el, this, realCb);\n    }\n    return this;\n  };\n\n  /**\n   * Shared DOM insertion function.\n   *\n   * @param {Vue} vm\n   * @param {Element} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition]\n   * @param {Function} op1 - op for non-transition insert\n   * @param {Function} op2 - op for transition insert\n   * @return vm\n   */\n\n  function insert(vm, target, cb, withTransition, op1, op2) {\n    target = query(target);\n    var targetIsDetached = !inDoc(target);\n    var op = withTransition === false || targetIsDetached ? op1 : op2;\n    var shouldCallHook = !targetIsDetached && !vm._isAttached && !inDoc(vm.$el);\n    if (vm._isFragment) {\n      mapNodeRange(vm._fragmentStart, vm._fragmentEnd, function (node) {\n        op(node, target, vm);\n      });\n      cb && cb();\n    } else {\n      op(vm.$el, target, vm, cb);\n    }\n    if (shouldCallHook) {\n      vm._callHook('attached');\n    }\n    return vm;\n  }\n\n  /**\n   * Check for selectors\n   *\n   * @param {String|Element} el\n   */\n\n  function query(el) {\n    return typeof el === 'string' ? document.querySelector(el) : el;\n  }\n\n  /**\n   * Append operation that takes a callback.\n   *\n   * @param {Node} el\n   * @param {Node} target\n   * @param {Vue} vm - unused\n   * @param {Function} [cb]\n   */\n\n  function append(el, target, vm, cb) {\n    target.appendChild(el);\n    if (cb) cb();\n  }\n\n  /**\n   * InsertBefore operation that takes a callback.\n   *\n   * @param {Node} el\n   * @param {Node} target\n   * @param {Vue} vm - unused\n   * @param {Function} [cb]\n   */\n\n  function beforeWithCb(el, target, vm, cb) {\n    before(el, target);\n    if (cb) cb();\n  }\n\n  /**\n   * Remove operation that takes a callback.\n   *\n   * @param {Node} el\n   * @param {Vue} vm - unused\n   * @param {Function} [cb]\n   */\n\n  function removeWithCb(el, vm, cb) {\n    remove(el);\n    if (cb) cb();\n  }\n}\n\nfunction eventsAPI (Vue) {\n  /**\n   * Listen on the given `event` with `fn`.\n   *\n   * @param {String} event\n   * @param {Function} fn\n   */\n\n  Vue.prototype.$on = function (event, fn) {\n    (this._events[event] || (this._events[event] = [])).push(fn);\n    modifyListenerCount(this, event, 1);\n    return this;\n  };\n\n  /**\n   * Adds an `event` listener that will be invoked a single\n   * time then automatically removed.\n   *\n   * @param {String} event\n   * @param {Function} fn\n   */\n\n  Vue.prototype.$once = function (event, fn) {\n    var self = this;\n    function on() {\n      self.$off(event, on);\n      fn.apply(this, arguments);\n    }\n    on.fn = fn;\n    this.$on(event, on);\n    return this;\n  };\n\n  /**\n   * Remove the given callback for `event` or all\n   * registered callbacks.\n   *\n   * @param {String} event\n   * @param {Function} fn\n   */\n\n  Vue.prototype.$off = function (event, fn) {\n    var cbs;\n    // all\n    if (!arguments.length) {\n      if (this.$parent) {\n        for (event in this._events) {\n          cbs = this._events[event];\n          if (cbs) {\n            modifyListenerCount(this, event, -cbs.length);\n          }\n        }\n      }\n      this._events = {};\n      return this;\n    }\n    // specific event\n    cbs = this._events[event];\n    if (!cbs) {\n      return this;\n    }\n    if (arguments.length === 1) {\n      modifyListenerCount(this, event, -cbs.length);\n      this._events[event] = null;\n      return this;\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        modifyListenerCount(this, event, -1);\n        cbs.splice(i, 1);\n        break;\n      }\n    }\n    return this;\n  };\n\n  /**\n   * Trigger an event on self.\n   *\n   * @param {String|Object} event\n   * @return {Boolean} shouldPropagate\n   */\n\n  Vue.prototype.$emit = function (event) {\n    var isSource = typeof event === 'string';\n    event = isSource ? event : event.name;\n    var cbs = this._events[event];\n    var shouldPropagate = isSource || !cbs;\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      // this is a somewhat hacky solution to the question raised\n      // in #2102: for an inline component listener like <comp @test=\"doThis\">,\n      // the propagation handling is somewhat broken. Therefore we\n      // need to treat these inline callbacks differently.\n      var hasParentCbs = isSource && cbs.some(function (cb) {\n        return cb._fromParent;\n      });\n      if (hasParentCbs) {\n        shouldPropagate = false;\n      }\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        var cb = cbs[i];\n        var res = cb.apply(this, args);\n        if (res === true && (!hasParentCbs || cb._fromParent)) {\n          shouldPropagate = true;\n        }\n      }\n    }\n    return shouldPropagate;\n  };\n\n  /**\n   * Recursively broadcast an event to all children instances.\n   *\n   * @param {String|Object} event\n   * @param {...*} additional arguments\n   */\n\n  Vue.prototype.$broadcast = function (event) {\n    var isSource = typeof event === 'string';\n    event = isSource ? event : event.name;\n    // if no child has registered for this event,\n    // then there's no need to broadcast.\n    if (!this._eventsCount[event]) return;\n    var children = this.$children;\n    var args = toArray(arguments);\n    if (isSource) {\n      // use object event to indicate non-source emit\n      // on children\n      args[0] = { name: event, source: this };\n    }\n    for (var i = 0, l = children.length; i < l; i++) {\n      var child = children[i];\n      var shouldPropagate = child.$emit.apply(child, args);\n      if (shouldPropagate) {\n        child.$broadcast.apply(child, args);\n      }\n    }\n    return this;\n  };\n\n  /**\n   * Recursively propagate an event up the parent chain.\n   *\n   * @param {String} event\n   * @param {...*} additional arguments\n   */\n\n  Vue.prototype.$dispatch = function (event) {\n    var shouldPropagate = this.$emit.apply(this, arguments);\n    if (!shouldPropagate) return;\n    var parent = this.$parent;\n    var args = toArray(arguments);\n    // use object event to indicate non-source emit\n    // on parents\n    args[0] = { name: event, source: this };\n    while (parent) {\n      shouldPropagate = parent.$emit.apply(parent, args);\n      parent = shouldPropagate ? parent.$parent : null;\n    }\n    return this;\n  };\n\n  /**\n   * Modify the listener counts on all parents.\n   * This bookkeeping allows $broadcast to return early when\n   * no child has listened to a certain event.\n   *\n   * @param {Vue} vm\n   * @param {String} event\n   * @param {Number} count\n   */\n\n  var hookRE = /^hook:/;\n  function modifyListenerCount(vm, event, count) {\n    var parent = vm.$parent;\n    // hooks do not get broadcasted so no need\n    // to do bookkeeping for them\n    if (!parent || !count || hookRE.test(event)) return;\n    while (parent) {\n      parent._eventsCount[event] = (parent._eventsCount[event] || 0) + count;\n      parent = parent.$parent;\n    }\n  }\n}\n\nfunction lifecycleAPI (Vue) {\n  /**\n   * Set instance target element and kick off the compilation\n   * process. The passed in `el` can be a selector string, an\n   * existing Element, or a DocumentFragment (for block\n   * instances).\n   *\n   * @param {Element|DocumentFragment|string} el\n   * @public\n   */\n\n  Vue.prototype.$mount = function (el) {\n    if (this._isCompiled) {\n      process.env.NODE_ENV !== 'production' && warn('$mount() should be called only once.', this);\n      return;\n    }\n    el = query(el);\n    if (!el) {\n      el = document.createElement('div');\n    }\n    this._compile(el);\n    this._initDOMHooks();\n    if (inDoc(this.$el)) {\n      this._callHook('attached');\n      ready.call(this);\n    } else {\n      this.$once('hook:attached', ready);\n    }\n    return this;\n  };\n\n  /**\n   * Mark an instance as ready.\n   */\n\n  function ready() {\n    this._isAttached = true;\n    this._isReady = true;\n    this._callHook('ready');\n  }\n\n  /**\n   * Teardown the instance, simply delegate to the internal\n   * _destroy.\n   *\n   * @param {Boolean} remove\n   * @param {Boolean} deferCleanup\n   */\n\n  Vue.prototype.$destroy = function (remove, deferCleanup) {\n    this._destroy(remove, deferCleanup);\n  };\n\n  /**\n   * Partially compile a piece of DOM and return a\n   * decompile function.\n   *\n   * @param {Element|DocumentFragment} el\n   * @param {Vue} [host]\n   * @param {Object} [scope]\n   * @param {Fragment} [frag]\n   * @return {Function}\n   */\n\n  Vue.prototype.$compile = function (el, host, scope, frag) {\n    return compile(el, this.$options, true)(this, el, host, scope, frag);\n  };\n}\n\n/**\n * The exposed Vue constructor.\n *\n * API conventions:\n * - public API methods/properties are prefixed with `$`\n * - internal methods/properties are prefixed with `_`\n * - non-prefixed properties are assumed to be proxied user\n *   data.\n *\n * @constructor\n * @param {Object} [options]\n * @public\n */\n\nfunction Vue(options) {\n  this._init(options);\n}\n\n// install internals\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nmiscMixin(Vue);\n\n// install instance APIs\ndataAPI(Vue);\ndomAPI(Vue);\neventsAPI(Vue);\nlifecycleAPI(Vue);\n\nvar slot = {\n\n  priority: SLOT,\n  params: ['name'],\n\n  bind: function bind() {\n    // this was resolved during component transclusion\n    var name = this.params.name || 'default';\n    var content = this.vm._slotContents && this.vm._slotContents[name];\n    if (!content || !content.hasChildNodes()) {\n      this.fallback();\n    } else {\n      this.compile(content.cloneNode(true), this.vm._context, this.vm);\n    }\n  },\n\n  compile: function compile(content, context, host) {\n    if (content && context) {\n      if (this.el.hasChildNodes() && content.childNodes.length === 1 && content.childNodes[0].nodeType === 1 && content.childNodes[0].hasAttribute('v-if')) {\n        // if the inserted slot has v-if\n        // inject fallback content as the v-else\n        var elseBlock = document.createElement('template');\n        elseBlock.setAttribute('v-else', '');\n        elseBlock.innerHTML = this.el.innerHTML;\n        // the else block should be compiled in child scope\n        elseBlock._context = this.vm;\n        content.appendChild(elseBlock);\n      }\n      var scope = host ? host._scope : this._scope;\n      this.unlink = context.$compile(content, host, scope, this._frag);\n    }\n    if (content) {\n      replace(this.el, content);\n    } else {\n      remove(this.el);\n    }\n  },\n\n  fallback: function fallback() {\n    this.compile(extractContent(this.el, true), this.vm);\n  },\n\n  unbind: function unbind() {\n    if (this.unlink) {\n      this.unlink();\n    }\n  }\n};\n\nvar partial = {\n\n  priority: PARTIAL,\n\n  params: ['name'],\n\n  // watch changes to name for dynamic partials\n  paramWatchers: {\n    name: function name(value) {\n      vIf.remove.call(this);\n      if (value) {\n        this.insert(value);\n      }\n    }\n  },\n\n  bind: function bind() {\n    this.anchor = createAnchor('v-partial');\n    replace(this.el, this.anchor);\n    this.insert(this.params.name);\n  },\n\n  insert: function insert(id) {\n    var partial = resolveAsset(this.vm.$options, 'partials', id, true);\n    if (partial) {\n      this.factory = new FragmentFactory(this.vm, partial);\n      vIf.insert.call(this);\n    }\n  },\n\n  unbind: function unbind() {\n    if (this.frag) {\n      this.frag.destroy();\n    }\n  }\n};\n\nvar elementDirectives = {\n  slot: slot,\n  partial: partial\n};\n\nvar convertArray = vFor._postProcess;\n\n/**\n * Limit filter for arrays\n *\n * @param {Number} n\n * @param {Number} offset (Decimal expected)\n */\n\nfunction limitBy(arr, n, offset) {\n  offset = offset ? parseInt(offset, 10) : 0;\n  n = toNumber(n);\n  return typeof n === 'number' ? arr.slice(offset, offset + n) : arr;\n}\n\n/**\n * Filter filter for arrays\n *\n * @param {String} search\n * @param {String} [delimiter]\n * @param {String} ...dataKeys\n */\n\nfunction filterBy(arr, search, delimiter) {\n  arr = convertArray(arr);\n  if (search == null) {\n    return arr;\n  }\n  if (typeof search === 'function') {\n    return arr.filter(search);\n  }\n  // cast to lowercase string\n  search = ('' + search).toLowerCase();\n  // allow optional `in` delimiter\n  // because why not\n  var n = delimiter === 'in' ? 3 : 2;\n  // extract and flatten keys\n  var keys = Array.prototype.concat.apply([], toArray(arguments, n));\n  var res = [];\n  var item, key, val, j;\n  for (var i = 0, l = arr.length; i < l; i++) {\n    item = arr[i];\n    val = item && item.$value || item;\n    j = keys.length;\n    if (j) {\n      while (j--) {\n        key = keys[j];\n        if (key === '$key' && contains(item.$key, search) || contains(getPath(val, key), search)) {\n          res.push(item);\n          break;\n        }\n      }\n    } else if (contains(item, search)) {\n      res.push(item);\n    }\n  }\n  return res;\n}\n\n/**\n * Filter filter for arrays\n *\n * @param {String|Array<String>|Function} ...sortKeys\n * @param {Number} [order]\n */\n\nfunction orderBy(arr) {\n  var comparator = null;\n  var sortKeys = undefined;\n  arr = convertArray(arr);\n\n  // determine order (last argument)\n  var args = toArray(arguments, 1);\n  var order = args[args.length - 1];\n  if (typeof order === 'number') {\n    order = order < 0 ? -1 : 1;\n    args = args.length > 1 ? args.slice(0, -1) : args;\n  } else {\n    order = 1;\n  }\n\n  // determine sortKeys & comparator\n  var firstArg = args[0];\n  if (!firstArg) {\n    return arr;\n  } else if (typeof firstArg === 'function') {\n    // custom comparator\n    comparator = function (a, b) {\n      return firstArg(a, b) * order;\n    };\n  } else {\n    // string keys. flatten first\n    sortKeys = Array.prototype.concat.apply([], args);\n    comparator = function (a, b, i) {\n      i = i || 0;\n      return i >= sortKeys.length - 1 ? baseCompare(a, b, i) : baseCompare(a, b, i) || comparator(a, b, i + 1);\n    };\n  }\n\n  function baseCompare(a, b, sortKeyIndex) {\n    var sortKey = sortKeys[sortKeyIndex];\n    if (sortKey) {\n      if (sortKey !== '$key') {\n        if (isObject(a) && '$value' in a) a = a.$value;\n        if (isObject(b) && '$value' in b) b = b.$value;\n      }\n      a = isObject(a) ? getPath(a, sortKey) : a;\n      b = isObject(b) ? getPath(b, sortKey) : b;\n    }\n    return a === b ? 0 : a > b ? order : -order;\n  }\n\n  // sort on a copy to avoid mutating original array\n  return arr.slice().sort(comparator);\n}\n\n/**\n * String contain helper\n *\n * @param {*} val\n * @param {String} search\n */\n\nfunction contains(val, search) {\n  var i;\n  if (isPlainObject(val)) {\n    var keys = Object.keys(val);\n    i = keys.length;\n    while (i--) {\n      if (contains(val[keys[i]], search)) {\n        return true;\n      }\n    }\n  } else if (isArray(val)) {\n    i = val.length;\n    while (i--) {\n      if (contains(val[i], search)) {\n        return true;\n      }\n    }\n  } else if (val != null) {\n    return val.toString().toLowerCase().indexOf(search) > -1;\n  }\n}\n\nvar digitsRE = /(\\d{3})(?=\\d)/g;\n\n// asset collections must be a plain object.\nvar filters = {\n\n  orderBy: orderBy,\n  filterBy: filterBy,\n  limitBy: limitBy,\n\n  /**\n   * Stringify value.\n   *\n   * @param {Number} indent\n   */\n\n  json: {\n    read: function read(value, indent) {\n      return typeof value === 'string' ? value : JSON.stringify(value, null, arguments.length > 1 ? indent : 2);\n    },\n    write: function write(value) {\n      try {\n        return JSON.parse(value);\n      } catch (e) {\n        return value;\n      }\n    }\n  },\n\n  /**\n   * 'abc' => 'Abc'\n   */\n\n  capitalize: function capitalize(value) {\n    if (!value && value !== 0) return '';\n    value = value.toString();\n    return value.charAt(0).toUpperCase() + value.slice(1);\n  },\n\n  /**\n   * 'abc' => 'ABC'\n   */\n\n  uppercase: function uppercase(value) {\n    return value || value === 0 ? value.toString().toUpperCase() : '';\n  },\n\n  /**\n   * 'AbC' => 'abc'\n   */\n\n  lowercase: function lowercase(value) {\n    return value || value === 0 ? value.toString().toLowerCase() : '';\n  },\n\n  /**\n   * 12345 => $12,345.00\n   *\n   * @param {String} sign\n   * @param {Number} decimals Decimal places\n   */\n\n  currency: function currency(value, _currency, decimals) {\n    value = parseFloat(value);\n    if (!isFinite(value) || !value && value !== 0) return '';\n    _currency = _currency != null ? _currency : '$';\n    decimals = decimals != null ? decimals : 2;\n    var stringified = Math.abs(value).toFixed(decimals);\n    var _int = decimals ? stringified.slice(0, -1 - decimals) : stringified;\n    var i = _int.length % 3;\n    var head = i > 0 ? _int.slice(0, i) + (_int.length > 3 ? ',' : '') : '';\n    var _float = decimals ? stringified.slice(-1 - decimals) : '';\n    var sign = value < 0 ? '-' : '';\n    return sign + _currency + head + _int.slice(i).replace(digitsRE, '$1,') + _float;\n  },\n\n  /**\n   * 'item' => 'items'\n   *\n   * @params\n   *  an array of strings corresponding to\n   *  the single, double, triple ... forms of the word to\n   *  be pluralized. When the number to be pluralized\n   *  exceeds the length of the args, it will use the last\n   *  entry in the array.\n   *\n   *  e.g. ['single', 'double', 'triple', 'multiple']\n   */\n\n  pluralize: function pluralize(value) {\n    var args = toArray(arguments, 1);\n    var length = args.length;\n    if (length > 1) {\n      var index = value % 10 - 1;\n      return index in args ? args[index] : args[length - 1];\n    } else {\n      return args[0] + (value === 1 ? '' : 's');\n    }\n  },\n\n  /**\n   * Debounce a handler function.\n   *\n   * @param {Function} handler\n   * @param {Number} delay = 300\n   * @return {Function}\n   */\n\n  debounce: function debounce(handler, delay) {\n    if (!handler) return;\n    if (!delay) {\n      delay = 300;\n    }\n    return _debounce(handler, delay);\n  }\n};\n\nfunction installGlobalAPI (Vue) {\n  /**\n   * Vue and every constructor that extends Vue has an\n   * associated options object, which can be accessed during\n   * compilation steps as `this.constructor.options`.\n   *\n   * These can be seen as the default options of every\n   * Vue instance.\n   */\n\n  Vue.options = {\n    directives: directives,\n    elementDirectives: elementDirectives,\n    filters: filters,\n    transitions: {},\n    components: {},\n    partials: {},\n    replace: true\n  };\n\n  /**\n   * Expose useful internals\n   */\n\n  Vue.util = util;\n  Vue.config = config;\n  Vue.set = set;\n  Vue['delete'] = del;\n  Vue.nextTick = nextTick;\n\n  /**\n   * The following are exposed for advanced usage / plugins\n   */\n\n  Vue.compiler = compiler;\n  Vue.FragmentFactory = FragmentFactory;\n  Vue.internalDirectives = internalDirectives;\n  Vue.parsers = {\n    path: path,\n    text: text,\n    template: template,\n    directive: directive,\n    expression: expression\n  };\n\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   *\n   * @param {Object} extendOptions\n   */\n\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var isFirstExtend = Super.cid === 0;\n    if (isFirstExtend && extendOptions._Ctor) {\n      return extendOptions._Ctor;\n    }\n    var name = extendOptions.name || Super.options.name;\n    if (process.env.NODE_ENV !== 'production') {\n      if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n        warn('Invalid component name: \"' + name + '\". Component names ' + 'can only contain alphanumeric characaters and the hyphen.');\n        name = null;\n      }\n    }\n    var Sub = createClass(name || 'VueComponent');\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(Super.options, extendOptions);\n    Sub['super'] = Super;\n    // allow further extension\n    Sub.extend = Super.extend;\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    config._assetTypes.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n    // cache constructor\n    if (isFirstExtend) {\n      extendOptions._Ctor = Sub;\n    }\n    return Sub;\n  };\n\n  /**\n   * A function that returns a sub-class constructor with the\n   * given name. This gives us much nicer output when\n   * logging instances in the console.\n   *\n   * @param {String} name\n   * @return {Function}\n   */\n\n  function createClass(name) {\n    /* eslint-disable no-new-func */\n    return new Function('return function ' + classify(name) + ' (options) { this._init(options) }')();\n    /* eslint-enable no-new-func */\n  }\n\n  /**\n   * Plugin system\n   *\n   * @param {Object} plugin\n   */\n\n  Vue.use = function (plugin) {\n    /* istanbul ignore if */\n    if (plugin.installed) {\n      return;\n    }\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else {\n      plugin.apply(null, args);\n    }\n    plugin.installed = true;\n    return this;\n  };\n\n  /**\n   * Apply a global mixin by merging it into the default\n   * options.\n   */\n\n  Vue.mixin = function (mixin) {\n    Vue.options = mergeOptions(Vue.options, mixin);\n  };\n\n  /**\n   * Create asset registration methods with the following\n   * signature:\n   *\n   * @param {String} id\n   * @param {*} definition\n   */\n\n  config._assetTypes.forEach(function (type) {\n    Vue[type] = function (id, definition) {\n      if (!definition) {\n        return this.options[type + 's'][id];\n      } else {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production') {\n          if (type === 'component' && (commonTagRE.test(id) || reservedTagRE.test(id))) {\n            warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + id);\n          }\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          if (!definition.name) {\n            definition.name = id;\n          }\n          definition = Vue.extend(definition);\n        }\n        this.options[type + 's'][id] = definition;\n        return definition;\n      }\n    };\n  });\n\n  // expose internal transition API\n  extend(Vue.transition, transition);\n}\n\ninstallGlobalAPI(Vue);\n\nVue.version = '1.0.26';\n\n// devtools global hook\n/* istanbul ignore next */\nsetTimeout(function () {\n  if (config.devtools) {\n    if (devtools) {\n      devtools.emit('init', Vue);\n    } else if (process.env.NODE_ENV !== 'production' && inBrowser && /Chrome\\/\\d+/.test(window.navigator.userAgent)) {\n      console.log('Download the Vue Devtools for a better development experience:\\n' + 'https://github.com/vuejs/vue-devtools');\n    }\n  }\n}, 0);\n\nmodule.exports = Vue;\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(3)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 3:
/***/ function(module, exports) {

	eval("// shim for using process in browser\n\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\n(function () {\n  try {\n    cachedSetTimeout = setTimeout;\n  } catch (e) {\n    cachedSetTimeout = function () {\n      throw new Error('setTimeout is not defined');\n    }\n  }\n  try {\n    cachedClearTimeout = clearTimeout;\n  } catch (e) {\n    cachedClearTimeout = function () {\n      throw new Error('clearTimeout is not defined');\n    }\n  }\n} ())\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = cachedSetTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    cachedClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        cachedSetTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Byb2Nlc3MvYnJvd3Nlci5qcz84MmU0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsVUFBVSIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG5cbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNhY2hlZFNldFRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaXMgbm90IGRlZmluZWQnKTtcbiAgICB9XG4gIH1cbiAgdHJ5IHtcbiAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBpcyBub3QgZGVmaW5lZCcpO1xuICAgIH1cbiAgfVxufSAoKSlcbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IGNhY2hlZFNldFRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGNhY2hlZENsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQoZHJhaW5RdWV1ZSwgMCk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9wcm9jZXNzL2Jyb3dzZXIuanNcbiAqKiBtb2R1bGUgaWQgPSAzXG4gKiogbW9kdWxlIGNodW5rcyA9IDFcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 4:
/***/ function(module, exports, __webpack_require__) {

	eval("/*!\n * vue-router v0.7.13\n * (c) 2016 Evan You\n * Released under the MIT License.\n */\n(function (global, factory) {\n   true ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  global.VueRouter = factory();\n}(this, function () { 'use strict';\n\n  var babelHelpers = {};\n\n  babelHelpers.classCallCheck = function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n  function Target(path, matcher, delegate) {\n    this.path = path;\n    this.matcher = matcher;\n    this.delegate = delegate;\n  }\n\n  Target.prototype = {\n    to: function to(target, callback) {\n      var delegate = this.delegate;\n\n      if (delegate && delegate.willAddRoute) {\n        target = delegate.willAddRoute(this.matcher.target, target);\n      }\n\n      this.matcher.add(this.path, target);\n\n      if (callback) {\n        if (callback.length === 0) {\n          throw new Error(\"You must have an argument in the function passed to `to`\");\n        }\n        this.matcher.addChild(this.path, target, callback, this.delegate);\n      }\n      return this;\n    }\n  };\n\n  function Matcher(target) {\n    this.routes = {};\n    this.children = {};\n    this.target = target;\n  }\n\n  Matcher.prototype = {\n    add: function add(path, handler) {\n      this.routes[path] = handler;\n    },\n\n    addChild: function addChild(path, target, callback, delegate) {\n      var matcher = new Matcher(target);\n      this.children[path] = matcher;\n\n      var match = generateMatch(path, matcher, delegate);\n\n      if (delegate && delegate.contextEntered) {\n        delegate.contextEntered(target, match);\n      }\n\n      callback(match);\n    }\n  };\n\n  function generateMatch(startingPath, matcher, delegate) {\n    return function (path, nestedCallback) {\n      var fullPath = startingPath + path;\n\n      if (nestedCallback) {\n        nestedCallback(generateMatch(fullPath, matcher, delegate));\n      } else {\n        return new Target(startingPath + path, matcher, delegate);\n      }\n    };\n  }\n\n  function addRoute(routeArray, path, handler) {\n    var len = 0;\n    for (var i = 0, l = routeArray.length; i < l; i++) {\n      len += routeArray[i].path.length;\n    }\n\n    path = path.substr(len);\n    var route = { path: path, handler: handler };\n    routeArray.push(route);\n  }\n\n  function eachRoute(baseRoute, matcher, callback, binding) {\n    var routes = matcher.routes;\n\n    for (var path in routes) {\n      if (routes.hasOwnProperty(path)) {\n        var routeArray = baseRoute.slice();\n        addRoute(routeArray, path, routes[path]);\n\n        if (matcher.children[path]) {\n          eachRoute(routeArray, matcher.children[path], callback, binding);\n        } else {\n          callback.call(binding, routeArray);\n        }\n      }\n    }\n  }\n\n  function map (callback, addRouteCallback) {\n    var matcher = new Matcher();\n\n    callback(generateMatch(\"\", matcher, this.delegate));\n\n    eachRoute([], matcher, function (route) {\n      if (addRouteCallback) {\n        addRouteCallback(this, route);\n      } else {\n        this.add(route);\n      }\n    }, this);\n  }\n\n  var specials = ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\\\'];\n\n  var escapeRegex = new RegExp('(\\\\' + specials.join('|\\\\') + ')', 'g');\n\n  var noWarning = false;\n  function warn(msg) {\n    if (!noWarning && typeof console !== 'undefined') {\n      console.error('[vue-router] ' + msg);\n    }\n  }\n\n  function tryDecode(uri, asComponent) {\n    try {\n      return asComponent ? decodeURIComponent(uri) : decodeURI(uri);\n    } catch (e) {\n      warn('malformed URI' + (asComponent ? ' component: ' : ': ') + uri);\n    }\n  }\n\n  function isArray(test) {\n    return Object.prototype.toString.call(test) === \"[object Array]\";\n  }\n\n  // A Segment represents a segment in the original route description.\n  // Each Segment type provides an `eachChar` and `regex` method.\n  //\n  // The `eachChar` method invokes the callback with one or more character\n  // specifications. A character specification consumes one or more input\n  // characters.\n  //\n  // The `regex` method returns a regex fragment for the segment. If the\n  // segment is a dynamic of star segment, the regex fragment also includes\n  // a capture.\n  //\n  // A character specification contains:\n  //\n  // * `validChars`: a String with a list of all valid characters, or\n  // * `invalidChars`: a String with a list of all invalid characters\n  // * `repeat`: true if the character specification can repeat\n\n  function StaticSegment(string) {\n    this.string = string;\n  }\n  StaticSegment.prototype = {\n    eachChar: function eachChar(callback) {\n      var string = this.string,\n          ch;\n\n      for (var i = 0, l = string.length; i < l; i++) {\n        ch = string.charAt(i);\n        callback({ validChars: ch });\n      }\n    },\n\n    regex: function regex() {\n      return this.string.replace(escapeRegex, '\\\\$1');\n    },\n\n    generate: function generate() {\n      return this.string;\n    }\n  };\n\n  function DynamicSegment(name) {\n    this.name = name;\n  }\n  DynamicSegment.prototype = {\n    eachChar: function eachChar(callback) {\n      callback({ invalidChars: \"/\", repeat: true });\n    },\n\n    regex: function regex() {\n      return \"([^/]+)\";\n    },\n\n    generate: function generate(params) {\n      var val = params[this.name];\n      return val == null ? \":\" + this.name : val;\n    }\n  };\n\n  function StarSegment(name) {\n    this.name = name;\n  }\n  StarSegment.prototype = {\n    eachChar: function eachChar(callback) {\n      callback({ invalidChars: \"\", repeat: true });\n    },\n\n    regex: function regex() {\n      return \"(.+)\";\n    },\n\n    generate: function generate(params) {\n      var val = params[this.name];\n      return val == null ? \":\" + this.name : val;\n    }\n  };\n\n  function EpsilonSegment() {}\n  EpsilonSegment.prototype = {\n    eachChar: function eachChar() {},\n    regex: function regex() {\n      return \"\";\n    },\n    generate: function generate() {\n      return \"\";\n    }\n  };\n\n  function parse(route, names, specificity) {\n    // normalize route as not starting with a \"/\". Recognition will\n    // also normalize.\n    if (route.charAt(0) === \"/\") {\n      route = route.substr(1);\n    }\n\n    var segments = route.split(\"/\"),\n        results = [];\n\n    // A routes has specificity determined by the order that its different segments\n    // appear in. This system mirrors how the magnitude of numbers written as strings\n    // works.\n    // Consider a number written as: \"abc\". An example would be \"200\". Any other number written\n    // \"xyz\" will be smaller than \"abc\" so long as `a > z`. For instance, \"199\" is smaller\n    // then \"200\", even though \"y\" and \"z\" (which are both 9) are larger than \"0\" (the value\n    // of (`b` and `c`). This is because the leading symbol, \"2\", is larger than the other\n    // leading symbol, \"1\".\n    // The rule is that symbols to the left carry more weight than symbols to the right\n    // when a number is written out as a string. In the above strings, the leading digit\n    // represents how many 100's are in the number, and it carries more weight than the middle\n    // number which represents how many 10's are in the number.\n    // This system of number magnitude works well for route specificity, too. A route written as\n    // `a/b/c` will be more specific than `x/y/z` as long as `a` is more specific than\n    // `x`, irrespective of the other parts.\n    // Because of this similarity, we assign each type of segment a number value written as a\n    // string. We can find the specificity of compound routes by concatenating these strings\n    // together, from left to right. After we have looped through all of the segments,\n    // we convert the string to a number.\n    specificity.val = '';\n\n    for (var i = 0, l = segments.length; i < l; i++) {\n      var segment = segments[i],\n          match;\n\n      if (match = segment.match(/^:([^\\/]+)$/)) {\n        results.push(new DynamicSegment(match[1]));\n        names.push(match[1]);\n        specificity.val += '3';\n      } else if (match = segment.match(/^\\*([^\\/]+)$/)) {\n        results.push(new StarSegment(match[1]));\n        specificity.val += '2';\n        names.push(match[1]);\n      } else if (segment === \"\") {\n        results.push(new EpsilonSegment());\n        specificity.val += '1';\n      } else {\n        results.push(new StaticSegment(segment));\n        specificity.val += '4';\n      }\n    }\n\n    specificity.val = +specificity.val;\n\n    return results;\n  }\n\n  // A State has a character specification and (`charSpec`) and a list of possible\n  // subsequent states (`nextStates`).\n  //\n  // If a State is an accepting state, it will also have several additional\n  // properties:\n  //\n  // * `regex`: A regular expression that is used to extract parameters from paths\n  //   that reached this accepting state.\n  // * `handlers`: Information on how to convert the list of captures into calls\n  //   to registered handlers with the specified parameters\n  // * `types`: How many static, dynamic or star segments in this route. Used to\n  //   decide which route to use if multiple registered routes match a path.\n  //\n  // Currently, State is implemented naively by looping over `nextStates` and\n  // comparing a character specification against a character. A more efficient\n  // implementation would use a hash of keys pointing at one or more next states.\n\n  function State(charSpec) {\n    this.charSpec = charSpec;\n    this.nextStates = [];\n  }\n\n  State.prototype = {\n    get: function get(charSpec) {\n      var nextStates = this.nextStates;\n\n      for (var i = 0, l = nextStates.length; i < l; i++) {\n        var child = nextStates[i];\n\n        var isEqual = child.charSpec.validChars === charSpec.validChars;\n        isEqual = isEqual && child.charSpec.invalidChars === charSpec.invalidChars;\n\n        if (isEqual) {\n          return child;\n        }\n      }\n    },\n\n    put: function put(charSpec) {\n      var state;\n\n      // If the character specification already exists in a child of the current\n      // state, just return that state.\n      if (state = this.get(charSpec)) {\n        return state;\n      }\n\n      // Make a new state for the character spec\n      state = new State(charSpec);\n\n      // Insert the new state as a child of the current state\n      this.nextStates.push(state);\n\n      // If this character specification repeats, insert the new state as a child\n      // of itself. Note that this will not trigger an infinite loop because each\n      // transition during recognition consumes a character.\n      if (charSpec.repeat) {\n        state.nextStates.push(state);\n      }\n\n      // Return the new state\n      return state;\n    },\n\n    // Find a list of child states matching the next character\n    match: function match(ch) {\n      // DEBUG \"Processing `\" + ch + \"`:\"\n      var nextStates = this.nextStates,\n          child,\n          charSpec,\n          chars;\n\n      // DEBUG \"  \" + debugState(this)\n      var returned = [];\n\n      for (var i = 0, l = nextStates.length; i < l; i++) {\n        child = nextStates[i];\n\n        charSpec = child.charSpec;\n\n        if (typeof (chars = charSpec.validChars) !== 'undefined') {\n          if (chars.indexOf(ch) !== -1) {\n            returned.push(child);\n          }\n        } else if (typeof (chars = charSpec.invalidChars) !== 'undefined') {\n          if (chars.indexOf(ch) === -1) {\n            returned.push(child);\n          }\n        }\n      }\n\n      return returned;\n    }\n\n    /** IF DEBUG\n    , debug: function() {\n      var charSpec = this.charSpec,\n          debug = \"[\",\n          chars = charSpec.validChars || charSpec.invalidChars;\n       if (charSpec.invalidChars) { debug += \"^\"; }\n      debug += chars;\n      debug += \"]\";\n       if (charSpec.repeat) { debug += \"+\"; }\n       return debug;\n    }\n    END IF **/\n  };\n\n  /** IF DEBUG\n  function debug(log) {\n    console.log(log);\n  }\n\n  function debugState(state) {\n    return state.nextStates.map(function(n) {\n      if (n.nextStates.length === 0) { return \"( \" + n.debug() + \" [accepting] )\"; }\n      return \"( \" + n.debug() + \" <then> \" + n.nextStates.map(function(s) { return s.debug() }).join(\" or \") + \" )\";\n    }).join(\", \")\n  }\n  END IF **/\n\n  // Sort the routes by specificity\n  function sortSolutions(states) {\n    return states.sort(function (a, b) {\n      return b.specificity.val - a.specificity.val;\n    });\n  }\n\n  function recognizeChar(states, ch) {\n    var nextStates = [];\n\n    for (var i = 0, l = states.length; i < l; i++) {\n      var state = states[i];\n\n      nextStates = nextStates.concat(state.match(ch));\n    }\n\n    return nextStates;\n  }\n\n  var oCreate = Object.create || function (proto) {\n    function F() {}\n    F.prototype = proto;\n    return new F();\n  };\n\n  function RecognizeResults(queryParams) {\n    this.queryParams = queryParams || {};\n  }\n  RecognizeResults.prototype = oCreate({\n    splice: Array.prototype.splice,\n    slice: Array.prototype.slice,\n    push: Array.prototype.push,\n    length: 0,\n    queryParams: null\n  });\n\n  function findHandler(state, path, queryParams) {\n    var handlers = state.handlers,\n        regex = state.regex;\n    var captures = path.match(regex),\n        currentCapture = 1;\n    var result = new RecognizeResults(queryParams);\n\n    for (var i = 0, l = handlers.length; i < l; i++) {\n      var handler = handlers[i],\n          names = handler.names,\n          params = {};\n\n      for (var j = 0, m = names.length; j < m; j++) {\n        params[names[j]] = captures[currentCapture++];\n      }\n\n      result.push({ handler: handler.handler, params: params, isDynamic: !!names.length });\n    }\n\n    return result;\n  }\n\n  function addSegment(currentState, segment) {\n    segment.eachChar(function (ch) {\n      var state;\n\n      currentState = currentState.put(ch);\n    });\n\n    return currentState;\n  }\n\n  function decodeQueryParamPart(part) {\n    // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1\n    part = part.replace(/\\+/gm, '%20');\n    return tryDecode(part, true);\n  }\n\n  // The main interface\n\n  var RouteRecognizer = function RouteRecognizer() {\n    this.rootState = new State();\n    this.names = {};\n  };\n\n  RouteRecognizer.prototype = {\n    add: function add(routes, options) {\n      var currentState = this.rootState,\n          regex = \"^\",\n          specificity = {},\n          handlers = [],\n          allSegments = [],\n          name;\n\n      var isEmpty = true;\n\n      for (var i = 0, l = routes.length; i < l; i++) {\n        var route = routes[i],\n            names = [];\n\n        var segments = parse(route.path, names, specificity);\n\n        allSegments = allSegments.concat(segments);\n\n        for (var j = 0, m = segments.length; j < m; j++) {\n          var segment = segments[j];\n\n          if (segment instanceof EpsilonSegment) {\n            continue;\n          }\n\n          isEmpty = false;\n\n          // Add a \"/\" for the new segment\n          currentState = currentState.put({ validChars: \"/\" });\n          regex += \"/\";\n\n          // Add a representation of the segment to the NFA and regex\n          currentState = addSegment(currentState, segment);\n          regex += segment.regex();\n        }\n\n        var handler = { handler: route.handler, names: names };\n        handlers.push(handler);\n      }\n\n      if (isEmpty) {\n        currentState = currentState.put({ validChars: \"/\" });\n        regex += \"/\";\n      }\n\n      currentState.handlers = handlers;\n      currentState.regex = new RegExp(regex + \"$\");\n      currentState.specificity = specificity;\n\n      if (name = options && options.as) {\n        this.names[name] = {\n          segments: allSegments,\n          handlers: handlers\n        };\n      }\n    },\n\n    handlersFor: function handlersFor(name) {\n      var route = this.names[name],\n          result = [];\n      if (!route) {\n        throw new Error(\"There is no route named \" + name);\n      }\n\n      for (var i = 0, l = route.handlers.length; i < l; i++) {\n        result.push(route.handlers[i]);\n      }\n\n      return result;\n    },\n\n    hasRoute: function hasRoute(name) {\n      return !!this.names[name];\n    },\n\n    generate: function generate(name, params) {\n      var route = this.names[name],\n          output = \"\";\n      if (!route) {\n        throw new Error(\"There is no route named \" + name);\n      }\n\n      var segments = route.segments;\n\n      for (var i = 0, l = segments.length; i < l; i++) {\n        var segment = segments[i];\n\n        if (segment instanceof EpsilonSegment) {\n          continue;\n        }\n\n        output += \"/\";\n        output += segment.generate(params);\n      }\n\n      if (output.charAt(0) !== '/') {\n        output = '/' + output;\n      }\n\n      if (params && params.queryParams) {\n        output += this.generateQueryString(params.queryParams);\n      }\n\n      return output;\n    },\n\n    generateQueryString: function generateQueryString(params) {\n      var pairs = [];\n      var keys = [];\n      for (var key in params) {\n        if (params.hasOwnProperty(key)) {\n          keys.push(key);\n        }\n      }\n      keys.sort();\n      for (var i = 0, len = keys.length; i < len; i++) {\n        key = keys[i];\n        var value = params[key];\n        if (value == null) {\n          continue;\n        }\n        var pair = encodeURIComponent(key);\n        if (isArray(value)) {\n          for (var j = 0, l = value.length; j < l; j++) {\n            var arrayPair = key + '[]' + '=' + encodeURIComponent(value[j]);\n            pairs.push(arrayPair);\n          }\n        } else {\n          pair += \"=\" + encodeURIComponent(value);\n          pairs.push(pair);\n        }\n      }\n\n      if (pairs.length === 0) {\n        return '';\n      }\n\n      return \"?\" + pairs.join(\"&\");\n    },\n\n    parseQueryString: function parseQueryString(queryString) {\n      var pairs = queryString.split(\"&\"),\n          queryParams = {};\n      for (var i = 0; i < pairs.length; i++) {\n        var pair = pairs[i].split('='),\n            key = decodeQueryParamPart(pair[0]),\n            keyLength = key.length,\n            isArray = false,\n            value;\n        if (pair.length === 1) {\n          value = 'true';\n        } else {\n          //Handle arrays\n          if (keyLength > 2 && key.slice(keyLength - 2) === '[]') {\n            isArray = true;\n            key = key.slice(0, keyLength - 2);\n            if (!queryParams[key]) {\n              queryParams[key] = [];\n            }\n          }\n          value = pair[1] ? decodeQueryParamPart(pair[1]) : '';\n        }\n        if (isArray) {\n          queryParams[key].push(value);\n        } else {\n          queryParams[key] = value;\n        }\n      }\n      return queryParams;\n    },\n\n    recognize: function recognize(path, silent) {\n      noWarning = silent;\n      var states = [this.rootState],\n          pathLen,\n          i,\n          l,\n          queryStart,\n          queryParams = {},\n          isSlashDropped = false;\n\n      queryStart = path.indexOf('?');\n      if (queryStart !== -1) {\n        var queryString = path.substr(queryStart + 1, path.length);\n        path = path.substr(0, queryStart);\n        if (queryString) {\n          queryParams = this.parseQueryString(queryString);\n        }\n      }\n\n      path = tryDecode(path);\n      if (!path) return;\n\n      // DEBUG GROUP path\n\n      if (path.charAt(0) !== \"/\") {\n        path = \"/\" + path;\n      }\n\n      pathLen = path.length;\n      if (pathLen > 1 && path.charAt(pathLen - 1) === \"/\") {\n        path = path.substr(0, pathLen - 1);\n        isSlashDropped = true;\n      }\n\n      for (i = 0, l = path.length; i < l; i++) {\n        states = recognizeChar(states, path.charAt(i));\n        if (!states.length) {\n          break;\n        }\n      }\n\n      // END DEBUG GROUP\n\n      var solutions = [];\n      for (i = 0, l = states.length; i < l; i++) {\n        if (states[i].handlers) {\n          solutions.push(states[i]);\n        }\n      }\n\n      states = sortSolutions(solutions);\n\n      var state = solutions[0];\n\n      if (state && state.handlers) {\n        // if a trailing slash was dropped and a star segment is the last segment\n        // specified, put the trailing slash back\n        if (isSlashDropped && state.regex.source.slice(-5) === \"(.+)$\") {\n          path = path + \"/\";\n        }\n        return findHandler(state, path, queryParams);\n      }\n    }\n  };\n\n  RouteRecognizer.prototype.map = map;\n\n  var genQuery = RouteRecognizer.prototype.generateQueryString;\n\n  // export default for holding the Vue reference\n  var exports$1 = {};\n  /**\n   * Warn stuff.\n   *\n   * @param {String} msg\n   */\n\n  function warn$1(msg) {\n    /* istanbul ignore next */\n    if (typeof console !== 'undefined') {\n      console.error('[vue-router] ' + msg);\n    }\n  }\n\n  /**\n   * Resolve a relative path.\n   *\n   * @param {String} base\n   * @param {String} relative\n   * @param {Boolean} append\n   * @return {String}\n   */\n\n  function resolvePath(base, relative, append) {\n    var query = base.match(/(\\?.*)$/);\n    if (query) {\n      query = query[1];\n      base = base.slice(0, -query.length);\n    }\n    // a query!\n    if (relative.charAt(0) === '?') {\n      return base + relative;\n    }\n    var stack = base.split('/');\n    // remove trailing segment if:\n    // - not appending\n    // - appending to trailing slash (last segment is empty)\n    if (!append || !stack[stack.length - 1]) {\n      stack.pop();\n    }\n    // resolve relative path\n    var segments = relative.replace(/^\\//, '').split('/');\n    for (var i = 0; i < segments.length; i++) {\n      var segment = segments[i];\n      if (segment === '.') {\n        continue;\n      } else if (segment === '..') {\n        stack.pop();\n      } else {\n        stack.push(segment);\n      }\n    }\n    // ensure leading slash\n    if (stack[0] !== '') {\n      stack.unshift('');\n    }\n    return stack.join('/');\n  }\n\n  /**\n   * Forgiving check for a promise\n   *\n   * @param {Object} p\n   * @return {Boolean}\n   */\n\n  function isPromise(p) {\n    return p && typeof p.then === 'function';\n  }\n\n  /**\n   * Retrive a route config field from a component instance\n   * OR a component contructor.\n   *\n   * @param {Function|Vue} component\n   * @param {String} name\n   * @return {*}\n   */\n\n  function getRouteConfig(component, name) {\n    var options = component && (component.$options || component.options);\n    return options && options.route && options.route[name];\n  }\n\n  /**\n   * Resolve an async component factory. Have to do a dirty\n   * mock here because of Vue core's internal API depends on\n   * an ID check.\n   *\n   * @param {Object} handler\n   * @param {Function} cb\n   */\n\n  var resolver = undefined;\n\n  function resolveAsyncComponent(handler, cb) {\n    if (!resolver) {\n      resolver = {\n        resolve: exports$1.Vue.prototype._resolveComponent,\n        $options: {\n          components: {\n            _: handler.component\n          }\n        }\n      };\n    } else {\n      resolver.$options.components._ = handler.component;\n    }\n    resolver.resolve('_', function (Component) {\n      handler.component = Component;\n      cb(Component);\n    });\n  }\n\n  /**\n   * Map the dynamic segments in a path to params.\n   *\n   * @param {String} path\n   * @param {Object} params\n   * @param {Object} query\n   */\n\n  function mapParams(path, params, query) {\n    if (params === undefined) params = {};\n\n    path = path.replace(/:([^\\/]+)/g, function (_, key) {\n      var val = params[key];\n      /* istanbul ignore if */\n      if (!val) {\n        warn$1('param \"' + key + '\" not found when generating ' + 'path for \"' + path + '\" with params ' + JSON.stringify(params));\n      }\n      return val || '';\n    });\n    if (query) {\n      path += genQuery(query);\n    }\n    return path;\n  }\n\n  var hashRE = /#.*$/;\n\n  var HTML5History = (function () {\n    function HTML5History(_ref) {\n      var root = _ref.root;\n      var onChange = _ref.onChange;\n      babelHelpers.classCallCheck(this, HTML5History);\n\n      if (root && root !== '/') {\n        // make sure there's the starting slash\n        if (root.charAt(0) !== '/') {\n          root = '/' + root;\n        }\n        // remove trailing slash\n        this.root = root.replace(/\\/$/, '');\n        this.rootRE = new RegExp('^\\\\' + this.root);\n      } else {\n        this.root = null;\n      }\n      this.onChange = onChange;\n      // check base tag\n      var baseEl = document.querySelector('base');\n      this.base = baseEl && baseEl.getAttribute('href');\n    }\n\n    HTML5History.prototype.start = function start() {\n      var _this = this;\n\n      this.listener = function (e) {\n        var url = location.pathname + location.search;\n        if (_this.root) {\n          url = url.replace(_this.rootRE, '');\n        }\n        _this.onChange(url, e && e.state, location.hash);\n      };\n      window.addEventListener('popstate', this.listener);\n      this.listener();\n    };\n\n    HTML5History.prototype.stop = function stop() {\n      window.removeEventListener('popstate', this.listener);\n    };\n\n    HTML5History.prototype.go = function go(path, replace, append) {\n      var url = this.formatPath(path, append);\n      if (replace) {\n        history.replaceState({}, '', url);\n      } else {\n        // record scroll position by replacing current state\n        history.replaceState({\n          pos: {\n            x: window.pageXOffset,\n            y: window.pageYOffset\n          }\n        }, '', location.href);\n        // then push new state\n        history.pushState({}, '', url);\n      }\n      var hashMatch = path.match(hashRE);\n      var hash = hashMatch && hashMatch[0];\n      path = url\n      // strip hash so it doesn't mess up params\n      .replace(hashRE, '')\n      // remove root before matching\n      .replace(this.rootRE, '');\n      this.onChange(path, null, hash);\n    };\n\n    HTML5History.prototype.formatPath = function formatPath(path, append) {\n      return path.charAt(0) === '/'\n      // absolute path\n      ? this.root ? this.root + '/' + path.replace(/^\\//, '') : path : resolvePath(this.base || location.pathname, path, append);\n    };\n\n    return HTML5History;\n  })();\n\n  var HashHistory = (function () {\n    function HashHistory(_ref) {\n      var hashbang = _ref.hashbang;\n      var onChange = _ref.onChange;\n      babelHelpers.classCallCheck(this, HashHistory);\n\n      this.hashbang = hashbang;\n      this.onChange = onChange;\n    }\n\n    HashHistory.prototype.start = function start() {\n      var self = this;\n      this.listener = function () {\n        var path = location.hash;\n        var raw = path.replace(/^#!?/, '');\n        // always\n        if (raw.charAt(0) !== '/') {\n          raw = '/' + raw;\n        }\n        var formattedPath = self.formatPath(raw);\n        if (formattedPath !== path) {\n          location.replace(formattedPath);\n          return;\n        }\n        // determine query\n        // note it's possible to have queries in both the actual URL\n        // and the hash fragment itself.\n        var query = location.search && path.indexOf('?') > -1 ? '&' + location.search.slice(1) : location.search;\n        self.onChange(path.replace(/^#!?/, '') + query);\n      };\n      window.addEventListener('hashchange', this.listener);\n      this.listener();\n    };\n\n    HashHistory.prototype.stop = function stop() {\n      window.removeEventListener('hashchange', this.listener);\n    };\n\n    HashHistory.prototype.go = function go(path, replace, append) {\n      path = this.formatPath(path, append);\n      if (replace) {\n        location.replace(path);\n      } else {\n        location.hash = path;\n      }\n    };\n\n    HashHistory.prototype.formatPath = function formatPath(path, append) {\n      var isAbsoloute = path.charAt(0) === '/';\n      var prefix = '#' + (this.hashbang ? '!' : '');\n      return isAbsoloute ? prefix + path : prefix + resolvePath(location.hash.replace(/^#!?/, ''), path, append);\n    };\n\n    return HashHistory;\n  })();\n\n  var AbstractHistory = (function () {\n    function AbstractHistory(_ref) {\n      var onChange = _ref.onChange;\n      babelHelpers.classCallCheck(this, AbstractHistory);\n\n      this.onChange = onChange;\n      this.currentPath = '/';\n    }\n\n    AbstractHistory.prototype.start = function start() {\n      this.onChange('/');\n    };\n\n    AbstractHistory.prototype.stop = function stop() {\n      // noop\n    };\n\n    AbstractHistory.prototype.go = function go(path, replace, append) {\n      path = this.currentPath = this.formatPath(path, append);\n      this.onChange(path);\n    };\n\n    AbstractHistory.prototype.formatPath = function formatPath(path, append) {\n      return path.charAt(0) === '/' ? path : resolvePath(this.currentPath, path, append);\n    };\n\n    return AbstractHistory;\n  })();\n\n  /**\n   * Determine the reusability of an existing router view.\n   *\n   * @param {Directive} view\n   * @param {Object} handler\n   * @param {Transition} transition\n   */\n\n  function canReuse(view, handler, transition) {\n    var component = view.childVM;\n    if (!component || !handler) {\n      return false;\n    }\n    // important: check view.Component here because it may\n    // have been changed in activate hook\n    if (view.Component !== handler.component) {\n      return false;\n    }\n    var canReuseFn = getRouteConfig(component, 'canReuse');\n    return typeof canReuseFn === 'boolean' ? canReuseFn : canReuseFn ? canReuseFn.call(component, {\n      to: transition.to,\n      from: transition.from\n    }) : true; // defaults to true\n  }\n\n  /**\n   * Check if a component can deactivate.\n   *\n   * @param {Directive} view\n   * @param {Transition} transition\n   * @param {Function} next\n   */\n\n  function canDeactivate(view, transition, next) {\n    var fromComponent = view.childVM;\n    var hook = getRouteConfig(fromComponent, 'canDeactivate');\n    if (!hook) {\n      next();\n    } else {\n      transition.callHook(hook, fromComponent, next, {\n        expectBoolean: true\n      });\n    }\n  }\n\n  /**\n   * Check if a component can activate.\n   *\n   * @param {Object} handler\n   * @param {Transition} transition\n   * @param {Function} next\n   */\n\n  function canActivate(handler, transition, next) {\n    resolveAsyncComponent(handler, function (Component) {\n      // have to check due to async-ness\n      if (transition.aborted) {\n        return;\n      }\n      // determine if this component can be activated\n      var hook = getRouteConfig(Component, 'canActivate');\n      if (!hook) {\n        next();\n      } else {\n        transition.callHook(hook, null, next, {\n          expectBoolean: true\n        });\n      }\n    });\n  }\n\n  /**\n   * Call deactivate hooks for existing router-views.\n   *\n   * @param {Directive} view\n   * @param {Transition} transition\n   * @param {Function} next\n   */\n\n  function deactivate(view, transition, next) {\n    var component = view.childVM;\n    var hook = getRouteConfig(component, 'deactivate');\n    if (!hook) {\n      next();\n    } else {\n      transition.callHooks(hook, component, next);\n    }\n  }\n\n  /**\n   * Activate / switch component for a router-view.\n   *\n   * @param {Directive} view\n   * @param {Transition} transition\n   * @param {Number} depth\n   * @param {Function} [cb]\n   */\n\n  function activate(view, transition, depth, cb, reuse) {\n    var handler = transition.activateQueue[depth];\n    if (!handler) {\n      saveChildView(view);\n      if (view._bound) {\n        view.setComponent(null);\n      }\n      cb && cb();\n      return;\n    }\n\n    var Component = view.Component = handler.component;\n    var activateHook = getRouteConfig(Component, 'activate');\n    var dataHook = getRouteConfig(Component, 'data');\n    var waitForData = getRouteConfig(Component, 'waitForData');\n\n    view.depth = depth;\n    view.activated = false;\n\n    var component = undefined;\n    var loading = !!(dataHook && !waitForData);\n\n    // \"reuse\" is a flag passed down when the parent view is\n    // either reused via keep-alive or as a child of a kept-alive view.\n    // of course we can only reuse if the current kept-alive instance\n    // is of the correct type.\n    reuse = reuse && view.childVM && view.childVM.constructor === Component;\n\n    if (reuse) {\n      // just reuse\n      component = view.childVM;\n      component.$loadingRouteData = loading;\n    } else {\n      saveChildView(view);\n\n      // unbuild current component. this step also destroys\n      // and removes all nested child views.\n      view.unbuild(true);\n\n      // build the new component. this will also create the\n      // direct child view of the current one. it will register\n      // itself as view.childView.\n      component = view.build({\n        _meta: {\n          $loadingRouteData: loading\n        },\n        created: function created() {\n          this._routerView = view;\n        }\n      });\n\n      // handle keep-alive.\n      // when a kept-alive child vm is restored, we need to\n      // add its cached child views into the router's view list,\n      // and also properly update current view's child view.\n      if (view.keepAlive) {\n        component.$loadingRouteData = loading;\n        var cachedChildView = component._keepAliveRouterView;\n        if (cachedChildView) {\n          view.childView = cachedChildView;\n          component._keepAliveRouterView = null;\n        }\n      }\n    }\n\n    // cleanup the component in case the transition is aborted\n    // before the component is ever inserted.\n    var cleanup = function cleanup() {\n      component.$destroy();\n    };\n\n    // actually insert the component and trigger transition\n    var insert = function insert() {\n      if (reuse) {\n        cb && cb();\n        return;\n      }\n      var router = transition.router;\n      if (router._rendered || router._transitionOnLoad) {\n        view.transition(component);\n      } else {\n        // no transition on first render, manual transition\n        /* istanbul ignore if */\n        if (view.setCurrent) {\n          // 0.12 compat\n          view.setCurrent(component);\n        } else {\n          // 1.0\n          view.childVM = component;\n        }\n        component.$before(view.anchor, null, false);\n      }\n      cb && cb();\n    };\n\n    var afterData = function afterData() {\n      // activate the child view\n      if (view.childView) {\n        activate(view.childView, transition, depth + 1, null, reuse || view.keepAlive);\n      }\n      insert();\n    };\n\n    // called after activation hook is resolved\n    var afterActivate = function afterActivate() {\n      view.activated = true;\n      if (dataHook && waitForData) {\n        // wait until data loaded to insert\n        loadData(component, transition, dataHook, afterData, cleanup);\n      } else {\n        // load data and insert at the same time\n        if (dataHook) {\n          loadData(component, transition, dataHook);\n        }\n        afterData();\n      }\n    };\n\n    if (activateHook) {\n      transition.callHooks(activateHook, component, afterActivate, {\n        cleanup: cleanup,\n        postActivate: true\n      });\n    } else {\n      afterActivate();\n    }\n  }\n\n  /**\n   * Reuse a view, just reload data if necessary.\n   *\n   * @param {Directive} view\n   * @param {Transition} transition\n   */\n\n  function reuse(view, transition) {\n    var component = view.childVM;\n    var dataHook = getRouteConfig(component, 'data');\n    if (dataHook) {\n      loadData(component, transition, dataHook);\n    }\n  }\n\n  /**\n   * Asynchronously load and apply data to component.\n   *\n   * @param {Vue} component\n   * @param {Transition} transition\n   * @param {Function} hook\n   * @param {Function} cb\n   * @param {Function} cleanup\n   */\n\n  function loadData(component, transition, hook, cb, cleanup) {\n    component.$loadingRouteData = true;\n    transition.callHooks(hook, component, function () {\n      component.$loadingRouteData = false;\n      component.$emit('route-data-loaded', component);\n      cb && cb();\n    }, {\n      cleanup: cleanup,\n      postActivate: true,\n      processData: function processData(data) {\n        // handle promise sugar syntax\n        var promises = [];\n        if (isPlainObject(data)) {\n          Object.keys(data).forEach(function (key) {\n            var val = data[key];\n            if (isPromise(val)) {\n              promises.push(val.then(function (resolvedVal) {\n                component.$set(key, resolvedVal);\n              }));\n            } else {\n              component.$set(key, val);\n            }\n          });\n        }\n        if (promises.length) {\n          return promises[0].constructor.all(promises);\n        }\n      }\n    });\n  }\n\n  /**\n   * Save the child view for a kept-alive view so that\n   * we can restore it when it is switched back to.\n   *\n   * @param {Directive} view\n   */\n\n  function saveChildView(view) {\n    if (view.keepAlive && view.childVM && view.childView) {\n      view.childVM._keepAliveRouterView = view.childView;\n    }\n    view.childView = null;\n  }\n\n  /**\n   * Check plain object.\n   *\n   * @param {*} val\n   */\n\n  function isPlainObject(val) {\n    return Object.prototype.toString.call(val) === '[object Object]';\n  }\n\n  /**\n   * A RouteTransition object manages the pipeline of a\n   * router-view switching process. This is also the object\n   * passed into user route hooks.\n   *\n   * @param {Router} router\n   * @param {Route} to\n   * @param {Route} from\n   */\n\n  var RouteTransition = (function () {\n    function RouteTransition(router, to, from) {\n      babelHelpers.classCallCheck(this, RouteTransition);\n\n      this.router = router;\n      this.to = to;\n      this.from = from;\n      this.next = null;\n      this.aborted = false;\n      this.done = false;\n    }\n\n    /**\n     * Abort current transition and return to previous location.\n     */\n\n    RouteTransition.prototype.abort = function abort() {\n      if (!this.aborted) {\n        this.aborted = true;\n        // if the root path throws an error during validation\n        // on initial load, it gets caught in an infinite loop.\n        var abortingOnLoad = !this.from.path && this.to.path === '/';\n        if (!abortingOnLoad) {\n          this.router.replace(this.from.path || '/');\n        }\n      }\n    };\n\n    /**\n     * Abort current transition and redirect to a new location.\n     *\n     * @param {String} path\n     */\n\n    RouteTransition.prototype.redirect = function redirect(path) {\n      if (!this.aborted) {\n        this.aborted = true;\n        if (typeof path === 'string') {\n          path = mapParams(path, this.to.params, this.to.query);\n        } else {\n          path.params = path.params || this.to.params;\n          path.query = path.query || this.to.query;\n        }\n        this.router.replace(path);\n      }\n    };\n\n    /**\n     * A router view transition's pipeline can be described as\n     * follows, assuming we are transitioning from an existing\n     * <router-view> chain [Component A, Component B] to a new\n     * chain [Component A, Component C]:\n     *\n     *  A    A\n     *  | => |\n     *  B    C\n     *\n     * 1. Reusablity phase:\n     *   -> canReuse(A, A)\n     *   -> canReuse(B, C)\n     *   -> determine new queues:\n     *      - deactivation: [B]\n     *      - activation: [C]\n     *\n     * 2. Validation phase:\n     *   -> canDeactivate(B)\n     *   -> canActivate(C)\n     *\n     * 3. Activation phase:\n     *   -> deactivate(B)\n     *   -> activate(C)\n     *\n     * Each of these steps can be asynchronous, and any\n     * step can potentially abort the transition.\n     *\n     * @param {Function} cb\n     */\n\n    RouteTransition.prototype.start = function start(cb) {\n      var transition = this;\n\n      // determine the queue of views to deactivate\n      var deactivateQueue = [];\n      var view = this.router._rootView;\n      while (view) {\n        deactivateQueue.unshift(view);\n        view = view.childView;\n      }\n      var reverseDeactivateQueue = deactivateQueue.slice().reverse();\n\n      // determine the queue of route handlers to activate\n      var activateQueue = this.activateQueue = toArray(this.to.matched).map(function (match) {\n        return match.handler;\n      });\n\n      // 1. Reusability phase\n      var i = undefined,\n          reuseQueue = undefined;\n      for (i = 0; i < reverseDeactivateQueue.length; i++) {\n        if (!canReuse(reverseDeactivateQueue[i], activateQueue[i], transition)) {\n          break;\n        }\n      }\n      if (i > 0) {\n        reuseQueue = reverseDeactivateQueue.slice(0, i);\n        deactivateQueue = reverseDeactivateQueue.slice(i).reverse();\n        activateQueue = activateQueue.slice(i);\n      }\n\n      // 2. Validation phase\n      transition.runQueue(deactivateQueue, canDeactivate, function () {\n        transition.runQueue(activateQueue, canActivate, function () {\n          transition.runQueue(deactivateQueue, deactivate, function () {\n            // 3. Activation phase\n\n            // Update router current route\n            transition.router._onTransitionValidated(transition);\n\n            // trigger reuse for all reused views\n            reuseQueue && reuseQueue.forEach(function (view) {\n              return reuse(view, transition);\n            });\n\n            // the root of the chain that needs to be replaced\n            // is the top-most non-reusable view.\n            if (deactivateQueue.length) {\n              var _view = deactivateQueue[deactivateQueue.length - 1];\n              var depth = reuseQueue ? reuseQueue.length : 0;\n              activate(_view, transition, depth, cb);\n            } else {\n              cb();\n            }\n          });\n        });\n      });\n    };\n\n    /**\n     * Asynchronously and sequentially apply a function to a\n     * queue.\n     *\n     * @param {Array} queue\n     * @param {Function} fn\n     * @param {Function} cb\n     */\n\n    RouteTransition.prototype.runQueue = function runQueue(queue, fn, cb) {\n      var transition = this;\n      step(0);\n      function step(index) {\n        if (index >= queue.length) {\n          cb();\n        } else {\n          fn(queue[index], transition, function () {\n            step(index + 1);\n          });\n        }\n      }\n    };\n\n    /**\n     * Call a user provided route transition hook and handle\n     * the response (e.g. if the user returns a promise).\n     *\n     * If the user neither expects an argument nor returns a\n     * promise, the hook is assumed to be synchronous.\n     *\n     * @param {Function} hook\n     * @param {*} [context]\n     * @param {Function} [cb]\n     * @param {Object} [options]\n     *                 - {Boolean} expectBoolean\n     *                 - {Boolean} postActive\n     *                 - {Function} processData\n     *                 - {Function} cleanup\n     */\n\n    RouteTransition.prototype.callHook = function callHook(hook, context, cb) {\n      var _ref = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];\n\n      var _ref$expectBoolean = _ref.expectBoolean;\n      var expectBoolean = _ref$expectBoolean === undefined ? false : _ref$expectBoolean;\n      var _ref$postActivate = _ref.postActivate;\n      var postActivate = _ref$postActivate === undefined ? false : _ref$postActivate;\n      var processData = _ref.processData;\n      var cleanup = _ref.cleanup;\n\n      var transition = this;\n      var nextCalled = false;\n\n      // abort the transition\n      var abort = function abort() {\n        cleanup && cleanup();\n        transition.abort();\n      };\n\n      // handle errors\n      var onError = function onError(err) {\n        postActivate ? next() : abort();\n        if (err && !transition.router._suppress) {\n          warn$1('Uncaught error during transition: ');\n          throw err instanceof Error ? err : new Error(err);\n        }\n      };\n\n      // since promise swallows errors, we have to\n      // throw it in the next tick...\n      var onPromiseError = function onPromiseError(err) {\n        try {\n          onError(err);\n        } catch (e) {\n          setTimeout(function () {\n            throw e;\n          }, 0);\n        }\n      };\n\n      // advance the transition to the next step\n      var next = function next() {\n        if (nextCalled) {\n          warn$1('transition.next() should be called only once.');\n          return;\n        }\n        nextCalled = true;\n        if (transition.aborted) {\n          cleanup && cleanup();\n          return;\n        }\n        cb && cb();\n      };\n\n      var nextWithBoolean = function nextWithBoolean(res) {\n        if (typeof res === 'boolean') {\n          res ? next() : abort();\n        } else if (isPromise(res)) {\n          res.then(function (ok) {\n            ok ? next() : abort();\n          }, onPromiseError);\n        } else if (!hook.length) {\n          next();\n        }\n      };\n\n      var nextWithData = function nextWithData(data) {\n        var res = undefined;\n        try {\n          res = processData(data);\n        } catch (err) {\n          return onError(err);\n        }\n        if (isPromise(res)) {\n          res.then(next, onPromiseError);\n        } else {\n          next();\n        }\n      };\n\n      // expose a clone of the transition object, so that each\n      // hook gets a clean copy and prevent the user from\n      // messing with the internals.\n      var exposed = {\n        to: transition.to,\n        from: transition.from,\n        abort: abort,\n        next: processData ? nextWithData : next,\n        redirect: function redirect() {\n          transition.redirect.apply(transition, arguments);\n        }\n      };\n\n      // actually call the hook\n      var res = undefined;\n      try {\n        res = hook.call(context, exposed);\n      } catch (err) {\n        return onError(err);\n      }\n\n      if (expectBoolean) {\n        // boolean hooks\n        nextWithBoolean(res);\n      } else if (isPromise(res)) {\n        // promise\n        if (processData) {\n          res.then(nextWithData, onPromiseError);\n        } else {\n          res.then(next, onPromiseError);\n        }\n      } else if (processData && isPlainOjbect(res)) {\n        // data promise sugar\n        nextWithData(res);\n      } else if (!hook.length) {\n        next();\n      }\n    };\n\n    /**\n     * Call a single hook or an array of async hooks in series.\n     *\n     * @param {Array} hooks\n     * @param {*} context\n     * @param {Function} cb\n     * @param {Object} [options]\n     */\n\n    RouteTransition.prototype.callHooks = function callHooks(hooks, context, cb, options) {\n      var _this = this;\n\n      if (Array.isArray(hooks)) {\n        this.runQueue(hooks, function (hook, _, next) {\n          if (!_this.aborted) {\n            _this.callHook(hook, context, next, options);\n          }\n        }, cb);\n      } else {\n        this.callHook(hooks, context, cb, options);\n      }\n    };\n\n    return RouteTransition;\n  })();\n\n  function isPlainOjbect(val) {\n    return Object.prototype.toString.call(val) === '[object Object]';\n  }\n\n  function toArray(val) {\n    return val ? Array.prototype.slice.call(val) : [];\n  }\n\n  var internalKeysRE = /^(component|subRoutes|fullPath)$/;\n\n  /**\n   * Route Context Object\n   *\n   * @param {String} path\n   * @param {Router} router\n   */\n\n  var Route = function Route(path, router) {\n    var _this = this;\n\n    babelHelpers.classCallCheck(this, Route);\n\n    var matched = router._recognizer.recognize(path);\n    if (matched) {\n      // copy all custom fields from route configs\n      [].forEach.call(matched, function (match) {\n        for (var key in match.handler) {\n          if (!internalKeysRE.test(key)) {\n            _this[key] = match.handler[key];\n          }\n        }\n      });\n      // set query and params\n      this.query = matched.queryParams;\n      this.params = [].reduce.call(matched, function (prev, cur) {\n        if (cur.params) {\n          for (var key in cur.params) {\n            prev[key] = cur.params[key];\n          }\n        }\n        return prev;\n      }, {});\n    }\n    // expose path and router\n    this.path = path;\n    // for internal use\n    this.matched = matched || router._notFoundHandler;\n    // internal reference to router\n    Object.defineProperty(this, 'router', {\n      enumerable: false,\n      value: router\n    });\n    // Important: freeze self to prevent observation\n    Object.freeze(this);\n  };\n\n  function applyOverride (Vue) {\n    var _Vue$util = Vue.util;\n    var extend = _Vue$util.extend;\n    var isArray = _Vue$util.isArray;\n    var defineReactive = _Vue$util.defineReactive;\n\n    // override Vue's init and destroy process to keep track of router instances\n    var init = Vue.prototype._init;\n    Vue.prototype._init = function (options) {\n      options = options || {};\n      var root = options._parent || options.parent || this;\n      var router = root.$router;\n      var route = root.$route;\n      if (router) {\n        // expose router\n        this.$router = router;\n        router._children.push(this);\n        /* istanbul ignore if */\n        if (this._defineMeta) {\n          // 0.12\n          this._defineMeta('$route', route);\n        } else {\n          // 1.0\n          defineReactive(this, '$route', route);\n        }\n      }\n      init.call(this, options);\n    };\n\n    var destroy = Vue.prototype._destroy;\n    Vue.prototype._destroy = function () {\n      if (!this._isBeingDestroyed && this.$router) {\n        this.$router._children.$remove(this);\n      }\n      destroy.apply(this, arguments);\n    };\n\n    // 1.0 only: enable route mixins\n    var strats = Vue.config.optionMergeStrategies;\n    var hooksToMergeRE = /^(data|activate|deactivate)$/;\n\n    if (strats) {\n      strats.route = function (parentVal, childVal) {\n        if (!childVal) return parentVal;\n        if (!parentVal) return childVal;\n        var ret = {};\n        extend(ret, parentVal);\n        for (var key in childVal) {\n          var a = ret[key];\n          var b = childVal[key];\n          // for data, activate and deactivate, we need to merge them into\n          // arrays similar to lifecycle hooks.\n          if (a && hooksToMergeRE.test(key)) {\n            ret[key] = (isArray(a) ? a : [a]).concat(b);\n          } else {\n            ret[key] = b;\n          }\n        }\n        return ret;\n      };\n    }\n  }\n\n  function View (Vue) {\n\n    var _ = Vue.util;\n    var componentDef =\n    // 0.12\n    Vue.directive('_component') ||\n    // 1.0\n    Vue.internalDirectives.component;\n    // <router-view> extends the internal component directive\n    var viewDef = _.extend({}, componentDef);\n\n    // with some overrides\n    _.extend(viewDef, {\n\n      _isRouterView: true,\n\n      bind: function bind() {\n        var route = this.vm.$route;\n        /* istanbul ignore if */\n        if (!route) {\n          warn$1('<router-view> can only be used inside a ' + 'router-enabled app.');\n          return;\n        }\n        // force dynamic directive so v-component doesn't\n        // attempt to build right now\n        this._isDynamicLiteral = true;\n        // finally, init by delegating to v-component\n        componentDef.bind.call(this);\n\n        // locate the parent view\n        var parentView = undefined;\n        var parent = this.vm;\n        while (parent) {\n          if (parent._routerView) {\n            parentView = parent._routerView;\n            break;\n          }\n          parent = parent.$parent;\n        }\n        if (parentView) {\n          // register self as a child of the parent view,\n          // instead of activating now. This is so that the\n          // child's activate hook is called after the\n          // parent's has resolved.\n          this.parentView = parentView;\n          parentView.childView = this;\n        } else {\n          // this is the root view!\n          var router = route.router;\n          router._rootView = this;\n        }\n\n        // handle late-rendered view\n        // two possibilities:\n        // 1. root view rendered after transition has been\n        //    validated;\n        // 2. child view rendered after parent view has been\n        //    activated.\n        var transition = route.router._currentTransition;\n        if (!parentView && transition.done || parentView && parentView.activated) {\n          var depth = parentView ? parentView.depth + 1 : 0;\n          activate(this, transition, depth);\n        }\n      },\n\n      unbind: function unbind() {\n        if (this.parentView) {\n          this.parentView.childView = null;\n        }\n        componentDef.unbind.call(this);\n      }\n    });\n\n    Vue.elementDirective('router-view', viewDef);\n  }\n\n  var trailingSlashRE = /\\/$/;\n  var regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n  var queryStringRE = /\\?.*$/;\n\n  // install v-link, which provides navigation support for\n  // HTML5 history mode\n  function Link (Vue) {\n    var _Vue$util = Vue.util;\n    var _bind = _Vue$util.bind;\n    var isObject = _Vue$util.isObject;\n    var addClass = _Vue$util.addClass;\n    var removeClass = _Vue$util.removeClass;\n\n    var onPriority = Vue.directive('on').priority;\n    var LINK_UPDATE = '__vue-router-link-update__';\n\n    var activeId = 0;\n\n    Vue.directive('link-active', {\n      priority: 9999,\n      bind: function bind() {\n        var _this = this;\n\n        var id = String(activeId++);\n        // collect v-links contained within this element.\n        // we need do this here before the parent-child relationship\n        // gets messed up by terminal directives (if, for, components)\n        var childLinks = this.el.querySelectorAll('[v-link]');\n        for (var i = 0, l = childLinks.length; i < l; i++) {\n          var link = childLinks[i];\n          var existingId = link.getAttribute(LINK_UPDATE);\n          var value = existingId ? existingId + ',' + id : id;\n          // leave a mark on the link element which can be persisted\n          // through fragment clones.\n          link.setAttribute(LINK_UPDATE, value);\n        }\n        this.vm.$on(LINK_UPDATE, this.cb = function (link, path) {\n          if (link.activeIds.indexOf(id) > -1) {\n            link.updateClasses(path, _this.el);\n          }\n        });\n      },\n      unbind: function unbind() {\n        this.vm.$off(LINK_UPDATE, this.cb);\n      }\n    });\n\n    Vue.directive('link', {\n      priority: onPriority - 2,\n\n      bind: function bind() {\n        var vm = this.vm;\n        /* istanbul ignore if */\n        if (!vm.$route) {\n          warn$1('v-link can only be used inside a router-enabled app.');\n          return;\n        }\n        this.router = vm.$route.router;\n        // update things when the route changes\n        this.unwatch = vm.$watch('$route', _bind(this.onRouteUpdate, this));\n        // check v-link-active ids\n        var activeIds = this.el.getAttribute(LINK_UPDATE);\n        if (activeIds) {\n          this.el.removeAttribute(LINK_UPDATE);\n          this.activeIds = activeIds.split(',');\n        }\n        // no need to handle click if link expects to be opened\n        // in a new window/tab.\n        /* istanbul ignore if */\n        if (this.el.tagName === 'A' && this.el.getAttribute('target') === '_blank') {\n          return;\n        }\n        // handle click\n        this.handler = _bind(this.onClick, this);\n        this.el.addEventListener('click', this.handler);\n      },\n\n      update: function update(target) {\n        this.target = target;\n        if (isObject(target)) {\n          this.append = target.append;\n          this.exact = target.exact;\n          this.prevActiveClass = this.activeClass;\n          this.activeClass = target.activeClass;\n        }\n        this.onRouteUpdate(this.vm.$route);\n      },\n\n      onClick: function onClick(e) {\n        // don't redirect with control keys\n        /* istanbul ignore if */\n        if (e.metaKey || e.ctrlKey || e.shiftKey) return;\n        // don't redirect when preventDefault called\n        /* istanbul ignore if */\n        if (e.defaultPrevented) return;\n        // don't redirect on right click\n        /* istanbul ignore if */\n        if (e.button !== 0) return;\n\n        var target = this.target;\n        if (target) {\n          // v-link with expression, just go\n          e.preventDefault();\n          this.router.go(target);\n        } else {\n          // no expression, delegate for an <a> inside\n          var el = e.target;\n          while (el.tagName !== 'A' && el !== this.el) {\n            el = el.parentNode;\n          }\n          if (el.tagName === 'A' && sameOrigin(el)) {\n            e.preventDefault();\n            var path = el.pathname;\n            if (this.router.history.root) {\n              path = path.replace(this.router.history.rootRE, '');\n            }\n            this.router.go({\n              path: path,\n              replace: target && target.replace,\n              append: target && target.append\n            });\n          }\n        }\n      },\n\n      onRouteUpdate: function onRouteUpdate(route) {\n        // router.stringifyPath is dependent on current route\n        // and needs to be called again whenver route changes.\n        var newPath = this.router.stringifyPath(this.target);\n        if (this.path !== newPath) {\n          this.path = newPath;\n          this.updateActiveMatch();\n          this.updateHref();\n        }\n        if (this.activeIds) {\n          this.vm.$emit(LINK_UPDATE, this, route.path);\n        } else {\n          this.updateClasses(route.path, this.el);\n        }\n      },\n\n      updateActiveMatch: function updateActiveMatch() {\n        this.activeRE = this.path && !this.exact ? new RegExp('^' + this.path.replace(/\\/$/, '').replace(queryStringRE, '').replace(regexEscapeRE, '\\\\$&') + '(\\\\/|$)') : null;\n      },\n\n      updateHref: function updateHref() {\n        if (this.el.tagName !== 'A') {\n          return;\n        }\n        var path = this.path;\n        var router = this.router;\n        var isAbsolute = path.charAt(0) === '/';\n        // do not format non-hash relative paths\n        var href = path && (router.mode === 'hash' || isAbsolute) ? router.history.formatPath(path, this.append) : path;\n        if (href) {\n          this.el.href = href;\n        } else {\n          this.el.removeAttribute('href');\n        }\n      },\n\n      updateClasses: function updateClasses(path, el) {\n        var activeClass = this.activeClass || this.router._linkActiveClass;\n        // clear old class\n        if (this.prevActiveClass && this.prevActiveClass !== activeClass) {\n          toggleClasses(el, this.prevActiveClass, removeClass);\n        }\n        // remove query string before matching\n        var dest = this.path.replace(queryStringRE, '');\n        path = path.replace(queryStringRE, '');\n        // add new class\n        if (this.exact) {\n          if (dest === path ||\n          // also allow additional trailing slash\n          dest.charAt(dest.length - 1) !== '/' && dest === path.replace(trailingSlashRE, '')) {\n            toggleClasses(el, activeClass, addClass);\n          } else {\n            toggleClasses(el, activeClass, removeClass);\n          }\n        } else {\n          if (this.activeRE && this.activeRE.test(path)) {\n            toggleClasses(el, activeClass, addClass);\n          } else {\n            toggleClasses(el, activeClass, removeClass);\n          }\n        }\n      },\n\n      unbind: function unbind() {\n        this.el.removeEventListener('click', this.handler);\n        this.unwatch && this.unwatch();\n      }\n    });\n\n    function sameOrigin(link) {\n      return link.protocol === location.protocol && link.hostname === location.hostname && link.port === location.port;\n    }\n\n    // this function is copied from v-bind:class implementation until\n    // we properly expose it...\n    function toggleClasses(el, key, fn) {\n      key = key.trim();\n      if (key.indexOf(' ') === -1) {\n        fn(el, key);\n        return;\n      }\n      var keys = key.split(/\\s+/);\n      for (var i = 0, l = keys.length; i < l; i++) {\n        fn(el, keys[i]);\n      }\n    }\n  }\n\n  var historyBackends = {\n    abstract: AbstractHistory,\n    hash: HashHistory,\n    html5: HTML5History\n  };\n\n  // late bind during install\n  var Vue = undefined;\n\n  /**\n   * Router constructor\n   *\n   * @param {Object} [options]\n   */\n\n  var Router = (function () {\n    function Router() {\n      var _this = this;\n\n      var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n      var _ref$hashbang = _ref.hashbang;\n      var hashbang = _ref$hashbang === undefined ? true : _ref$hashbang;\n      var _ref$abstract = _ref.abstract;\n      var abstract = _ref$abstract === undefined ? false : _ref$abstract;\n      var _ref$history = _ref.history;\n      var history = _ref$history === undefined ? false : _ref$history;\n      var _ref$saveScrollPosition = _ref.saveScrollPosition;\n      var saveScrollPosition = _ref$saveScrollPosition === undefined ? false : _ref$saveScrollPosition;\n      var _ref$transitionOnLoad = _ref.transitionOnLoad;\n      var transitionOnLoad = _ref$transitionOnLoad === undefined ? false : _ref$transitionOnLoad;\n      var _ref$suppressTransitionError = _ref.suppressTransitionError;\n      var suppressTransitionError = _ref$suppressTransitionError === undefined ? false : _ref$suppressTransitionError;\n      var _ref$root = _ref.root;\n      var root = _ref$root === undefined ? null : _ref$root;\n      var _ref$linkActiveClass = _ref.linkActiveClass;\n      var linkActiveClass = _ref$linkActiveClass === undefined ? 'v-link-active' : _ref$linkActiveClass;\n      babelHelpers.classCallCheck(this, Router);\n\n      /* istanbul ignore if */\n      if (!Router.installed) {\n        throw new Error('Please install the Router with Vue.use() before ' + 'creating an instance.');\n      }\n\n      // Vue instances\n      this.app = null;\n      this._children = [];\n\n      // route recognizer\n      this._recognizer = new RouteRecognizer();\n      this._guardRecognizer = new RouteRecognizer();\n\n      // state\n      this._started = false;\n      this._startCb = null;\n      this._currentRoute = {};\n      this._currentTransition = null;\n      this._previousTransition = null;\n      this._notFoundHandler = null;\n      this._notFoundRedirect = null;\n      this._beforeEachHooks = [];\n      this._afterEachHooks = [];\n\n      // trigger transition on initial render?\n      this._rendered = false;\n      this._transitionOnLoad = transitionOnLoad;\n\n      // history mode\n      this._root = root;\n      this._abstract = abstract;\n      this._hashbang = hashbang;\n\n      // check if HTML5 history is available\n      var hasPushState = typeof window !== 'undefined' && window.history && window.history.pushState;\n      this._history = history && hasPushState;\n      this._historyFallback = history && !hasPushState;\n\n      // create history object\n      var inBrowser = Vue.util.inBrowser;\n      this.mode = !inBrowser || this._abstract ? 'abstract' : this._history ? 'html5' : 'hash';\n\n      var History = historyBackends[this.mode];\n      this.history = new History({\n        root: root,\n        hashbang: this._hashbang,\n        onChange: function onChange(path, state, anchor) {\n          _this._match(path, state, anchor);\n        }\n      });\n\n      // other options\n      this._saveScrollPosition = saveScrollPosition;\n      this._linkActiveClass = linkActiveClass;\n      this._suppress = suppressTransitionError;\n    }\n\n    /**\n     * Allow directly passing components to a route\n     * definition.\n     *\n     * @param {String} path\n     * @param {Object} handler\n     */\n\n    // API ===================================================\n\n    /**\n    * Register a map of top-level paths.\n    *\n    * @param {Object} map\n    */\n\n    Router.prototype.map = function map(_map) {\n      for (var route in _map) {\n        this.on(route, _map[route]);\n      }\n      return this;\n    };\n\n    /**\n     * Register a single root-level path\n     *\n     * @param {String} rootPath\n     * @param {Object} handler\n     *                 - {String} component\n     *                 - {Object} [subRoutes]\n     *                 - {Boolean} [forceRefresh]\n     *                 - {Function} [before]\n     *                 - {Function} [after]\n     */\n\n    Router.prototype.on = function on(rootPath, handler) {\n      if (rootPath === '*') {\n        this._notFound(handler);\n      } else {\n        this._addRoute(rootPath, handler, []);\n      }\n      return this;\n    };\n\n    /**\n     * Set redirects.\n     *\n     * @param {Object} map\n     */\n\n    Router.prototype.redirect = function redirect(map) {\n      for (var path in map) {\n        this._addRedirect(path, map[path]);\n      }\n      return this;\n    };\n\n    /**\n     * Set aliases.\n     *\n     * @param {Object} map\n     */\n\n    Router.prototype.alias = function alias(map) {\n      for (var path in map) {\n        this._addAlias(path, map[path]);\n      }\n      return this;\n    };\n\n    /**\n     * Set global before hook.\n     *\n     * @param {Function} fn\n     */\n\n    Router.prototype.beforeEach = function beforeEach(fn) {\n      this._beforeEachHooks.push(fn);\n      return this;\n    };\n\n    /**\n     * Set global after hook.\n     *\n     * @param {Function} fn\n     */\n\n    Router.prototype.afterEach = function afterEach(fn) {\n      this._afterEachHooks.push(fn);\n      return this;\n    };\n\n    /**\n     * Navigate to a given path.\n     * The path can be an object describing a named path in\n     * the format of { name: '...', params: {}, query: {}}\n     * The path is assumed to be already decoded, and will\n     * be resolved against root (if provided)\n     *\n     * @param {String|Object} path\n     * @param {Boolean} [replace]\n     */\n\n    Router.prototype.go = function go(path) {\n      var replace = false;\n      var append = false;\n      if (Vue.util.isObject(path)) {\n        replace = path.replace;\n        append = path.append;\n      }\n      path = this.stringifyPath(path);\n      if (path) {\n        this.history.go(path, replace, append);\n      }\n    };\n\n    /**\n     * Short hand for replacing current path\n     *\n     * @param {String} path\n     */\n\n    Router.prototype.replace = function replace(path) {\n      if (typeof path === 'string') {\n        path = { path: path };\n      }\n      path.replace = true;\n      this.go(path);\n    };\n\n    /**\n     * Start the router.\n     *\n     * @param {VueConstructor} App\n     * @param {String|Element} container\n     * @param {Function} [cb]\n     */\n\n    Router.prototype.start = function start(App, container, cb) {\n      /* istanbul ignore if */\n      if (this._started) {\n        warn$1('already started.');\n        return;\n      }\n      this._started = true;\n      this._startCb = cb;\n      if (!this.app) {\n        /* istanbul ignore if */\n        if (!App || !container) {\n          throw new Error('Must start vue-router with a component and a ' + 'root container.');\n        }\n        /* istanbul ignore if */\n        if (App instanceof Vue) {\n          throw new Error('Must start vue-router with a component, not a ' + 'Vue instance.');\n        }\n        this._appContainer = container;\n        var Ctor = this._appConstructor = typeof App === 'function' ? App : Vue.extend(App);\n        // give it a name for better debugging\n        Ctor.options.name = Ctor.options.name || 'RouterApp';\n      }\n\n      // handle history fallback in browsers that do not\n      // support HTML5 history API\n      if (this._historyFallback) {\n        var _location = window.location;\n        var _history = new HTML5History({ root: this._root });\n        var path = _history.root ? _location.pathname.replace(_history.rootRE, '') : _location.pathname;\n        if (path && path !== '/') {\n          _location.assign((_history.root || '') + '/' + this.history.formatPath(path) + _location.search);\n          return;\n        }\n      }\n\n      this.history.start();\n    };\n\n    /**\n     * Stop listening to route changes.\n     */\n\n    Router.prototype.stop = function stop() {\n      this.history.stop();\n      this._started = false;\n    };\n\n    /**\n     * Normalize named route object / string paths into\n     * a string.\n     *\n     * @param {Object|String|Number} path\n     * @return {String}\n     */\n\n    Router.prototype.stringifyPath = function stringifyPath(path) {\n      var generatedPath = '';\n      if (path && typeof path === 'object') {\n        if (path.name) {\n          var extend = Vue.util.extend;\n          var currentParams = this._currentTransition && this._currentTransition.to.params;\n          var targetParams = path.params || {};\n          var params = currentParams ? extend(extend({}, currentParams), targetParams) : targetParams;\n          generatedPath = encodeURI(this._recognizer.generate(path.name, params));\n        } else if (path.path) {\n          generatedPath = encodeURI(path.path);\n        }\n        if (path.query) {\n          // note: the generated query string is pre-URL-encoded by the recognizer\n          var query = this._recognizer.generateQueryString(path.query);\n          if (generatedPath.indexOf('?') > -1) {\n            generatedPath += '&' + query.slice(1);\n          } else {\n            generatedPath += query;\n          }\n        }\n      } else {\n        generatedPath = encodeURI(path ? path + '' : '');\n      }\n      return generatedPath;\n    };\n\n    // Internal methods ======================================\n\n    /**\n    * Add a route containing a list of segments to the internal\n    * route recognizer. Will be called recursively to add all\n    * possible sub-routes.\n    *\n    * @param {String} path\n    * @param {Object} handler\n    * @param {Array} segments\n    */\n\n    Router.prototype._addRoute = function _addRoute(path, handler, segments) {\n      guardComponent(path, handler);\n      handler.path = path;\n      handler.fullPath = (segments.reduce(function (path, segment) {\n        return path + segment.path;\n      }, '') + path).replace('//', '/');\n      segments.push({\n        path: path,\n        handler: handler\n      });\n      this._recognizer.add(segments, {\n        as: handler.name\n      });\n      // add sub routes\n      if (handler.subRoutes) {\n        for (var subPath in handler.subRoutes) {\n          // recursively walk all sub routes\n          this._addRoute(subPath, handler.subRoutes[subPath],\n          // pass a copy in recursion to avoid mutating\n          // across branches\n          segments.slice());\n        }\n      }\n    };\n\n    /**\n     * Set the notFound route handler.\n     *\n     * @param {Object} handler\n     */\n\n    Router.prototype._notFound = function _notFound(handler) {\n      guardComponent('*', handler);\n      this._notFoundHandler = [{ handler: handler }];\n    };\n\n    /**\n     * Add a redirect record.\n     *\n     * @param {String} path\n     * @param {String} redirectPath\n     */\n\n    Router.prototype._addRedirect = function _addRedirect(path, redirectPath) {\n      if (path === '*') {\n        this._notFoundRedirect = redirectPath;\n      } else {\n        this._addGuard(path, redirectPath, this.replace);\n      }\n    };\n\n    /**\n     * Add an alias record.\n     *\n     * @param {String} path\n     * @param {String} aliasPath\n     */\n\n    Router.prototype._addAlias = function _addAlias(path, aliasPath) {\n      this._addGuard(path, aliasPath, this._match);\n    };\n\n    /**\n     * Add a path guard.\n     *\n     * @param {String} path\n     * @param {String} mappedPath\n     * @param {Function} handler\n     */\n\n    Router.prototype._addGuard = function _addGuard(path, mappedPath, _handler) {\n      var _this2 = this;\n\n      this._guardRecognizer.add([{\n        path: path,\n        handler: function handler(match, query) {\n          var realPath = mapParams(mappedPath, match.params, query);\n          _handler.call(_this2, realPath);\n        }\n      }]);\n    };\n\n    /**\n     * Check if a path matches any redirect records.\n     *\n     * @param {String} path\n     * @return {Boolean} - if true, will skip normal match.\n     */\n\n    Router.prototype._checkGuard = function _checkGuard(path) {\n      var matched = this._guardRecognizer.recognize(path, true);\n      if (matched) {\n        matched[0].handler(matched[0], matched.queryParams);\n        return true;\n      } else if (this._notFoundRedirect) {\n        matched = this._recognizer.recognize(path);\n        if (!matched) {\n          this.replace(this._notFoundRedirect);\n          return true;\n        }\n      }\n    };\n\n    /**\n     * Match a URL path and set the route context on vm,\n     * triggering view updates.\n     *\n     * @param {String} path\n     * @param {Object} [state]\n     * @param {String} [anchor]\n     */\n\n    Router.prototype._match = function _match(path, state, anchor) {\n      var _this3 = this;\n\n      if (this._checkGuard(path)) {\n        return;\n      }\n\n      var currentRoute = this._currentRoute;\n      var currentTransition = this._currentTransition;\n\n      if (currentTransition) {\n        if (currentTransition.to.path === path) {\n          // do nothing if we have an active transition going to the same path\n          return;\n        } else if (currentRoute.path === path) {\n          // We are going to the same path, but we also have an ongoing but\n          // not-yet-validated transition. Abort that transition and reset to\n          // prev transition.\n          currentTransition.aborted = true;\n          this._currentTransition = this._prevTransition;\n          return;\n        } else {\n          // going to a totally different path. abort ongoing transition.\n          currentTransition.aborted = true;\n        }\n      }\n\n      // construct new route and transition context\n      var route = new Route(path, this);\n      var transition = new RouteTransition(this, route, currentRoute);\n\n      // current transition is updated right now.\n      // however, current route will only be updated after the transition has\n      // been validated.\n      this._prevTransition = currentTransition;\n      this._currentTransition = transition;\n\n      if (!this.app) {\n        (function () {\n          // initial render\n          var router = _this3;\n          _this3.app = new _this3._appConstructor({\n            el: _this3._appContainer,\n            created: function created() {\n              this.$router = router;\n            },\n            _meta: {\n              $route: route\n            }\n          });\n        })();\n      }\n\n      // check global before hook\n      var beforeHooks = this._beforeEachHooks;\n      var startTransition = function startTransition() {\n        transition.start(function () {\n          _this3._postTransition(route, state, anchor);\n        });\n      };\n\n      if (beforeHooks.length) {\n        transition.runQueue(beforeHooks, function (hook, _, next) {\n          if (transition === _this3._currentTransition) {\n            transition.callHook(hook, null, next, {\n              expectBoolean: true\n            });\n          }\n        }, startTransition);\n      } else {\n        startTransition();\n      }\n\n      if (!this._rendered && this._startCb) {\n        this._startCb.call(null);\n      }\n\n      // HACK:\n      // set rendered to true after the transition start, so\n      // that components that are acitvated synchronously know\n      // whether it is the initial render.\n      this._rendered = true;\n    };\n\n    /**\n     * Set current to the new transition.\n     * This is called by the transition object when the\n     * validation of a route has succeeded.\n     *\n     * @param {Transition} transition\n     */\n\n    Router.prototype._onTransitionValidated = function _onTransitionValidated(transition) {\n      // set current route\n      var route = this._currentRoute = transition.to;\n      // update route context for all children\n      if (this.app.$route !== route) {\n        this.app.$route = route;\n        this._children.forEach(function (child) {\n          child.$route = route;\n        });\n      }\n      // call global after hook\n      if (this._afterEachHooks.length) {\n        this._afterEachHooks.forEach(function (hook) {\n          return hook.call(null, {\n            to: transition.to,\n            from: transition.from\n          });\n        });\n      }\n      this._currentTransition.done = true;\n    };\n\n    /**\n     * Handle stuff after the transition.\n     *\n     * @param {Route} route\n     * @param {Object} [state]\n     * @param {String} [anchor]\n     */\n\n    Router.prototype._postTransition = function _postTransition(route, state, anchor) {\n      // handle scroll positions\n      // saved scroll positions take priority\n      // then we check if the path has an anchor\n      var pos = state && state.pos;\n      if (pos && this._saveScrollPosition) {\n        Vue.nextTick(function () {\n          window.scrollTo(pos.x, pos.y);\n        });\n      } else if (anchor) {\n        Vue.nextTick(function () {\n          var el = document.getElementById(anchor.slice(1));\n          if (el) {\n            window.scrollTo(window.scrollX, el.offsetTop);\n          }\n        });\n      }\n    };\n\n    return Router;\n  })();\n\n  function guardComponent(path, handler) {\n    var comp = handler.component;\n    if (Vue.util.isPlainObject(comp)) {\n      comp = handler.component = Vue.extend(comp);\n    }\n    /* istanbul ignore if */\n    if (typeof comp !== 'function') {\n      handler.component = null;\n      warn$1('invalid component for route \"' + path + '\".');\n    }\n  }\n\n  /* Installation */\n\n  Router.installed = false;\n\n  /**\n   * Installation interface.\n   * Install the necessary directives.\n   */\n\n  Router.install = function (externalVue) {\n    /* istanbul ignore if */\n    if (Router.installed) {\n      warn$1('already installed.');\n      return;\n    }\n    Vue = externalVue;\n    applyOverride(Vue);\n    View(Vue);\n    Link(Vue);\n    exports$1.Vue = Vue;\n    Router.installed = true;\n  };\n\n  // auto install\n  /* istanbul ignore if */\n  if (typeof window !== 'undefined' && window.Vue) {\n    window.Vue.use(Router);\n  }\n\n  return Router;\n\n}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 5:
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar prefix = '_async_computed$';\n\nexports.default = {\n  install: function install(Vue, options) {\n    options = options || {};\n\n    Vue.config.optionMergeStrategies.asyncComputed = Vue.config.optionMergeStrategies.computed;\n\n    Vue.mixin({\n      created: function created() {\n        var _this = this;\n\n        Object.keys(this.$options.asyncComputed || {}).forEach(function (key) {\n          var fn = _this.$options.asyncComputed[key];\n          if (!_this.$options.computed) _this.$options.computed = {};\n          Vue.set(_this.$options.computed, prefix + key, fn);\n          Vue.set(_this, key, null);\n        });\n\n        this._initComputed();\n\n        Object.keys(this.$options.asyncComputed || {}).forEach(function (key) {\n          var promiseId = 0;\n          _this.$watch(prefix + key, function (newPromise) {\n            var thisPromise = ++promiseId;\n            newPromise.then(function (value) {\n              if (thisPromise !== promiseId) return;\n              _this[key] = value;\n            }).catch(function (err) {\n              if (thisPromise !== promiseId) return;\n\n              if (options.errorHandler === false) return;\n\n              var handler = options.errorHandler === undefined ? console.error.bind(console, 'Error evaluating async computed property:') : options.errorHandler;\n\n              handler(err.stack);\n            });\n          }, { immediate: true });\n        });\n      }\n    });\n  }\n};\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1hc3luYy1jb21wdXRlZC9kaXN0L2luZGV4LmpzP2VjODMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHFEQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7O0FBRUEscURBQXFEO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBLGFBQWE7QUFDYixXQUFXLEdBQUcsa0JBQWtCO0FBQ2hDLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBwcmVmaXggPSAnX2FzeW5jX2NvbXB1dGVkJCc7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHtcbiAgaW5zdGFsbDogZnVuY3Rpb24gaW5zdGFsbChWdWUsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIFZ1ZS5jb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzLmFzeW5jQ29tcHV0ZWQgPSBWdWUuY29uZmlnLm9wdGlvbk1lcmdlU3RyYXRlZ2llcy5jb21wdXRlZDtcblxuICAgIFZ1ZS5taXhpbih7XG4gICAgICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuJG9wdGlvbnMuYXN5bmNDb21wdXRlZCB8fCB7fSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgdmFyIGZuID0gX3RoaXMuJG9wdGlvbnMuYXN5bmNDb21wdXRlZFtrZXldO1xuICAgICAgICAgIGlmICghX3RoaXMuJG9wdGlvbnMuY29tcHV0ZWQpIF90aGlzLiRvcHRpb25zLmNvbXB1dGVkID0ge307XG4gICAgICAgICAgVnVlLnNldChfdGhpcy4kb3B0aW9ucy5jb21wdXRlZCwgcHJlZml4ICsga2V5LCBmbik7XG4gICAgICAgICAgVnVlLnNldChfdGhpcywga2V5LCBudWxsKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5faW5pdENvbXB1dGVkKCk7XG5cbiAgICAgICAgT2JqZWN0LmtleXModGhpcy4kb3B0aW9ucy5hc3luY0NvbXB1dGVkIHx8IHt9KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICB2YXIgcHJvbWlzZUlkID0gMDtcbiAgICAgICAgICBfdGhpcy4kd2F0Y2gocHJlZml4ICsga2V5LCBmdW5jdGlvbiAobmV3UHJvbWlzZSkge1xuICAgICAgICAgICAgdmFyIHRoaXNQcm9taXNlID0gKytwcm9taXNlSWQ7XG4gICAgICAgICAgICBuZXdQcm9taXNlLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgIGlmICh0aGlzUHJvbWlzZSAhPT0gcHJvbWlzZUlkKSByZXR1cm47XG4gICAgICAgICAgICAgIF90aGlzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgaWYgKHRoaXNQcm9taXNlICE9PSBwcm9taXNlSWQpIHJldHVybjtcblxuICAgICAgICAgICAgICBpZiAob3B0aW9ucy5lcnJvckhhbmRsZXIgPT09IGZhbHNlKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSBvcHRpb25zLmVycm9ySGFuZGxlciA9PT0gdW5kZWZpbmVkID8gY29uc29sZS5lcnJvci5iaW5kKGNvbnNvbGUsICdFcnJvciBldmFsdWF0aW5nIGFzeW5jIGNvbXB1dGVkIHByb3BlcnR5OicpIDogb3B0aW9ucy5lcnJvckhhbmRsZXI7XG5cbiAgICAgICAgICAgICAgaGFuZGxlcihlcnIuc3RhY2spO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgeyBpbW1lZGlhdGU6IHRydWUgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vdnVlLWFzeW5jLWNvbXB1dGVkL2Rpc3QvaW5kZXguanNcbiAqKiBtb2R1bGUgaWQgPSA1XG4gKiogbW9kdWxlIGNodW5rcyA9IDFcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 6:
/***/ function(module, exports) {

	eval("/*!\n * vue-resource v0.9.3\n * https://github.com/vuejs/vue-resource\n * Released under the MIT License.\n */\n\n'use strict';\n\n/**\n * Promises/A+ polyfill v1.1.4 (https://github.com/bramstein/promis)\n */\n\nvar RESOLVED = 0;\nvar REJECTED = 1;\nvar PENDING = 2;\n\nfunction Promise$2(executor) {\n\n    this.state = PENDING;\n    this.value = undefined;\n    this.deferred = [];\n\n    var promise = this;\n\n    try {\n        executor(function (x) {\n            promise.resolve(x);\n        }, function (r) {\n            promise.reject(r);\n        });\n    } catch (e) {\n        promise.reject(e);\n    }\n}\n\nPromise$2.reject = function (r) {\n    return new Promise$2(function (resolve, reject) {\n        reject(r);\n    });\n};\n\nPromise$2.resolve = function (x) {\n    return new Promise$2(function (resolve, reject) {\n        resolve(x);\n    });\n};\n\nPromise$2.all = function all(iterable) {\n    return new Promise$2(function (resolve, reject) {\n        var count = 0,\n            result = [];\n\n        if (iterable.length === 0) {\n            resolve(result);\n        }\n\n        function resolver(i) {\n            return function (x) {\n                result[i] = x;\n                count += 1;\n\n                if (count === iterable.length) {\n                    resolve(result);\n                }\n            };\n        }\n\n        for (var i = 0; i < iterable.length; i += 1) {\n            Promise$2.resolve(iterable[i]).then(resolver(i), reject);\n        }\n    });\n};\n\nPromise$2.race = function race(iterable) {\n    return new Promise$2(function (resolve, reject) {\n        for (var i = 0; i < iterable.length; i += 1) {\n            Promise$2.resolve(iterable[i]).then(resolve, reject);\n        }\n    });\n};\n\nvar p$1 = Promise$2.prototype;\n\np$1.resolve = function resolve(x) {\n    var promise = this;\n\n    if (promise.state === PENDING) {\n        if (x === promise) {\n            throw new TypeError('Promise settled with itself.');\n        }\n\n        var called = false;\n\n        try {\n            var then = x && x['then'];\n\n            if (x !== null && typeof x === 'object' && typeof then === 'function') {\n                then.call(x, function (x) {\n                    if (!called) {\n                        promise.resolve(x);\n                    }\n                    called = true;\n                }, function (r) {\n                    if (!called) {\n                        promise.reject(r);\n                    }\n                    called = true;\n                });\n                return;\n            }\n        } catch (e) {\n            if (!called) {\n                promise.reject(e);\n            }\n            return;\n        }\n\n        promise.state = RESOLVED;\n        promise.value = x;\n        promise.notify();\n    }\n};\n\np$1.reject = function reject(reason) {\n    var promise = this;\n\n    if (promise.state === PENDING) {\n        if (reason === promise) {\n            throw new TypeError('Promise settled with itself.');\n        }\n\n        promise.state = REJECTED;\n        promise.value = reason;\n        promise.notify();\n    }\n};\n\np$1.notify = function notify() {\n    var promise = this;\n\n    nextTick(function () {\n        if (promise.state !== PENDING) {\n            while (promise.deferred.length) {\n                var deferred = promise.deferred.shift(),\n                    onResolved = deferred[0],\n                    onRejected = deferred[1],\n                    resolve = deferred[2],\n                    reject = deferred[3];\n\n                try {\n                    if (promise.state === RESOLVED) {\n                        if (typeof onResolved === 'function') {\n                            resolve(onResolved.call(undefined, promise.value));\n                        } else {\n                            resolve(promise.value);\n                        }\n                    } else if (promise.state === REJECTED) {\n                        if (typeof onRejected === 'function') {\n                            resolve(onRejected.call(undefined, promise.value));\n                        } else {\n                            reject(promise.value);\n                        }\n                    }\n                } catch (e) {\n                    reject(e);\n                }\n            }\n        }\n    });\n};\n\np$1.then = function then(onResolved, onRejected) {\n    var promise = this;\n\n    return new Promise$2(function (resolve, reject) {\n        promise.deferred.push([onResolved, onRejected, resolve, reject]);\n        promise.notify();\n    });\n};\n\np$1.catch = function (onRejected) {\n    return this.then(undefined, onRejected);\n};\n\nvar PromiseObj = window.Promise || Promise$2;\n\nfunction Promise$1(executor, context) {\n\n    if (executor instanceof PromiseObj) {\n        this.promise = executor;\n    } else {\n        this.promise = new PromiseObj(executor.bind(context));\n    }\n\n    this.context = context;\n}\n\nPromise$1.all = function (iterable, context) {\n    return new Promise$1(PromiseObj.all(iterable), context);\n};\n\nPromise$1.resolve = function (value, context) {\n    return new Promise$1(PromiseObj.resolve(value), context);\n};\n\nPromise$1.reject = function (reason, context) {\n    return new Promise$1(PromiseObj.reject(reason), context);\n};\n\nPromise$1.race = function (iterable, context) {\n    return new Promise$1(PromiseObj.race(iterable), context);\n};\n\nvar p = Promise$1.prototype;\n\np.bind = function (context) {\n    this.context = context;\n    return this;\n};\n\np.then = function (fulfilled, rejected) {\n\n    if (fulfilled && fulfilled.bind && this.context) {\n        fulfilled = fulfilled.bind(this.context);\n    }\n\n    if (rejected && rejected.bind && this.context) {\n        rejected = rejected.bind(this.context);\n    }\n\n    return new Promise$1(this.promise.then(fulfilled, rejected), this.context);\n};\n\np.catch = function (rejected) {\n\n    if (rejected && rejected.bind && this.context) {\n        rejected = rejected.bind(this.context);\n    }\n\n    return new Promise$1(this.promise.catch(rejected), this.context);\n};\n\np.finally = function (callback) {\n\n    return this.then(function (value) {\n        callback.call(this);\n        return value;\n    }, function (reason) {\n        callback.call(this);\n        return PromiseObj.reject(reason);\n    });\n};\n\nvar debug = false;\nvar util = {};\nvar array = [];\nfunction Util (Vue) {\n    util = Vue.util;\n    debug = Vue.config.debug || !Vue.config.silent;\n}\n\nfunction warn(msg) {\n    if (typeof console !== 'undefined' && debug) {\n        console.warn('[VueResource warn]: ' + msg);\n    }\n}\n\nfunction error(msg) {\n    if (typeof console !== 'undefined') {\n        console.error(msg);\n    }\n}\n\nfunction nextTick(cb, ctx) {\n    return util.nextTick(cb, ctx);\n}\n\nfunction trim(str) {\n    return str.replace(/^\\s*|\\s*$/g, '');\n}\n\nvar isArray = Array.isArray;\n\nfunction isString(val) {\n    return typeof val === 'string';\n}\n\nfunction isBoolean(val) {\n    return val === true || val === false;\n}\n\nfunction isFunction(val) {\n    return typeof val === 'function';\n}\n\nfunction isObject(obj) {\n    return obj !== null && typeof obj === 'object';\n}\n\nfunction isPlainObject(obj) {\n    return isObject(obj) && Object.getPrototypeOf(obj) == Object.prototype;\n}\n\nfunction isFormData(obj) {\n    return typeof FormData !== 'undefined' && obj instanceof FormData;\n}\n\nfunction when(value, fulfilled, rejected) {\n\n    var promise = Promise$1.resolve(value);\n\n    if (arguments.length < 2) {\n        return promise;\n    }\n\n    return promise.then(fulfilled, rejected);\n}\n\nfunction options(fn, obj, opts) {\n\n    opts = opts || {};\n\n    if (isFunction(opts)) {\n        opts = opts.call(obj);\n    }\n\n    return merge(fn.bind({ $vm: obj, $options: opts }), fn, { $options: opts });\n}\n\nfunction each(obj, iterator) {\n\n    var i, key;\n\n    if (typeof obj.length == 'number') {\n        for (i = 0; i < obj.length; i++) {\n            iterator.call(obj[i], obj[i], i);\n        }\n    } else if (isObject(obj)) {\n        for (key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                iterator.call(obj[key], obj[key], key);\n            }\n        }\n    }\n\n    return obj;\n}\n\nvar assign = Object.assign || _assign;\n\nfunction merge(target) {\n\n    var args = array.slice.call(arguments, 1);\n\n    args.forEach(function (source) {\n        _merge(target, source, true);\n    });\n\n    return target;\n}\n\nfunction defaults(target) {\n\n    var args = array.slice.call(arguments, 1);\n\n    args.forEach(function (source) {\n\n        for (var key in source) {\n            if (target[key] === undefined) {\n                target[key] = source[key];\n            }\n        }\n    });\n\n    return target;\n}\n\nfunction _assign(target) {\n\n    var args = array.slice.call(arguments, 1);\n\n    args.forEach(function (source) {\n        _merge(target, source);\n    });\n\n    return target;\n}\n\nfunction _merge(target, source, deep) {\n    for (var key in source) {\n        if (deep && (isPlainObject(source[key]) || isArray(source[key]))) {\n            if (isPlainObject(source[key]) && !isPlainObject(target[key])) {\n                target[key] = {};\n            }\n            if (isArray(source[key]) && !isArray(target[key])) {\n                target[key] = [];\n            }\n            _merge(target[key], source[key], deep);\n        } else if (source[key] !== undefined) {\n            target[key] = source[key];\n        }\n    }\n}\n\nfunction root (options, next) {\n\n    var url = next(options);\n\n    if (isString(options.root) && !url.match(/^(https?:)?\\//)) {\n        url = options.root + '/' + url;\n    }\n\n    return url;\n}\n\nfunction query (options, next) {\n\n    var urlParams = Object.keys(Url.options.params),\n        query = {},\n        url = next(options);\n\n    each(options.params, function (value, key) {\n        if (urlParams.indexOf(key) === -1) {\n            query[key] = value;\n        }\n    });\n\n    query = Url.params(query);\n\n    if (query) {\n        url += (url.indexOf('?') == -1 ? '?' : '&') + query;\n    }\n\n    return url;\n}\n\n/**\n * URL Template v2.0.6 (https://github.com/bramstein/url-template)\n */\n\nfunction expand(url, params, variables) {\n\n    var tmpl = parse(url),\n        expanded = tmpl.expand(params);\n\n    if (variables) {\n        variables.push.apply(variables, tmpl.vars);\n    }\n\n    return expanded;\n}\n\nfunction parse(template) {\n\n    var operators = ['+', '#', '.', '/', ';', '?', '&'],\n        variables = [];\n\n    return {\n        vars: variables,\n        expand: function (context) {\n            return template.replace(/\\{([^\\{\\}]+)\\}|([^\\{\\}]+)/g, function (_, expression, literal) {\n                if (expression) {\n\n                    var operator = null,\n                        values = [];\n\n                    if (operators.indexOf(expression.charAt(0)) !== -1) {\n                        operator = expression.charAt(0);\n                        expression = expression.substr(1);\n                    }\n\n                    expression.split(/,/g).forEach(function (variable) {\n                        var tmp = /([^:\\*]*)(?::(\\d+)|(\\*))?/.exec(variable);\n                        values.push.apply(values, getValues(context, operator, tmp[1], tmp[2] || tmp[3]));\n                        variables.push(tmp[1]);\n                    });\n\n                    if (operator && operator !== '+') {\n\n                        var separator = ',';\n\n                        if (operator === '?') {\n                            separator = '&';\n                        } else if (operator !== '#') {\n                            separator = operator;\n                        }\n\n                        return (values.length !== 0 ? operator : '') + values.join(separator);\n                    } else {\n                        return values.join(',');\n                    }\n                } else {\n                    return encodeReserved(literal);\n                }\n            });\n        }\n    };\n}\n\nfunction getValues(context, operator, key, modifier) {\n\n    var value = context[key],\n        result = [];\n\n    if (isDefined(value) && value !== '') {\n        if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n            value = value.toString();\n\n            if (modifier && modifier !== '*') {\n                value = value.substring(0, parseInt(modifier, 10));\n            }\n\n            result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : null));\n        } else {\n            if (modifier === '*') {\n                if (Array.isArray(value)) {\n                    value.filter(isDefined).forEach(function (value) {\n                        result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : null));\n                    });\n                } else {\n                    Object.keys(value).forEach(function (k) {\n                        if (isDefined(value[k])) {\n                            result.push(encodeValue(operator, value[k], k));\n                        }\n                    });\n                }\n            } else {\n                var tmp = [];\n\n                if (Array.isArray(value)) {\n                    value.filter(isDefined).forEach(function (value) {\n                        tmp.push(encodeValue(operator, value));\n                    });\n                } else {\n                    Object.keys(value).forEach(function (k) {\n                        if (isDefined(value[k])) {\n                            tmp.push(encodeURIComponent(k));\n                            tmp.push(encodeValue(operator, value[k].toString()));\n                        }\n                    });\n                }\n\n                if (isKeyOperator(operator)) {\n                    result.push(encodeURIComponent(key) + '=' + tmp.join(','));\n                } else if (tmp.length !== 0) {\n                    result.push(tmp.join(','));\n                }\n            }\n        }\n    } else {\n        if (operator === ';') {\n            result.push(encodeURIComponent(key));\n        } else if (value === '' && (operator === '&' || operator === '?')) {\n            result.push(encodeURIComponent(key) + '=');\n        } else if (value === '') {\n            result.push('');\n        }\n    }\n\n    return result;\n}\n\nfunction isDefined(value) {\n    return value !== undefined && value !== null;\n}\n\nfunction isKeyOperator(operator) {\n    return operator === ';' || operator === '&' || operator === '?';\n}\n\nfunction encodeValue(operator, value, key) {\n\n    value = operator === '+' || operator === '#' ? encodeReserved(value) : encodeURIComponent(value);\n\n    if (key) {\n        return encodeURIComponent(key) + '=' + value;\n    } else {\n        return value;\n    }\n}\n\nfunction encodeReserved(str) {\n    return str.split(/(%[0-9A-Fa-f]{2})/g).map(function (part) {\n        if (!/%[0-9A-Fa-f]/.test(part)) {\n            part = encodeURI(part);\n        }\n        return part;\n    }).join('');\n}\n\nfunction template (options) {\n\n    var variables = [],\n        url = expand(options.url, options.params, variables);\n\n    variables.forEach(function (key) {\n        delete options.params[key];\n    });\n\n    return url;\n}\n\n/**\n * Service for URL templating.\n */\n\nvar ie = document.documentMode;\nvar el = document.createElement('a');\n\nfunction Url(url, params) {\n\n    var self = this || {},\n        options = url,\n        transform;\n\n    if (isString(url)) {\n        options = { url: url, params: params };\n    }\n\n    options = merge({}, Url.options, self.$options, options);\n\n    Url.transforms.forEach(function (handler) {\n        transform = factory(handler, transform, self.$vm);\n    });\n\n    return transform(options);\n}\n\n/**\n * Url options.\n */\n\nUrl.options = {\n    url: '',\n    root: null,\n    params: {}\n};\n\n/**\n * Url transforms.\n */\n\nUrl.transforms = [template, query, root];\n\n/**\n * Encodes a Url parameter string.\n *\n * @param {Object} obj\n */\n\nUrl.params = function (obj) {\n\n    var params = [],\n        escape = encodeURIComponent;\n\n    params.add = function (key, value) {\n\n        if (isFunction(value)) {\n            value = value();\n        }\n\n        if (value === null) {\n            value = '';\n        }\n\n        this.push(escape(key) + '=' + escape(value));\n    };\n\n    serialize(params, obj);\n\n    return params.join('&').replace(/%20/g, '+');\n};\n\n/**\n * Parse a URL and return its components.\n *\n * @param {String} url\n */\n\nUrl.parse = function (url) {\n\n    if (ie) {\n        el.href = url;\n        url = el.href;\n    }\n\n    el.href = url;\n\n    return {\n        href: el.href,\n        protocol: el.protocol ? el.protocol.replace(/:$/, '') : '',\n        port: el.port,\n        host: el.host,\n        hostname: el.hostname,\n        pathname: el.pathname.charAt(0) === '/' ? el.pathname : '/' + el.pathname,\n        search: el.search ? el.search.replace(/^\\?/, '') : '',\n        hash: el.hash ? el.hash.replace(/^#/, '') : ''\n    };\n};\n\nfunction factory(handler, next, vm) {\n    return function (options) {\n        return handler.call(vm, options, next);\n    };\n}\n\nfunction serialize(params, obj, scope) {\n\n    var array = isArray(obj),\n        plain = isPlainObject(obj),\n        hash;\n\n    each(obj, function (value, key) {\n\n        hash = isObject(value) || isArray(value);\n\n        if (scope) {\n            key = scope + '[' + (plain || hash ? key : '') + ']';\n        }\n\n        if (!scope && array) {\n            params.add(value.name, value.value);\n        } else if (hash) {\n            serialize(params, value, key);\n        } else {\n            params.add(key, value);\n        }\n    });\n}\n\nfunction xdrClient (request) {\n    return new Promise$1(function (resolve) {\n\n        var xdr = new XDomainRequest(),\n            handler = function (event) {\n\n            var response = request.respondWith(xdr.responseText, {\n                status: xdr.status,\n                statusText: xdr.statusText\n            });\n\n            resolve(response);\n        };\n\n        request.abort = function () {\n            return xdr.abort();\n        };\n\n        xdr.open(request.method, request.getUrl(), true);\n        xdr.timeout = 0;\n        xdr.onload = handler;\n        xdr.onerror = handler;\n        xdr.ontimeout = function () {};\n        xdr.onprogress = function () {};\n        xdr.send(request.getBody());\n    });\n}\n\nvar ORIGIN_URL = Url.parse(location.href);\nvar SUPPORTS_CORS = 'withCredentials' in new XMLHttpRequest();\n\nfunction cors (request, next) {\n\n    if (!isBoolean(request.crossOrigin) && crossOrigin(request)) {\n        request.crossOrigin = true;\n    }\n\n    if (request.crossOrigin) {\n\n        if (!SUPPORTS_CORS) {\n            request.client = xdrClient;\n        }\n\n        delete request.emulateHTTP;\n    }\n\n    next();\n}\n\nfunction crossOrigin(request) {\n\n    var requestUrl = Url.parse(Url(request));\n\n    return requestUrl.protocol !== ORIGIN_URL.protocol || requestUrl.host !== ORIGIN_URL.host;\n}\n\nfunction body (request, next) {\n\n    if (request.emulateJSON && isPlainObject(request.body)) {\n        request.body = Url.params(request.body);\n        request.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n    }\n\n    if (isFormData(request.body)) {\n        delete request.headers['Content-Type'];\n    }\n\n    if (isPlainObject(request.body)) {\n        request.body = JSON.stringify(request.body);\n    }\n\n    next(function (response) {\n\n        var contentType = response.headers['Content-Type'];\n\n        if (isString(contentType) && contentType.indexOf('application/json') === 0) {\n\n            try {\n                response.data = response.json();\n            } catch (e) {\n                response.data = null;\n            }\n        } else {\n            response.data = response.text();\n        }\n    });\n}\n\nfunction jsonpClient (request) {\n    return new Promise$1(function (resolve) {\n\n        var name = request.jsonp || 'callback',\n            callback = '_jsonp' + Math.random().toString(36).substr(2),\n            body = null,\n            handler,\n            script;\n\n        handler = function (event) {\n\n            var status = 0;\n\n            if (event.type === 'load' && body !== null) {\n                status = 200;\n            } else if (event.type === 'error') {\n                status = 404;\n            }\n\n            resolve(request.respondWith(body, { status: status }));\n\n            delete window[callback];\n            document.body.removeChild(script);\n        };\n\n        request.params[name] = callback;\n\n        window[callback] = function (result) {\n            body = JSON.stringify(result);\n        };\n\n        script = document.createElement('script');\n        script.src = request.getUrl();\n        script.type = 'text/javascript';\n        script.async = true;\n        script.onload = handler;\n        script.onerror = handler;\n\n        document.body.appendChild(script);\n    });\n}\n\nfunction jsonp (request, next) {\n\n    if (request.method == 'JSONP') {\n        request.client = jsonpClient;\n    }\n\n    next(function (response) {\n\n        if (request.method == 'JSONP') {\n            response.data = response.json();\n        }\n    });\n}\n\nfunction before (request, next) {\n\n    if (isFunction(request.before)) {\n        request.before.call(this, request);\n    }\n\n    next();\n}\n\n/**\n * HTTP method override Interceptor.\n */\n\nfunction method (request, next) {\n\n    if (request.emulateHTTP && /^(PUT|PATCH|DELETE)$/i.test(request.method)) {\n        request.headers['X-HTTP-Method-Override'] = request.method;\n        request.method = 'POST';\n    }\n\n    next();\n}\n\nfunction header (request, next) {\n\n    request.method = request.method.toUpperCase();\n    request.headers = assign({}, Http.headers.common, !request.crossOrigin ? Http.headers.custom : {}, Http.headers[request.method.toLowerCase()], request.headers);\n\n    next();\n}\n\n/**\n * Timeout Interceptor.\n */\n\nfunction timeout (request, next) {\n\n    var timeout;\n\n    if (request.timeout) {\n        timeout = setTimeout(function () {\n            request.abort();\n        }, request.timeout);\n    }\n\n    next(function (response) {\n\n        clearTimeout(timeout);\n    });\n}\n\nfunction xhrClient (request) {\n    return new Promise$1(function (resolve) {\n\n        var xhr = new XMLHttpRequest(),\n            handler = function (event) {\n\n            var response = request.respondWith('response' in xhr ? xhr.response : xhr.responseText, {\n                status: xhr.status === 1223 ? 204 : xhr.status, // IE9 status bug\n                statusText: xhr.status === 1223 ? 'No Content' : trim(xhr.statusText),\n                headers: parseHeaders(xhr.getAllResponseHeaders())\n            });\n\n            resolve(response);\n        };\n\n        request.abort = function () {\n            return xhr.abort();\n        };\n\n        xhr.open(request.method, request.getUrl(), true);\n        xhr.timeout = 0;\n        xhr.onload = handler;\n        xhr.onerror = handler;\n\n        if (request.progress) {\n            if (request.method === 'GET') {\n                xhr.addEventListener('progress', request.progress);\n            } else if (/^(POST|PUT)$/i.test(request.method)) {\n                xhr.upload.addEventListener('progress', request.progress);\n            }\n        }\n\n        if (request.credentials === true) {\n            xhr.withCredentials = true;\n        }\n\n        each(request.headers || {}, function (value, header) {\n            xhr.setRequestHeader(header, value);\n        });\n\n        xhr.send(request.getBody());\n    });\n}\n\nfunction parseHeaders(str) {\n\n    var headers = {},\n        value,\n        name,\n        i;\n\n    each(trim(str).split('\\n'), function (row) {\n\n        i = row.indexOf(':');\n        name = trim(row.slice(0, i));\n        value = trim(row.slice(i + 1));\n\n        if (headers[name]) {\n\n            if (isArray(headers[name])) {\n                headers[name].push(value);\n            } else {\n                headers[name] = [headers[name], value];\n            }\n        } else {\n\n            headers[name] = value;\n        }\n    });\n\n    return headers;\n}\n\nfunction Client (context) {\n\n    var reqHandlers = [sendRequest],\n        resHandlers = [],\n        handler;\n\n    if (!isObject(context)) {\n        context = null;\n    }\n\n    function Client(request) {\n        return new Promise$1(function (resolve) {\n\n            function exec() {\n\n                handler = reqHandlers.pop();\n\n                if (isFunction(handler)) {\n                    handler.call(context, request, next);\n                } else {\n                    warn('Invalid interceptor of type ' + typeof handler + ', must be a function');\n                    next();\n                }\n            }\n\n            function next(response) {\n\n                if (isFunction(response)) {\n\n                    resHandlers.unshift(response);\n                } else if (isObject(response)) {\n\n                    resHandlers.forEach(function (handler) {\n                        response = when(response, function (response) {\n                            return handler.call(context, response) || response;\n                        });\n                    });\n\n                    when(response, resolve);\n\n                    return;\n                }\n\n                exec();\n            }\n\n            exec();\n        }, context);\n    }\n\n    Client.use = function (handler) {\n        reqHandlers.push(handler);\n    };\n\n    return Client;\n}\n\nfunction sendRequest(request, resolve) {\n\n    var client = request.client || xhrClient;\n\n    resolve(client(request));\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\n/**\n * HTTP Response.\n */\n\nvar Response = function () {\n    function Response(body, _ref) {\n        var url = _ref.url;\n        var headers = _ref.headers;\n        var status = _ref.status;\n        var statusText = _ref.statusText;\n        classCallCheck(this, Response);\n\n\n        this.url = url;\n        this.body = body;\n        this.headers = headers || {};\n        this.status = status || 0;\n        this.statusText = statusText || '';\n        this.ok = status >= 200 && status < 300;\n    }\n\n    Response.prototype.text = function text() {\n        return this.body;\n    };\n\n    Response.prototype.blob = function blob() {\n        return new Blob([this.body]);\n    };\n\n    Response.prototype.json = function json() {\n        return JSON.parse(this.body);\n    };\n\n    return Response;\n}();\n\nvar Request = function () {\n    function Request(options) {\n        classCallCheck(this, Request);\n\n\n        this.method = 'GET';\n        this.body = null;\n        this.params = {};\n        this.headers = {};\n\n        assign(this, options);\n    }\n\n    Request.prototype.getUrl = function getUrl() {\n        return Url(this);\n    };\n\n    Request.prototype.getBody = function getBody() {\n        return this.body;\n    };\n\n    Request.prototype.respondWith = function respondWith(body, options) {\n        return new Response(body, assign(options || {}, { url: this.getUrl() }));\n    };\n\n    return Request;\n}();\n\n/**\n * Service for sending network requests.\n */\n\nvar CUSTOM_HEADERS = { 'X-Requested-With': 'XMLHttpRequest' };\nvar COMMON_HEADERS = { 'Accept': 'application/json, text/plain, */*' };\nvar JSON_CONTENT_TYPE = { 'Content-Type': 'application/json;charset=utf-8' };\n\nfunction Http(options) {\n\n    var self = this || {},\n        client = Client(self.$vm);\n\n    defaults(options || {}, self.$options, Http.options);\n\n    Http.interceptors.forEach(function (handler) {\n        client.use(handler);\n    });\n\n    return client(new Request(options)).then(function (response) {\n\n        return response.ok ? response : Promise$1.reject(response);\n    }, function (response) {\n\n        if (response instanceof Error) {\n            error(response);\n        }\n\n        return Promise$1.reject(response);\n    });\n}\n\nHttp.options = {};\n\nHttp.headers = {\n    put: JSON_CONTENT_TYPE,\n    post: JSON_CONTENT_TYPE,\n    patch: JSON_CONTENT_TYPE,\n    delete: JSON_CONTENT_TYPE,\n    custom: CUSTOM_HEADERS,\n    common: COMMON_HEADERS\n};\n\nHttp.interceptors = [before, timeout, method, body, jsonp, header, cors];\n\n['get', 'delete', 'head', 'jsonp'].forEach(function (method) {\n\n    Http[method] = function (url, options) {\n        return this(assign(options || {}, { url: url, method: method }));\n    };\n});\n\n['post', 'put', 'patch'].forEach(function (method) {\n\n    Http[method] = function (url, body, options) {\n        return this(assign(options || {}, { url: url, method: method, body: body }));\n    };\n});\n\nfunction Resource(url, params, actions, options) {\n\n    var self = this || {},\n        resource = {};\n\n    actions = assign({}, Resource.actions, actions);\n\n    each(actions, function (action, name) {\n\n        action = merge({ url: url, params: params || {} }, options, action);\n\n        resource[name] = function () {\n            return (self.$http || Http)(opts(action, arguments));\n        };\n    });\n\n    return resource;\n}\n\nfunction opts(action, args) {\n\n    var options = assign({}, action),\n        params = {},\n        body;\n\n    switch (args.length) {\n\n        case 2:\n\n            params = args[0];\n            body = args[1];\n\n            break;\n\n        case 1:\n\n            if (/^(POST|PUT|PATCH)$/i.test(options.method)) {\n                body = args[0];\n            } else {\n                params = args[0];\n            }\n\n            break;\n\n        case 0:\n\n            break;\n\n        default:\n\n            throw 'Expected up to 4 arguments [params, body], got ' + args.length + ' arguments';\n    }\n\n    options.body = body;\n    options.params = assign({}, options.params, params);\n\n    return options;\n}\n\nResource.actions = {\n\n    get: { method: 'GET' },\n    save: { method: 'POST' },\n    query: { method: 'GET' },\n    update: { method: 'PUT' },\n    remove: { method: 'DELETE' },\n    delete: { method: 'DELETE' }\n\n};\n\nfunction plugin(Vue) {\n\n    if (plugin.installed) {\n        return;\n    }\n\n    Util(Vue);\n\n    Vue.url = Url;\n    Vue.http = Http;\n    Vue.resource = Resource;\n    Vue.Promise = Promise$1;\n\n    Object.defineProperties(Vue.prototype, {\n\n        $url: {\n            get: function () {\n                return options(Vue.url, this, this.$options.url);\n            }\n        },\n\n        $http: {\n            get: function () {\n                return options(Vue.http, this, this.$options.http);\n            }\n        },\n\n        $resource: {\n            get: function () {\n                return Vue.resource.bind(this);\n            }\n        },\n\n        $promise: {\n            get: function () {\n                var _this = this;\n\n                return function (executor) {\n                    return new Vue.Promise(executor, _this);\n                };\n            }\n        }\n\n    });\n}\n\nif (typeof window !== 'undefined' && window.Vue) {\n    window.Vue.use(plugin);\n}\n\nmodule.exports = plugin;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 13:
/***/ function(module, exports, __webpack_require__) {

	eval("/*!\n * Vuex v0.6.3\n * (c) 2016 Evan You\n * Released under the MIT License.\n */\n(function (global, factory) {\n   true ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.Vuex = factory());\n}(this, function () { 'use strict';\n\n  var babelHelpers = {};\n  babelHelpers.typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n  };\n\n  babelHelpers.classCallCheck = function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n\n  babelHelpers.createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  babelHelpers.toConsumableArray = function (arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  };\n\n  babelHelpers;\n\n  /**\n   * Merge an array of objects into one.\n   *\n   * @param {Array<Object>} arr\n   * @return {Object}\n   */\n\n  function mergeObjects(arr) {\n    return arr.reduce(function (prev, obj) {\n      Object.keys(obj).forEach(function (key) {\n        var existing = prev[key];\n        if (existing) {\n          // allow multiple mutation objects to contain duplicate\n          // handlers for the same mutation type\n          if (Array.isArray(existing)) {\n            existing.push(obj[key]);\n          } else {\n            prev[key] = [prev[key], obj[key]];\n          }\n        } else {\n          prev[key] = obj[key];\n        }\n      });\n      return prev;\n    }, {});\n  }\n\n  /**\n   * Deep clone an object. Faster than JSON.parse(JSON.stringify()).\n   *\n   * @param {*} obj\n   * @return {*}\n   */\n\n  function deepClone(obj) {\n    if (Array.isArray(obj)) {\n      return obj.map(deepClone);\n    } else if (obj && (typeof obj === 'undefined' ? 'undefined' : babelHelpers.typeof(obj)) === 'object') {\n      var cloned = {};\n      var keys = Object.keys(obj);\n      for (var i = 0, l = keys.length; i < l; i++) {\n        var key = keys[i];\n        cloned[key] = deepClone(obj[key]);\n      }\n      return cloned;\n    } else {\n      return obj;\n    }\n  }\n\n  /**\n   * Hacks to get access to Vue internals.\n   * Maybe we should expose these...\n   */\n\n  var Watcher = void 0;\n  function getWatcher(vm) {\n    if (!Watcher) {\n      var unwatch = vm.$watch('__vuex__', function (a) {\n        return a;\n      });\n      Watcher = vm._watchers[0].constructor;\n      unwatch();\n    }\n    return Watcher;\n  }\n\n  var Dep = void 0;\n  function getDep(vm) {\n    if (!Dep) {\n      Dep = vm._data.__ob__.dep.constructor;\n    }\n    return Dep;\n  }\n\n  var hook = typeof window !== 'undefined' && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n  var devtoolMiddleware = {\n    onInit: function onInit(state, store) {\n      if (!hook) return;\n      hook.emit('vuex:init', store);\n      hook.on('vuex:travel-to-state', function (targetState) {\n        var currentState = store._vm._data;\n        store._dispatching = true;\n        Object.keys(targetState).forEach(function (key) {\n          currentState[key] = targetState[key];\n        });\n        store._dispatching = false;\n      });\n    },\n    onMutation: function onMutation(mutation, state) {\n      if (!hook) return;\n      hook.emit('vuex:mutation', mutation, state);\n    }\n  };\n\n  function override (Vue) {\n    // override init and inject vuex init procedure\n    var _init = Vue.prototype._init;\n    Vue.prototype._init = function () {\n      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n      options.init = options.init ? [vuexInit].concat(options.init) : vuexInit;\n      _init.call(this, options);\n    };\n\n    /**\n     * Vuex init hook, injected into each instances init hooks list.\n     */\n\n    function vuexInit() {\n      var options = this.$options;\n      var store = options.store;\n      var vuex = options.vuex;\n      // store injection\n\n      if (store) {\n        this.$store = store;\n      } else if (options.parent && options.parent.$store) {\n        this.$store = options.parent.$store;\n      }\n      // vuex option handling\n      if (vuex) {\n        if (!this.$store) {\n          console.warn('[vuex] store not injected. make sure to ' + 'provide the store option in your root component.');\n        }\n        var state = vuex.state;\n        var getters = vuex.getters;\n        var actions = vuex.actions;\n        // handle deprecated state option\n\n        if (state && !getters) {\n          console.warn('[vuex] vuex.state option will been deprecated in 1.0. ' + 'Use vuex.getters instead.');\n          getters = state;\n        }\n        // getters\n        if (getters) {\n          options.computed = options.computed || {};\n          for (var key in getters) {\n            defineVuexGetter(this, key, getters[key]);\n          }\n        }\n        // actions\n        if (actions) {\n          options.methods = options.methods || {};\n          for (var _key in actions) {\n            options.methods[_key] = makeBoundAction(this.$store, actions[_key], _key);\n          }\n        }\n      }\n    }\n\n    /**\n     * Setter for all getter properties.\n     */\n\n    function setter() {\n      throw new Error('vuex getter properties are read-only.');\n    }\n\n    /**\n     * Define a Vuex getter on an instance.\n     *\n     * @param {Vue} vm\n     * @param {String} key\n     * @param {Function} getter\n     */\n\n    function defineVuexGetter(vm, key, getter) {\n      if (typeof getter !== 'function') {\n        console.warn('[vuex] Getter bound to key \\'vuex.getters.' + key + '\\' is not a function.');\n      } else {\n        Object.defineProperty(vm, key, {\n          enumerable: true,\n          configurable: true,\n          get: makeComputedGetter(vm.$store, getter),\n          set: setter\n        });\n      }\n    }\n\n    /**\n     * Make a computed getter, using the same caching mechanism of computed\n     * properties. In addition, it is cached on the raw getter function using\n     * the store's unique cache id. This makes the same getter shared\n     * across all components use the same underlying watcher, and makes\n     * the getter evaluated only once during every flush.\n     *\n     * @param {Store} store\n     * @param {Function} getter\n     */\n\n    function makeComputedGetter(store, getter) {\n      var id = store._getterCacheId;\n\n      // cached\n      if (getter[id]) {\n        return getter[id];\n      }\n      var vm = store._vm;\n      var Watcher = getWatcher(vm);\n      var Dep = getDep(vm);\n      var watcher = new Watcher(vm, function (state) {\n        return getter(state);\n      }, null, { lazy: true });\n      var computedGetter = function computedGetter() {\n        if (watcher.dirty) {\n          watcher.evaluate();\n        }\n        if (Dep.target) {\n          watcher.depend();\n        }\n        return watcher.value;\n      };\n      getter[id] = computedGetter;\n      return computedGetter;\n    }\n\n    /**\n     * Make a bound-to-store version of a raw action function.\n     *\n     * @param {Store} store\n     * @param {Function} action\n     * @param {String} key\n     */\n\n    function makeBoundAction(store, action, key) {\n      if (typeof action !== 'function') {\n        console.warn('[vuex] Action bound to key \\'vuex.actions.' + key + '\\' is not a function.');\n      }\n      return function vuexBoundAction() {\n        for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        return action.call.apply(action, [this, store].concat(args));\n      };\n    }\n\n    // option merging\n    var merge = Vue.config.optionMergeStrategies.computed;\n    Vue.config.optionMergeStrategies.vuex = function (toVal, fromVal) {\n      if (!toVal) return fromVal;\n      if (!fromVal) return toVal;\n      return {\n        getters: merge(toVal.getters, fromVal.getters),\n        state: merge(toVal.state, fromVal.state),\n        actions: merge(toVal.actions, fromVal.actions)\n      };\n    };\n  }\n\n  var Vue = void 0;\n  var uid = 0;\n\n  var Store = function () {\n\n    /**\n     * @param {Object} options\n     *        - {Object} state\n     *        - {Object} actions\n     *        - {Object} mutations\n     *        - {Array} middlewares\n     *        - {Boolean} strict\n     */\n\n    function Store() {\n      var _this = this;\n\n      var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n      var _ref$state = _ref.state;\n      var state = _ref$state === undefined ? {} : _ref$state;\n      var _ref$mutations = _ref.mutations;\n      var mutations = _ref$mutations === undefined ? {} : _ref$mutations;\n      var _ref$modules = _ref.modules;\n      var modules = _ref$modules === undefined ? {} : _ref$modules;\n      var _ref$middlewares = _ref.middlewares;\n      var middlewares = _ref$middlewares === undefined ? [] : _ref$middlewares;\n      var _ref$strict = _ref.strict;\n      var strict = _ref$strict === undefined ? false : _ref$strict;\n      babelHelpers.classCallCheck(this, Store);\n\n      this._getterCacheId = 'vuex_store_' + uid++;\n      this._dispatching = false;\n      this._rootMutations = this._mutations = mutations;\n      this._modules = modules;\n      // bind dispatch to self\n      var dispatch = this.dispatch;\n      this.dispatch = function () {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        dispatch.apply(_this, args);\n      };\n      // use a Vue instance to store the state tree\n      // suppress warnings just in case the user has added\n      // some funky global mixins\n      if (!Vue) {\n        throw new Error('[vuex] must call Vue.use(Vuex) before creating a store instance.');\n      }\n      var silent = Vue.config.silent;\n      Vue.config.silent = true;\n      this._vm = new Vue({\n        data: state\n      });\n      Vue.config.silent = silent;\n      this._setupModuleState(state, modules);\n      this._setupModuleMutations(modules);\n      this._setupMiddlewares(middlewares, state);\n      // add extra warnings in strict mode\n      if (strict) {\n        this._setupMutationCheck();\n      }\n    }\n\n    /**\n     * Getter for the entire state tree.\n     * Read only.\n     *\n     * @return {Object}\n     */\n\n    babelHelpers.createClass(Store, [{\n      key: 'dispatch',\n\n\n      /**\n       * Dispatch an action.\n       *\n       * @param {String} type\n       */\n\n      value: function dispatch(type) {\n        for (var _len2 = arguments.length, payload = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          payload[_key2 - 1] = arguments[_key2];\n        }\n\n        var silent = false;\n        // compatibility for object actions, e.g. FSA\n        if ((typeof type === 'undefined' ? 'undefined' : babelHelpers.typeof(type)) === 'object' && type.type && arguments.length === 1) {\n          payload = [type.payload];\n          if (type.silent) silent = true;\n          type = type.type;\n        }\n        var mutation = this._mutations[type];\n        var state = this.state;\n        if (mutation) {\n          this._dispatching = true;\n          // apply the mutation\n          if (Array.isArray(mutation)) {\n            mutation.forEach(function (m) {\n              return m.apply(undefined, [state].concat(babelHelpers.toConsumableArray(payload)));\n            });\n          } else {\n            mutation.apply(undefined, [state].concat(babelHelpers.toConsumableArray(payload)));\n          }\n          this._dispatching = false;\n          if (!silent) this._applyMiddlewares(type, payload);\n        } else {\n          console.warn('[vuex] Unknown mutation: ' + type);\n        }\n      }\n\n      /**\n       * Watch state changes on the store.\n       * Same API as Vue's $watch, except when watching a function,\n       * the function gets the state as the first argument.\n       *\n       * @param {String|Function} expOrFn\n       * @param {Function} cb\n       * @param {Object} [options]\n       */\n\n    }, {\n      key: 'watch',\n      value: function watch(expOrFn, cb, options) {\n        var _this2 = this;\n\n        return this._vm.$watch(function () {\n          return typeof expOrFn === 'function' ? expOrFn(_this2.state) : _this2._vm.$get(expOrFn);\n        }, cb, options);\n      }\n\n      /**\n       * Hot update mutations & modules.\n       *\n       * @param {Object} options\n       *        - {Object} [mutations]\n       *        - {Object} [modules]\n       */\n\n    }, {\n      key: 'hotUpdate',\n      value: function hotUpdate() {\n        var _ref2 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        var mutations = _ref2.mutations;\n        var modules = _ref2.modules;\n\n        this._rootMutations = this._mutations = mutations || this._rootMutations;\n        this._setupModuleMutations(modules || this._modules);\n      }\n\n      /**\n       * Attach sub state tree of each module to the root tree.\n       *\n       * @param {Object} state\n       * @param {Object} modules\n       */\n\n    }, {\n      key: '_setupModuleState',\n      value: function _setupModuleState(state, modules) {\n        Object.keys(modules).forEach(function (key) {\n          Vue.set(state, key, modules[key].state || {});\n        });\n      }\n\n      /**\n       * Bind mutations for each module to its sub tree and\n       * merge them all into one final mutations map.\n       *\n       * @param {Object} updatedModules\n       */\n\n    }, {\n      key: '_setupModuleMutations',\n      value: function _setupModuleMutations(updatedModules) {\n        var modules = this._modules;\n        var allMutations = [this._rootMutations];\n        Object.keys(updatedModules).forEach(function (key) {\n          modules[key] = updatedModules[key];\n        });\n        Object.keys(modules).forEach(function (key) {\n          var module = modules[key];\n          if (!module || !module.mutations) return;\n          // bind mutations to sub state tree\n          var mutations = {};\n          Object.keys(module.mutations).forEach(function (name) {\n            var original = module.mutations[name];\n            mutations[name] = function (state) {\n              for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n                args[_key3 - 1] = arguments[_key3];\n              }\n\n              original.apply(undefined, [state[key]].concat(args));\n            };\n          });\n          allMutations.push(mutations);\n        });\n        this._mutations = mergeObjects(allMutations);\n      }\n\n      /**\n       * Setup mutation check: if the vuex instance's state is mutated\n       * outside of a mutation handler, we throw en error. This effectively\n       * enforces all mutations to the state to be trackable and hot-reloadble.\n       * However, this comes at a run time cost since we are doing a deep\n       * watch on the entire state tree, so it is only enalbed with the\n       * strict option is set to true.\n       */\n\n    }, {\n      key: '_setupMutationCheck',\n      value: function _setupMutationCheck() {\n        var _this3 = this;\n\n        var Watcher = getWatcher(this._vm);\n        /* eslint-disable no-new */\n        new Watcher(this._vm, '$data', function () {\n          if (!_this3._dispatching) {\n            throw new Error('[vuex] Do not mutate vuex store state outside mutation handlers.');\n          }\n        }, { deep: true, sync: true });\n        /* eslint-enable no-new */\n      }\n\n      /**\n       * Setup the middlewares. The devtools middleware is always\n       * included, since it does nothing if no devtool is detected.\n       *\n       * A middleware can demand the state it receives to be\n       * \"snapshots\", i.e. deep clones of the actual state tree.\n       *\n       * @param {Array} middlewares\n       * @param {Object} state\n       */\n\n    }, {\n      key: '_setupMiddlewares',\n      value: function _setupMiddlewares(middlewares, state) {\n        var _this4 = this;\n\n        this._middlewares = [devtoolMiddleware].concat(middlewares);\n        this._needSnapshots = middlewares.some(function (m) {\n          return m.snapshot;\n        });\n        if (this._needSnapshots) {\n          console.log('[vuex] One or more of your middlewares are taking state snapshots ' + 'for each mutation. Make sure to use them only during development.');\n        }\n        var initialSnapshot = this._prevSnapshot = this._needSnapshots ? deepClone(state) : null;\n        // call init hooks\n        this._middlewares.forEach(function (m) {\n          if (m.onInit) {\n            m.onInit(m.snapshot ? initialSnapshot : state, _this4);\n          }\n        });\n      }\n\n      /**\n       * Apply the middlewares on a given mutation.\n       *\n       * @param {String} type\n       * @param {Array} payload\n       */\n\n    }, {\n      key: '_applyMiddlewares',\n      value: function _applyMiddlewares(type, payload) {\n        var _this5 = this;\n\n        var state = this.state;\n        var prevSnapshot = this._prevSnapshot;\n        var snapshot = void 0,\n            clonedPayload = void 0;\n        if (this._needSnapshots) {\n          snapshot = this._prevSnapshot = deepClone(state);\n          clonedPayload = deepClone(payload);\n        }\n        this._middlewares.forEach(function (m) {\n          if (m.onMutation) {\n            if (m.snapshot) {\n              m.onMutation({ type: type, payload: clonedPayload }, snapshot, prevSnapshot, _this5);\n            } else {\n              m.onMutation({ type: type, payload: payload }, state, _this5);\n            }\n          }\n        });\n      }\n    }, {\n      key: 'state',\n      get: function get() {\n        return this._vm._data;\n      },\n      set: function set(v) {\n        throw new Error('[vuex] Vuex root state is read only.');\n      }\n    }]);\n    return Store;\n  }();\n\n  function install(_Vue) {\n    if (Vue) {\n      console.warn('[vuex] already installed. Vue.use(Vuex) should be called only once.');\n      return;\n    }\n    Vue = _Vue;\n    override(Vue);\n  }\n\n  // auto install in dist mode\n  if (typeof window !== 'undefined' && window.Vue) {\n    install(window.Vue);\n  }\n\n  function createLogger() {\n    console.warn('[vuex] Vuex.createLogger has been deprecated.' + 'Use `import createLogger from \\'vuex/logger\\' instead.');\n  }\n\n  var index = {\n    Store: Store,\n    install: install,\n    createLogger: createLogger\n  };\n\n  return index;\n\n}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 56:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery JavaScript Library v2.2.4\n * http://jquery.com/\n *\n * Includes Sizzle.js\n * http://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2016-05-20T17:23Z\n */\n\n(function( global, factory ) {\n\n\tif ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n}(typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Support: Firefox 18+\n// Can't be in strict mode, several libs including ASP.NET trace\n// the stack via arguments.caller.callee and Firefox dies if\n// you try to trace through \"use strict\" call chains. (#13335)\n//\"use strict\";\nvar arr = [];\n\nvar document = window.document;\n\nvar slice = arr.slice;\n\nvar concat = arr.concat;\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar support = {};\n\n\n\nvar\n\tversion = \"2.2.4\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t},\n\n\t// Support: Android<4.1\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\n\t// Matches dashed string for camelizing\n\trmsPrefix = /^-ms-/,\n\trdashAlpha = /-([\\da-z])/gi,\n\n\t// Used by jQuery.camelCase as callback to replace()\n\tfcamelCase = function( all, letter ) {\n\t\treturn letter.toUpperCase();\n\t};\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// Start with an empty selector\n\tselector: \"\",\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\t\treturn num != null ?\n\n\t\t\t// Return just the one element from the set\n\t\t\t( num < 0 ? this[ num + this.length ] : this[ num ] ) :\n\n\t\t\t// Return all the elements in a clean array\n\t\t\tslice.call( this );\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\t\tret.context = this.context;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !jQuery.isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tsrc = target[ name ];\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = jQuery.isArray( copy ) ) ) ) {\n\n\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\tclone = src && jQuery.isArray( src ) ? src : [];\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src && jQuery.isPlainObject( src ) ? src : {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisFunction: function( obj ) {\n\t\treturn jQuery.type( obj ) === \"function\";\n\t},\n\n\tisArray: Array.isArray,\n\n\tisWindow: function( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t},\n\n\tisNumeric: function( obj ) {\n\n\t\t// parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t// adding 1 corrects loss of precision from parseFloat (#15100)\n\t\tvar realStringObj = obj && obj.toString();\n\t\treturn !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;\n\t},\n\n\tisPlainObject: function( obj ) {\n\t\tvar key;\n\n\t\t// Not plain objects:\n\t\t// - Any object or value whose internal [[Class]] property is not \"[object Object]\"\n\t\t// - DOM nodes\n\t\t// - window\n\t\tif ( jQuery.type( obj ) !== \"object\" || obj.nodeType || jQuery.isWindow( obj ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Not own constructor property must be Object\n\t\tif ( obj.constructor &&\n\t\t\t\t!hasOwn.call( obj, \"constructor\" ) &&\n\t\t\t\t!hasOwn.call( obj.constructor.prototype || {}, \"isPrototypeOf\" ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Own properties are enumerated firstly, so to speed up,\n\t\t// if last one is own, then all properties are own\n\t\tfor ( key in obj ) {}\n\n\t\treturn key === undefined || hasOwn.call( obj, key );\n\t},\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\ttype: function( obj ) {\n\t\tif ( obj == null ) {\n\t\t\treturn obj + \"\";\n\t\t}\n\n\t\t// Support: Android<4.0, iOS<6 (functionish RegExp)\n\t\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\t\ttypeof obj;\n\t},\n\n\t// Evaluates a script in a global context\n\tglobalEval: function( code ) {\n\t\tvar script,\n\t\t\tindirect = eval;\n\n\t\tcode = jQuery.trim( code );\n\n\t\tif ( code ) {\n\n\t\t\t// If the code includes a valid, prologue position\n\t\t\t// strict mode pragma, execute code by injecting a\n\t\t\t// script tag into the document.\n\t\t\tif ( code.indexOf( \"use strict\" ) === 1 ) {\n\t\t\t\tscript = document.createElement( \"script\" );\n\t\t\t\tscript.text = code;\n\t\t\t\tdocument.head.appendChild( script ).parentNode.removeChild( script );\n\t\t\t} else {\n\n\t\t\t\t// Otherwise, avoid the DOM node creation, insertion\n\t\t\t\t// and removal by using an indirect global eval\n\n\t\t\t\tindirect( code );\n\t\t\t}\n\t\t}\n\t},\n\n\t// Convert dashed to camelCase; used by the css and data modules\n\t// Support: IE9-11+\n\t// Microsoft forgot to hump their vendor prefix (#9572)\n\tcamelCase: function( string ) {\n\t\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n\t},\n\n\tnodeName: function( elem, name ) {\n\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// Support: Android<4.1\n\ttrim: function( text ) {\n\t\treturn text == null ?\n\t\t\t\"\" :\n\t\t\t( text + \"\" ).replace( rtrim, \"\" );\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn concat.apply( [], ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// Bind a function to a context, optionally partially applying any\n\t// arguments.\n\tproxy: function( fn, context ) {\n\t\tvar tmp, args, proxy;\n\n\t\tif ( typeof context === \"string\" ) {\n\t\t\ttmp = fn[ context ];\n\t\t\tcontext = fn;\n\t\t\tfn = tmp;\n\t\t}\n\n\t\t// Quick check to determine if target is callable, in the spec\n\t\t// this throws a TypeError, but we will just return undefined.\n\t\tif ( !jQuery.isFunction( fn ) ) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Simulated bind\n\t\targs = slice.call( arguments, 2 );\n\t\tproxy = function() {\n\t\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t\t};\n\n\t\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\t\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\t\treturn proxy;\n\t},\n\n\tnow: Date.now,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\n// JSHint would error on this code due to the Symbol not being defined in ES5.\n// Defining this global in .jshintrc would create a danger of using the global\n// unguarded in another place, it seems safer to just disable JSHint for these\n// three lines.\n/* jshint ignore: start */\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n/* jshint ignore: end */\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\nfunction( i, name ) {\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: iOS 8.2 (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = jQuery.type( obj );\n\n\tif ( type === \"function\" || jQuery.isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.2.1\n * http://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2015-10-17\n */\n(function( window ) {\n\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// General-purpose constants\n\tMAX_NEGATIVE = 1 << 31,\n\n\t// Instance methods\n\thasOwn = ({}).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpush_native = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\t// Use a stripped-down indexOf as it's faster than native\n\t// http://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[i] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\tidentifier = \"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace +\n\t\t\"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\" ),\n\n\trattributeQuotes = new RegExp( \"=\" + whitespace + \"*([^\\\\]'\\\"]*?)\" + whitespace + \"*\\\\]\", \"g\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace +\n\t\t\t\"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +\n\t\t\t\"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" +\n\t\t\twhitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\trescape = /'|\\\\/g,\n\n\t// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\" ),\n\tfunescape = function( _, escaped, escapedWhitespace ) {\n\t\tvar high = \"0x\" + escaped - 0x10000;\n\t\t// NaN means non-codepoint\n\t\t// Support: Firefox<24\n\t\t// Workaround erroneous numeric interpretation of +\"0x\"\n\t\treturn high !== high || escapedWhitespace ?\n\t\t\tescaped :\n\t\t\thigh < 0 ?\n\t\t\t\t// BMP codepoint\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t};\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t(arr = slice.call( preferredDoc.childNodes )),\n\t\tpreferredDoc.childNodes\n\t);\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpush_native.apply( target, slice.call(els) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( (target[j++] = els[i++]) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, nidselect, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\n\t\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\n\t\t\tsetDocument( context );\n\t\t}\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( (m = match[1]) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( (elem = context.getElementById( m )) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && (elem = newContext.getElementById( m )) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[2] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( (m = match[3]) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!compilerCache[ selector + \" \" ] &&\n\t\t\t\t(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {\n\n\t\t\t\tif ( nodeType !== 1 ) {\n\t\t\t\t\tnewContext = context;\n\t\t\t\t\tnewSelector = selector;\n\n\t\t\t\t// qSA looks outside Element context, which is not what we want\n\t\t\t\t// Thanks to Andrew Dupont for this workaround technique\n\t\t\t\t// Support: IE <=8\n\t\t\t\t// Exclude object elements\n\t\t\t\t} else if ( context.nodeName.toLowerCase() !== \"object\" ) {\n\n\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\tif ( (nid = context.getAttribute( \"id\" )) ) {\n\t\t\t\t\t\tnid = nid.replace( rescape, \"\\\\$&\" );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontext.setAttribute( \"id\", (nid = expando) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\tnidselect = ridentifier.test( nid ) ? \"#\" + nid : \"[id='\" + nid + \"']\";\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[i] = nidselect + \" \" + toSelector( groups[i] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\t\t\t\t}\n\n\t\t\t\tif ( newSelector ) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn (cache[ key + \" \" ] = value);\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created div and expects a boolean result\n */\nfunction assert( fn ) {\n\tvar div = document.createElement(\"div\");\n\n\ttry {\n\t\treturn !!fn( div );\n\t} catch (e) {\n\t\treturn false;\n\t} finally {\n\t\t// Remove from its parent by default\n\t\tif ( div.parentNode ) {\n\t\t\tdiv.parentNode.removeChild( div );\n\t\t}\n\t\t// release memory in IE\n\t\tdiv = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split(\"|\"),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[i] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\t( ~b.sourceIndex || MAX_NEGATIVE ) -\n\t\t\t( ~a.sourceIndex || MAX_NEGATIVE );\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( (cur = cur.nextSibling) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction(function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction(function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ (j = matchIndexes[i]) ] ) {\n\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\t// documentElement is verified for cases where it doesn't yet exist\n\t// (such as loading iframes in IE - #4833)\n\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\n\treturn documentElement ? documentElement.nodeName !== \"HTML\" : false;\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, parent,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9-11, Edge\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\tif ( (parent = document.defaultView) && parent.top !== parent ) {\n\t\t// Support: IE 11\n\t\tif ( parent.addEventListener ) {\n\t\t\tparent.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( parent.attachEvent ) {\n\t\t\tparent.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert(function( div ) {\n\t\tdiv.className = \"i\";\n\t\treturn !div.getAttribute(\"className\");\n\t});\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert(function( div ) {\n\t\tdiv.appendChild( document.createComment(\"\") );\n\t\treturn !div.getElementsByTagName(\"*\").length;\n\t});\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert(function( div ) {\n\t\tdocElem.appendChild( div ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t});\n\n\t// ID find and filter\n\tif ( support.getById ) {\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar m = context.getElementById( id );\n\t\t\t\treturn m ? [ m ] : [];\n\t\t\t}\n\t\t};\n\t\tExpr.filter[\"ID\"] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\n\t\t\t};\n\t\t};\n\t} else {\n\t\t// Support: IE6/7\n\t\t// getElementById is not reliable as a find shortcut\n\t\tdelete Expr.find[\"ID\"];\n\n\t\tExpr.filter[\"ID\"] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode(\"id\");\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[\"TAG\"] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( (elem = results[i++]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See http://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( (support.qsa = rnative.test( document.querySelectorAll )) ) {\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert(function( div ) {\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// http://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( div ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( div.querySelectorAll(\"[msallowcapture^='']\").length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !div.querySelectorAll(\"[selected]\").length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !div.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push(\"~=\");\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !div.querySelectorAll(\":checked\").length ) {\n\t\t\t\trbuggyQSA.push(\":checked\");\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibing-combinator selector` fails\n\t\t\tif ( !div.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push(\".#.+[+~]\");\n\t\t\t}\n\t\t});\n\n\t\tassert(function( div ) {\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement(\"input\");\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tdiv.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( div.querySelectorAll(\"[name=d]\").length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !div.querySelectorAll(\":enabled\").length ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tdiv.querySelectorAll(\"*,:x\");\n\t\t\trbuggyQSA.push(\",.*:\");\n\t\t});\n\t}\n\n\tif ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector) )) ) {\n\n\t\tassert(function( div ) {\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( div, \"div\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( div, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t});\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\"|\") );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\"|\") );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t));\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( (b = b.parentNode) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\tif ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\t\t\treturn a === document ? -1 :\n\t\t\t\tb === document ? 1 :\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[i] === bp[i] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[i], bp[i] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\tap[i] === preferredDoc ? -1 :\n\t\t\tbp[i] === preferredDoc ? 1 :\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\t// Make sure that attribute selectors are quoted\n\texpr = expr.replace( rattributeQuotes, \"='$1']\" );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!compilerCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch (e) {}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\t// Set document vars if needed\n\tif ( ( context.ownerDocument || context ) !== document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t(val = elem.getAttributeNode(name)) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( (elem = results[i++]) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( (node = elem[i++]) ) {\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[1] = match[1].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[3] = ( match[3] || match[4] || match[5] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[2] === \"~=\" ) {\n\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\tif ( match[1].slice( 0, 3 ) === \"nth\" ) {\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[3] ) {\n\t\t\t\t\tSizzle.error( match[0] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );\n\t\t\t\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );\n\n\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[3] ) {\n\t\t\t\tSizzle.error( match[0] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[6] && match[2];\n\n\t\t\tif ( matchExpr[\"CHILD\"].test( match[0] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[3] ) {\n\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t(excess = tokenize( unquoted, true )) &&\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t(excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[0] = match[0].slice( 0, excess );\n\t\t\t\tmatch[2] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() { return true; } :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t(pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&\n\t\t\t\tclassCache( className, function( elem ) {\n\t\t\t\t\treturn pattern.test( typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\" );\n\t\t\t\t});\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( (node = node[ dir ]) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction(function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[i] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[i] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction(function( selector ) {\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction(function( seed, matches, context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = unmatched[i]) ) {\n\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}) :\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[0] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t}),\n\n\t\t\"has\": markFunction(function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t}),\n\n\t\t\"contains\": markFunction(function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t}),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test(lang || \"\") ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( (elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t}),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": function( elem ) {\n\t\t\treturn elem.disabled === false;\n\t\t},\n\n\t\t\"disabled\": function( elem ) {\n\t\t\treturn elem.disabled === true;\n\t\t},\n\n\t\t\"checked\": function( elem ) {\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[\"empty\"]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo(function() {\n\t\t\treturn [ 0 ];\n\t\t}),\n\n\t\t\"last\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t}),\n\n\t\t\"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t}),\n\n\t\t\"even\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"odd\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t})\n\t}\n};\n\nExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || (match = rcomma.exec( soFar )) ) {\n\t\t\tif ( match ) {\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[0].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( (tokens = []) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( (match = rcombinators.exec( soFar )) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push({\n\t\t\t\tvalue: matched,\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[0].replace( rtrim, \" \" )\n\t\t\t});\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\n\t\t\t\t(match = preFilters[ type ]( match ))) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push({\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t});\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[i].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tcheckNonElements = base && dir === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || (elem[ expando ] = {});\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});\n\n\t\t\t\t\t\tif ( (oldCache = uniqueCache[ dir ]) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn (newCache[ 2 ] = oldCache[ 2 ]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ dir ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[i]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[0];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[i], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (elem = unmatched[i]) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction(function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( (elem = temp[i]) ) {\n\t\t\t\t\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = matcherOut[i]) ) {\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( (matcherIn[i] = elem) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, (matcherOut = []), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( (elem = matcherOut[i]) &&\n\t\t\t\t\t\t(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\n\n\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[0].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[\" \"],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t(checkContext = context).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {\n\t\t\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[j].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" })\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"]( \"*\", outermost ),\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\t\t\t\toutermostContext = context === document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\tif ( !context && elem.ownerDocument !== document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( (matcher = elementMatchers[j++]) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( (elem = !matcher && elem) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( (matcher = setMatchers[j++]) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !(unmatched[i] || setMatched[i]) ) {\n\t\t\t\t\t\t\t\tsetMatched[i] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[i] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( (selector = compiled.selector || selector) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[0] = match[0].slice( 0 );\n\t\tif ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&\n\t\t\t\tsupport.getById && context.nodeType === 9 && documentIsHTML &&\n\t\t\t\tExpr.relative[ tokens[1].type ] ) {\n\n\t\t\tcontext = ( Expr.find[\"ID\"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[i];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ (type = token.type) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( (find = Expr.find[ type ]) ) {\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( (seed = find(\n\t\t\t\t\ttoken.matches[0].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\n\t\t\t\t)) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split(\"\").sort( sortOrder ).join(\"\") === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert(function( div1 ) {\n\t// Should return 1, but returns 4 (following)\n\treturn div1.compareDocumentPosition( document.createElement(\"div\") ) & 1;\n});\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert(function( div ) {\n\tdiv.innerHTML = \"<a href='#'></a>\";\n\treturn div.firstChild.getAttribute(\"href\") === \"#\" ;\n}) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert(function( div ) {\n\tdiv.innerHTML = \"<input/>\";\n\tdiv.firstChild.setAttribute( \"value\", \"\" );\n\treturn div.firstChild.getAttribute( \"value\" ) === \"\";\n}) ) {\n\taddHandle( \"value\", function( elem, name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert(function( div ) {\n\treturn div.getAttribute(\"disabled\") == null;\n}) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t\t(val = elem.getAttributeNode( name )) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\tnull;\n\t\t}\n\t});\n}\n\nreturn Sizzle;\n\n})( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\nvar rsingleTag = ( /^<([\\w-]+)\\s*\\/?>(?:<\\/\\1>|)$/ );\n\n\n\nvar risSimple = /^.[^:#\\[\\.,]*$/;\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( jQuery.isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\t/* jshint -W018 */\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\n\t}\n\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\n\t}\n\n\tif ( typeof qualifier === \"string\" ) {\n\t\tif ( risSimple.test( qualifier ) ) {\n\t\t\treturn jQuery.filter( qualifier, elements, not );\n\t\t}\n\n\t\tqualifier = jQuery.filter( qualifier, elements );\n\t}\n\n\treturn jQuery.grep( elements, function( elem ) {\n\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t} );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\treturn elems.length === 1 && elem.nodeType === 1 ?\n\t\tjQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :\n\t\tjQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\t\treturn elem.nodeType === 1;\n\t\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i,\n\t\t\tlen = this.length,\n\t\t\tret = [],\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\t// Needed because $( selector, context ) becomes $( context ).find( selector )\n\t\tret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );\n\t\tret.selector = this.selector ? this.selector + \" \" + selector : selector;\n\t\treturn ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( jQuery.isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\t// Support: Blackberry 4.6\n\t\t\t\t\t// gEBID returns nodes no longer in the document (#6963)\n\t\t\t\t\tif ( elem && elem.parentNode ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.context = document;\n\t\t\t\t\tthis.selector = selector;\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis.context = this[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( jQuery.isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\tif ( selector.selector !== undefined ) {\n\t\t\tthis.selector = selector.selector;\n\t\t\tthis.context = selector.context;\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\tpos = rneedsContext.test( selectors ) || typeof selectors !== \"string\" ?\n\t\t\t\tjQuery( selectors, context || this.context ) :\n\t\t\t\t0;\n\n\t\tfor ( ; i < l; i++ ) {\n\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t// Always skip document fragments\n\t\t\t\tif ( cur.nodeType < 11 && ( pos ?\n\t\t\t\t\tpos.index( cur ) > -1 :\n\n\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\treturn elem.contentDocument || jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnotwhite = ( /\\S+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( jQuery.isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && jQuery.type( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, listener list, final state\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ), \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ), \"rejected\" ],\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ) ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\tthen: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\t\t\t\t\tvar fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];\n\n\t\t\t\t\t\t\t// deferred[ done | fail | progress ] for forwarding actions to newDefer\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && jQuery.isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis === promise ? newDefer.promise() : this,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Keep pipe for back-compat\n\t\tpromise.pipe = promise.then;\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 3 ];\n\n\t\t\t// promise[ done | fail | progress ] = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add( function() {\n\n\t\t\t\t\t// state = [ resolved | rejected ]\n\t\t\t\t\tstate = stateString;\n\n\t\t\t\t// [ reject_list | resolve_list ].disable; progress_list.lock\n\t\t\t\t}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );\n\t\t\t}\n\n\t\t\t// deferred[ resolve | reject | notify ]\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? promise : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( subordinate /* , ..., subordinateN */ ) {\n\t\tvar i = 0,\n\t\t\tresolveValues = slice.call( arguments ),\n\t\t\tlength = resolveValues.length,\n\n\t\t\t// the count of uncompleted subordinates\n\t\t\tremaining = length !== 1 ||\n\t\t\t\t( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,\n\n\t\t\t// the master Deferred.\n\t\t\t// If resolveValues consist of only a single Deferred, just use that.\n\t\t\tdeferred = remaining === 1 ? subordinate : jQuery.Deferred(),\n\n\t\t\t// Update function for both resolve and progress values\n\t\t\tupdateFunc = function( i, contexts, values ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tcontexts[ i ] = this;\n\t\t\t\t\tvalues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( values === progressValues ) {\n\t\t\t\t\t\tdeferred.notifyWith( contexts, values );\n\t\t\t\t\t} else if ( !( --remaining ) ) {\n\t\t\t\t\t\tdeferred.resolveWith( contexts, values );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tprogressValues, progressContexts, resolveContexts;\n\n\t\t// Add listeners to Deferred subordinates; treat others as resolved\n\t\tif ( length > 1 ) {\n\t\t\tprogressValues = new Array( length );\n\t\t\tprogressContexts = new Array( length );\n\t\t\tresolveContexts = new Array( length );\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {\n\t\t\t\t\tresolveValues[ i ].promise()\n\t\t\t\t\t\t.progress( updateFunc( i, progressContexts, progressValues ) )\n\t\t\t\t\t\t.done( updateFunc( i, resolveContexts, resolveValues ) )\n\t\t\t\t\t\t.fail( deferred.reject );\n\t\t\t\t} else {\n\t\t\t\t\t--remaining;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If we're not waiting on anything, resolve the master\n\t\tif ( !remaining ) {\n\t\t\tdeferred.resolveWith( resolveContexts, resolveValues );\n\t\t}\n\n\t\treturn deferred.promise();\n\t}\n} );\n\n\n// The deferred used on DOM ready\nvar readyList;\n\njQuery.fn.ready = function( fn ) {\n\n\t// Add the callback\n\tjQuery.ready.promise().done( fn );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Hold (or release) the ready event\n\tholdReady: function( hold ) {\n\t\tif ( hold ) {\n\t\t\tjQuery.readyWait++;\n\t\t} else {\n\t\t\tjQuery.ready( true );\n\t\t}\n\t},\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\n\t\t// Trigger any bound ready events\n\t\tif ( jQuery.fn.triggerHandler ) {\n\t\t\tjQuery( document ).triggerHandler( \"ready\" );\n\t\t\tjQuery( document ).off( \"ready\" );\n\t\t}\n\t}\n} );\n\n/**\n * The ready event handler and self cleanup method\n */\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\njQuery.ready.promise = function( obj ) {\n\tif ( !readyList ) {\n\n\t\treadyList = jQuery.Deferred();\n\n\t\t// Catch cases where $(document).ready() is called\n\t\t// after the browser event has already occurred.\n\t\t// Support: IE9-10 only\n\t\t// Older IE sometimes signals \"interactive\" too soon\n\t\tif ( document.readyState === \"complete\" ||\n\t\t\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t\t\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\t\t\twindow.setTimeout( jQuery.ready );\n\n\t\t} else {\n\n\t\t\t// Use the handy event callback\n\t\t\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t\t\t// A fallback to window.onload, that will always work\n\t\t\twindow.addEventListener( \"load\", completed );\n\t\t}\n\t}\n\treturn readyList.promise( obj );\n};\n\n// Kick off the DOM ready check even if the user does not\njQuery.ready.promise();\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( jQuery.type( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !jQuery.isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\tvalue :\n\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn chainable ?\n\t\telems :\n\n\t\t// Gets\n\t\tbulk ?\n\t\t\tfn.call( elems ) :\n\t\t\tlen ? fn( elems[ 0 ], key ) : emptyGet;\n};\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\t/* jshint -W018 */\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tregister: function( owner, initial ) {\n\t\tvar value = initial || {};\n\n\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t// use plain assignment\n\t\tif ( owner.nodeType ) {\n\t\t\towner[ this.expando ] = value;\n\n\t\t// Otherwise secure it in a non-enumerable, non-writable property\n\t\t// configurability must be true to allow the property to be\n\t\t// deleted with the delete operator\n\t\t} else {\n\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\tvalue: value,\n\t\t\t\twritable: true,\n\t\t\t\tconfigurable: true\n\t\t\t} );\n\t\t}\n\t\treturn owner[ this.expando ];\n\t},\n\tcache: function( owner ) {\n\n\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t// but we should not, see #8335.\n\t\t// Always return an empty object.\n\t\tif ( !acceptData( owner ) ) {\n\t\t\treturn {};\n\t\t}\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see #8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ data ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ prop ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\t\t\towner[ this.expando ] && owner[ this.expando ][ key ];\n\t},\n\taccess: function( owner, key, value ) {\n\t\tvar stored;\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\tstored = this.get( owner, key );\n\n\t\t\treturn stored !== undefined ?\n\t\t\t\tstored : this.get( owner, jQuery.camelCase( key ) );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i, name, camel,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key === undefined ) {\n\t\t\tthis.register( owner );\n\n\t\t} else {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( jQuery.isArray( key ) ) {\n\n\t\t\t\t// If \"name\" is an array of keys...\n\t\t\t\t// When data is initially created, via (\"key\", \"val\") signature,\n\t\t\t\t// keys will be converted to camelCase.\n\t\t\t\t// Since there is no way to tell _how_ a key was added, remove\n\t\t\t\t// both plain key and camelCase key. #12786\n\t\t\t\t// This will only penalize the array argument path.\n\t\t\t\tname = key.concat( key.map( jQuery.camelCase ) );\n\t\t\t} else {\n\t\t\t\tcamel = jQuery.camelCase( key );\n\n\t\t\t\t// Try the string as a key before any manipulation\n\t\t\t\tif ( key in cache ) {\n\t\t\t\t\tname = [ key, camel ];\n\t\t\t\t} else {\n\n\t\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\t\tname = camel;\n\t\t\t\t\tname = name in cache ?\n\t\t\t\t\t\t[ name ] : ( name.match( rnotwhite ) || [] );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ti = name.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ name[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <= 35-45+\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://code.google.com/p/chromium/issues/detail?id=378607\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = data === \"true\" ? true :\n\t\t\t\t\tdata === \"false\" ? false :\n\t\t\t\t\tdata === \"null\" ? null :\n\n\t\t\t\t\t// Only convert to a number if it doesn't change the string\n\t\t\t\t\t+data + \"\" === data ? +data :\n\t\t\t\t\trbrace.test( data ) ? jQuery.parseJSON( data ) :\n\t\t\t\t\tdata;\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE11+\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = jQuery.camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data, camelKey;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// with the key as-is\n\t\t\t\tdata = dataUser.get( elem, key ) ||\n\n\t\t\t\t\t// Try to find dashed key if it exists (gh-2779)\n\t\t\t\t\t// This is for 2.2.x only\n\t\t\t\t\tdataUser.get( elem, key.replace( rmultiDash, \"-$&\" ).toLowerCase() );\n\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\tcamelKey = jQuery.camelCase( key );\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// with the key camelized\n\t\t\t\tdata = dataUser.get( elem, camelKey );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, camelKey, undefined );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tcamelKey = jQuery.camelCase( key );\n\t\t\tthis.each( function() {\n\n\t\t\t\t// First, attempt to store a copy or reference of any\n\t\t\t\t// data that might've been store with a camelCased key.\n\t\t\t\tvar data = dataUser.get( this, camelKey );\n\n\t\t\t\t// For HTML5 data-* attribute interop, we have to\n\t\t\t\t// store property names with dashes in a camelCase form.\n\t\t\t\t// This might not apply to all properties...*\n\t\t\t\tdataUser.set( this, camelKey, value );\n\n\t\t\t\t// *... In the case of properties that might _actually_\n\t\t\t\t// have dashes, we need to also store a copy of that\n\t\t\t\t// unchanged property.\n\t\t\t\tif ( key.indexOf( \"-\" ) > -1 && data !== undefined ) {\n\t\t\t\t\tdataUser.set( this, key, value );\n\t\t\t\t}\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || jQuery.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar isHidden = function( elem, el ) {\n\n\t\t// isHidden might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\t\treturn jQuery.css( elem, \"display\" ) === \"none\" ||\n\t\t\t!jQuery.contains( elem.ownerDocument, elem );\n\t};\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted,\n\t\tscale = 1,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() { return tween.cur(); } :\n\t\t\tfunction() { return jQuery.css( elem, prop, \"\" ); },\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = ( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\tdo {\n\n\t\t\t// If previous iteration zeroed out, double until we get *something*.\n\t\t\t// Use string for doubling so we don't accidentally see scale as unchanged below\n\t\t\tscale = scale || \".5\";\n\n\t\t\t// Adjust and apply\n\t\t\tinitialInUnit = initialInUnit / scale;\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Update scale, tolerating zero or NaN from tween.cur()\n\t\t// Break the loop if scale is unchanged or perfect, or if we've just had enough.\n\t\t} while (\n\t\t\tscale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations\n\t\t);\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([\\w:-]+)/ );\n\nvar rscriptType = ( /^$|\\/(?:java|ecma)script/i );\n\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n\t// Support: IE9\n\toption: [ 1, \"<select multiple='multiple'>\", \"</select>\" ],\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\n// Support: IE9\nwrapMap.optgroup = wrapMap.option;\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE9-11+\n\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n\tvar ret = typeof context.getElementsByTagName !== \"undefined\" ?\n\t\t\tcontext.getElementsByTagName( tag || \"*\" ) :\n\t\t\ttypeof context.querySelectorAll !== \"undefined\" ?\n\t\t\t\tcontext.querySelectorAll( tag || \"*\" ) :\n\t\t\t[];\n\n\treturn tag === undefined || tag && jQuery.nodeName( context, tag ) ?\n\t\tjQuery.merge( [ context ], ret ) :\n\t\tret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, contains, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( jQuery.type( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android<4.1, PhantomJS<2\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android<4.1, PhantomJS<2\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tcontains = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( contains ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0-4.3, Safari<=5.1\n\t// Check state lost if the name is set (#11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Safari<=5.1, Android<4.2\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE<=11+\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n} )();\n\n\nvar\n\trkeyEvent = /^key/,\n\trmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n\trtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE9\n// See #13393 for more info\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\n\t\tif ( !elemData ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = {};\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnotwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnotwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( event ) {\n\n\t\t// Make a writable jQuery.Event from the native event object\n\t\tevent = jQuery.event.fix( event );\n\n\t\tvar i, j, ret, matched, handleObj,\n\t\t\thandlerQueue = [],\n\t\t\targs = slice.call( arguments ),\n\t\t\thandlers = ( dataPriv.get( this, \"events\" ) || {} )[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// Triggered event must either 1) have no namespace, or 2) have namespace(s)\n\t\t\t\t// a subset or equal to those in the bound event (both can have no namespace).\n\t\t\t\tif ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, matches, sel, handleObj,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Support (at least): Chrome, IE9\n\t\t// Find delegate handlers\n\t\t// Black-hole SVG <use> instance trees (#13180)\n\t\t//\n\t\t// Support: Firefox<=42+\n\t\t// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)\n\t\tif ( delegateCount && cur.nodeType &&\n\t\t\t( event.type !== \"click\" || isNaN( event.button ) || event.button < 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== \"click\" ) ) {\n\t\t\t\t\tmatches = [];\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matches[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatches[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matches[ sel ] ) {\n\t\t\t\t\t\t\tmatches.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matches.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matches } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\t// Includes some event props shared by KeyEvent and MouseEvent\n\tprops: ( \"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase \" +\n\t\t\"metaKey relatedTarget shiftKey target timeStamp view which\" ).split( \" \" ),\n\n\tfixHooks: {},\n\n\tkeyHooks: {\n\t\tprops: \"char charCode key keyCode\".split( \" \" ),\n\t\tfilter: function( event, original ) {\n\n\t\t\t// Add which for key events\n\t\t\tif ( event.which == null ) {\n\t\t\t\tevent.which = original.charCode != null ? original.charCode : original.keyCode;\n\t\t\t}\n\n\t\t\treturn event;\n\t\t}\n\t},\n\n\tmouseHooks: {\n\t\tprops: ( \"button buttons clientX clientY offsetX offsetY pageX pageY \" +\n\t\t\t\"screenX screenY toElement\" ).split( \" \" ),\n\t\tfilter: function( event, original ) {\n\t\t\tvar eventDoc, doc, body,\n\t\t\t\tbutton = original.button;\n\n\t\t\t// Calculate pageX/Y if missing and clientX/Y available\n\t\t\tif ( event.pageX == null && original.clientX != null ) {\n\t\t\t\teventDoc = event.target.ownerDocument || document;\n\t\t\t\tdoc = eventDoc.documentElement;\n\t\t\t\tbody = eventDoc.body;\n\n\t\t\t\tevent.pageX = original.clientX +\n\t\t\t\t\t( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -\n\t\t\t\t\t( doc && doc.clientLeft || body && body.clientLeft || 0 );\n\t\t\t\tevent.pageY = original.clientY +\n\t\t\t\t\t( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -\n\t\t\t\t\t( doc && doc.clientTop  || body && body.clientTop  || 0 );\n\t\t\t}\n\n\t\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\t\t// Note: button is not normalized, so don't use it\n\t\t\tif ( !event.which && button !== undefined ) {\n\t\t\t\tevent.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );\n\t\t\t}\n\n\t\t\treturn event;\n\t\t}\n\t},\n\n\tfix: function( event ) {\n\t\tif ( event[ jQuery.expando ] ) {\n\t\t\treturn event;\n\t\t}\n\n\t\t// Create a writable copy of the event object and normalize some properties\n\t\tvar i, prop, copy,\n\t\t\ttype = event.type,\n\t\t\toriginalEvent = event,\n\t\t\tfixHook = this.fixHooks[ type ];\n\n\t\tif ( !fixHook ) {\n\t\t\tthis.fixHooks[ type ] = fixHook =\n\t\t\t\trmouseEvent.test( type ) ? this.mouseHooks :\n\t\t\t\trkeyEvent.test( type ) ? this.keyHooks :\n\t\t\t\t{};\n\t\t}\n\t\tcopy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;\n\n\t\tevent = new jQuery.Event( originalEvent );\n\n\t\ti = copy.length;\n\t\twhile ( i-- ) {\n\t\t\tprop = copy[ i ];\n\t\t\tevent[ prop ] = originalEvent[ prop ];\n\t\t}\n\n\t\t// Support: Cordova 2.5 (WebKit) (#13255)\n\t\t// All events should have a target; Cordova deviceready doesn't\n\t\tif ( !event.target ) {\n\t\t\tevent.target = document;\n\t\t}\n\n\t\t// Support: Safari 6.0+, Chrome<28\n\t\t// Target should not be a text node (#504, #13143)\n\t\tif ( event.target.nodeType === 3 ) {\n\t\t\tevent.target = event.target.parentNode;\n\t\t}\n\n\t\treturn fixHook.filter ? fixHook.filter( event, originalEvent ) : event;\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tfocus: {\n\n\t\t\t// Fire native event if possible so blur/focus sequence is correct\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this !== safeActiveElement() && this.focus ) {\n\t\t\t\t\tthis.focus();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusin\"\n\t\t},\n\t\tblur: {\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this === safeActiveElement() && this.blur ) {\n\t\t\t\t\tthis.blur();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusout\"\n\t\t},\n\t\tclick: {\n\n\t\t\t// For checkbox, fire native event so checked state will be right\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this.type === \"checkbox\" && this.click && jQuery.nodeName( this, \"input\" ) ) {\n\t\t\t\t\tthis.click();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, don't fire native .click() on links\n\t\t\t_default: function( event ) {\n\t\t\t\treturn jQuery.nodeName( event.target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android<4.0\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || jQuery.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://code.google.com/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:-]+)[^>]*)\\/>/gi,\n\n\t// Support: IE 10-11, Edge 10240+\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trscriptTypeMasked = /^true\\/(.*)/,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n// Manipulating tables requires a tbody\nfunction manipulationTarget( elem, content ) {\n\treturn jQuery.nodeName( elem, \"table\" ) &&\n\t\tjQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ?\n\n\t\telem.getElementsByTagName( \"tbody\" )[ 0 ] ||\n\t\t\telem.appendChild( elem.ownerDocument.createElement( \"tbody\" ) ) :\n\t\telem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tvar match = rscriptTypeMasked.exec( elem.type );\n\n\tif ( match ) {\n\t\telem.type = match[ 1 ];\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.access( src );\n\t\tpdataCur = dataPriv.set( dest, pdataOld );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdelete pdataCur.handle;\n\t\t\tpdataCur.events = {};\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = concat.apply( [], args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tisFunction = jQuery.isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( isFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( isFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android<4.1, PhantomJS<2\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjQuery.globalEval( node.textContent.replace( rcleanScript, \"\" ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && jQuery.contains( node.ownerDocument, node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html.replace( rxhtmlTag, \"<$1></$2>\" );\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <= 35-45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <= 35-45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\n\t// Keep domManip exposed until 3.0 (gh-2225)\n\tdomManip: domManip,\n\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: QtWebKit\n\t\t\t// .get() because push.apply(_, arraylike) throws\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\n\n\nvar iframe,\n\telemdisplay = {\n\n\t\t// Support: Firefox\n\t\t// We have to pre-define these values for FF (#10227)\n\t\tHTML: \"block\",\n\t\tBODY: \"block\"\n\t};\n\n/**\n * Retrieve the actual display of a element\n * @param {String} name nodeName of the element\n * @param {Object} doc Document object\n */\n\n// Called only from within defaultDisplay\nfunction actualDisplay( name, doc ) {\n\tvar elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),\n\n\t\tdisplay = jQuery.css( elem[ 0 ], \"display\" );\n\n\t// We don't have any data stored on the element,\n\t// so use \"detach\" method as fast way to get rid of the element\n\telem.detach();\n\n\treturn display;\n}\n\n/**\n * Try to determine the default display value of an element\n * @param {String} nodeName\n */\nfunction defaultDisplay( nodeName ) {\n\tvar doc = document,\n\t\tdisplay = elemdisplay[ nodeName ];\n\n\tif ( !display ) {\n\t\tdisplay = actualDisplay( nodeName, doc );\n\n\t\t// If the simple way fails, read from inside an iframe\n\t\tif ( display === \"none\" || !display ) {\n\n\t\t\t// Use the already-created iframe if possible\n\t\t\tiframe = ( iframe || jQuery( \"<iframe frameborder='0' width='0' height='0'/>\" ) )\n\t\t\t\t.appendTo( doc.documentElement );\n\n\t\t\t// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse\n\t\t\tdoc = iframe[ 0 ].contentDocument;\n\n\t\t\t// Support: IE\n\t\t\tdoc.write();\n\t\t\tdoc.close();\n\n\t\t\tdisplay = actualDisplay( nodeName, doc );\n\t\t\tiframe.detach();\n\t\t}\n\n\t\t// Store the correct default display\n\t\telemdisplay[ nodeName ] = display;\n\t}\n\n\treturn display;\n}\nvar rmargin = ( /^margin/ );\n\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE<=11+, Firefox<=30+ (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\nvar swap = function( elem, options, callback, args ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.apply( elem, args || [] );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\nvar documentElement = document.documentElement;\n\n\n\n( function() {\n\tvar pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE9-11+\n\t// Style of cloned element affects source element cloned (#8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tcontainer.style.cssText = \"border:0;width:8px;height:0;top:0;left:-9999px;\" +\n\t\t\"padding:0;margin-top:1px;position:absolute\";\n\tcontainer.appendChild( div );\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\t\tdiv.style.cssText =\n\n\t\t\t// Support: Firefox<29, Android 2.3\n\t\t\t// Vendor-prefix box-sizing\n\t\t\t\"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;\" +\n\t\t\t\"position:relative;display:block;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"top:1%;width:50%\";\n\t\tdiv.innerHTML = \"\";\n\t\tdocumentElement.appendChild( container );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\t\treliableMarginLeftVal = divStyle.marginLeft === \"2px\";\n\t\tboxSizingReliableVal = divStyle.width === \"4px\";\n\n\t\t// Support: Android 4.0 - 4.3 only\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.marginRight = \"50%\";\n\t\tpixelMarginRightVal = divStyle.marginRight === \"4px\";\n\n\t\tdocumentElement.removeChild( container );\n\t}\n\n\tjQuery.extend( support, {\n\t\tpixelPosition: function() {\n\n\t\t\t// This test is executed only once but we still do memoizing\n\t\t\t// since we can use the boxSizingReliable pre-computing.\n\t\t\t// No need to check if the test was already performed, though.\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\tboxSizingReliable: function() {\n\t\t\tif ( boxSizingReliableVal == null ) {\n\t\t\t\tcomputeStyleTests();\n\t\t\t}\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelMarginRight: function() {\n\n\t\t\t// Support: Android 4.0-4.3\n\t\t\t// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal\n\t\t\t// since that compresses better and they're computed together anyway.\n\t\t\tif ( boxSizingReliableVal == null ) {\n\t\t\t\tcomputeStyleTests();\n\t\t\t}\n\t\t\treturn pixelMarginRightVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\n\t\t\t// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37\n\t\t\tif ( boxSizingReliableVal == null ) {\n\t\t\t\tcomputeStyleTests();\n\t\t\t}\n\t\t\treturn reliableMarginLeftVal;\n\t\t},\n\t\treliableMarginRight: function() {\n\n\t\t\t// Support: Android 2.3\n\t\t\t// Check if div with explicit width and no margin-right incorrectly\n\t\t\t// gets computed margin-right based on width of container. (#3333)\n\t\t\t// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\n\t\t\t// This support function is only executed once so no memoizing is needed.\n\t\t\tvar ret,\n\t\t\t\tmarginDiv = div.appendChild( document.createElement( \"div\" ) );\n\n\t\t\t// Reset CSS: box-sizing; display; margin; border; padding\n\t\t\tmarginDiv.style.cssText = div.style.cssText =\n\n\t\t\t\t// Support: Android 2.3\n\t\t\t\t// Vendor-prefix box-sizing\n\t\t\t\t\"-webkit-box-sizing:content-box;box-sizing:content-box;\" +\n\t\t\t\t\"display:block;margin:0;border:0;padding:0\";\n\t\t\tmarginDiv.style.marginRight = marginDiv.style.width = \"0\";\n\t\t\tdiv.style.width = \"1px\";\n\t\t\tdocumentElement.appendChild( container );\n\n\t\t\tret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );\n\n\t\t\tdocumentElement.removeChild( container );\n\t\t\tdiv.removeChild( marginDiv );\n\n\t\t\treturn ret;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\tret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;\n\n\t// Support: Opera 12.1x only\n\t// Fall back to style even without computed\n\t// computed is undefined for elems on document fragments\n\tif ( ( ret === \"\" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {\n\t\tret = jQuery.style( elem, name );\n\t}\n\n\t// Support: IE9\n\t// getPropertyValue is only needed for .css('filter') (#12537)\n\tif ( computed ) {\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// http://dev.w3.org/csswg/cssom/#resolved-values\n\t\tif ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE9-11+\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t},\n\n\tcssPrefixes = [ \"Webkit\", \"O\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style;\n\n// Return a css property mapped to a potentially vendor prefixed property\nfunction vendorPropName( name ) {\n\n\t// Shortcut for names that are not vendor prefixed\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\nfunction setPositiveNumber( elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {\n\tvar i = extra === ( isBorderBox ? \"border\" : \"content\" ) ?\n\n\t\t// If we already have the right measurement, avoid augmentation\n\t\t4 :\n\n\t\t// Otherwise initialize for horizontal or vertical properties\n\t\tname === \"width\" ? 1 : 0,\n\n\t\tval = 0;\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin, so add it if we want it\n\t\tif ( extra === \"margin\" ) {\n\t\t\tval += jQuery.css( elem, extra + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\tif ( isBorderBox ) {\n\n\t\t\t// border-box includes padding, so remove it if we want content\n\t\t\tif ( extra === \"content\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// At this point, extra isn't border nor margin, so remove border\n\t\t\tif ( extra !== \"margin\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t} else {\n\n\t\t\t// At this point, extra isn't content, so add padding\n\t\t\tval += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// At this point, extra isn't content nor padding, so add border\n\t\t\tif ( extra !== \"padding\" ) {\n\t\t\t\tval += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn val;\n}\n\nfunction getWidthOrHeight( elem, name, extra ) {\n\n\t// Start with offset property, which is equivalent to the border-box value\n\tvar valueIsBorderBox = true,\n\t\tval = name === \"width\" ? elem.offsetWidth : elem.offsetHeight,\n\t\tstyles = getStyles( elem ),\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t// Some non-html elements return undefined for offsetWidth, so check for null/undefined\n\t// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285\n\t// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668\n\tif ( val <= 0 || val == null ) {\n\n\t\t// Fall back to computed then uncomputed css if necessary\n\t\tval = curCSS( elem, name, styles );\n\t\tif ( val < 0 || val == null ) {\n\t\t\tval = elem.style[ name ];\n\t\t}\n\n\t\t// Computed unit is not pixels. Stop here and return.\n\t\tif ( rnumnonpx.test( val ) ) {\n\t\t\treturn val;\n\t\t}\n\n\t\t// Check for style in case a browser which returns unreliable values\n\t\t// for getComputedStyle silently falls back to the reliable elem.style\n\t\tvalueIsBorderBox = isBorderBox &&\n\t\t\t( support.boxSizingReliable() || val === elem.style[ name ] );\n\n\t\t// Normalize \"\", auto, and prepare for extra\n\t\tval = parseFloat( val ) || 0;\n\t}\n\n\t// Use the active box-sizing model to add/subtract irrelevant styles\n\treturn ( val +\n\t\taugmentWidthOrHeight(\n\t\t\telem,\n\t\t\tname,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles\n\t\t)\n\t) + \"px\";\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem, hidden,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tvalues[ index ] = dataPriv.get( elem, \"olddisplay\" );\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Reset the inline display of this element to learn if it is\n\t\t\t// being hidden by cascaded rules or not\n\t\t\tif ( !values[ index ] && display === \"none\" ) {\n\t\t\t\telem.style.display = \"\";\n\t\t\t}\n\n\t\t\t// Set elements which have been overridden with display: none\n\t\t\t// in a stylesheet to whatever the default browser style is\n\t\t\t// for such an element\n\t\t\tif ( elem.style.display === \"\" && isHidden( elem ) ) {\n\t\t\t\tvalues[ index ] = dataPriv.access(\n\t\t\t\t\telem,\n\t\t\t\t\t\"olddisplay\",\n\t\t\t\t\tdefaultDisplay( elem.nodeName )\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\thidden = isHidden( elem );\n\n\t\t\tif ( display !== \"none\" || !hidden ) {\n\t\t\t\tdataPriv.set(\n\t\t\t\t\telem,\n\t\t\t\t\t\"olddisplay\",\n\t\t\t\t\thidden ? display : jQuery.css( elem, \"display\" )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of most of the elements in a second loop\n\t// to avoid the constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( !show || elem.style.display === \"none\" || elem.style.display === \"\" ) {\n\t\t\telem.style.display = show ? values[ index ] || \"\" : \"none\";\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {\n\t\t\"float\": \"cssFloat\"\n\t},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = jQuery.camelCase( name ),\n\t\t\tstyle = elem.style;\n\n\t\tname = jQuery.cssProps[ origName ] ||\n\t\t\t( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\tif ( type === \"number\" ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tstyle[ name ] = value;\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = jQuery.camelCase( name );\n\n\t\t// Make sure that we're working with the right name\n\t\tname = jQuery.cssProps[ origName ] ||\n\t\t\t( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( i, name ) {\n\tjQuery.cssHooks[ name ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\t\t\t\t\telem.offsetWidth === 0 ?\n\t\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\t\treturn getWidthOrHeight( elem, name, extra );\n\t\t\t\t\t\t} ) :\n\t\t\t\t\t\tgetWidthOrHeight( elem, name, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = extra && getStyles( elem ),\n\t\t\t\tsubtract = extra && augmentWidthOrHeight(\n\t\t\t\t\telem,\n\t\t\t\t\tname,\n\t\t\t\t\textra,\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\t\tstyles\n\t\t\t\t);\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ name ] = value;\n\t\t\t\tvalue = jQuery.css( elem, name );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// Support: Android 2.3\njQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn swap( elem, { \"display\": \"inline-block\" },\n\t\t\t\tcurCSS, [ elem, \"marginRight\" ] );\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( !rmargin.test( prefix ) ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( jQuery.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t},\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHidden( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 &&\n\t\t\t\t( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||\n\t\t\t\t\tjQuery.cssHooks[ tween.prop ] ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE9\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back Compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, timerId,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = jQuery.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4 ; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\t/* jshint validthis: true */\n\tvar prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHidden( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Handle queue: false promises\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Height/width overflow pass\n\tif ( elem.nodeType === 1 && ( \"height\" in props || \"width\" in props ) ) {\n\n\t\t// Make sure that nothing sneaks out\n\t\t// Record all 3 overflow attributes because IE9-10 do not\n\t\t// change the overflow attribute when overflowX and\n\t\t// overflowY are set to the same value\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Set display property to inline-block for height/width\n\t\t// animations on inline elements that are having width/height animated\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\n\t\t// Test default display if display is currently \"none\"\n\t\tcheckDisplay = display === \"none\" ?\n\t\t\tdataPriv.get( elem, \"olddisplay\" ) || defaultDisplay( elem.nodeName ) : display;\n\n\t\tif ( checkDisplay === \"inline\" && jQuery.css( elem, \"float\" ) === \"none\" ) {\n\t\t\tstyle.display = \"inline-block\";\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// show/hide pass\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.exec( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// If there is dataShow left over from a stopped hide or show\n\t\t\t\t// and we are going to proceed with show, we should pretend to be hidden\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\n\t\t// Any non-fx value stops us from restoring the original display value\n\t\t} else {\n\t\t\tdisplay = undefined;\n\t\t}\n\t}\n\n\tif ( !jQuery.isEmptyObject( orig ) ) {\n\t\tif ( dataShow ) {\n\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\thidden = dataShow.hidden;\n\t\t\t}\n\t\t} else {\n\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", {} );\n\t\t}\n\n\t\t// Store state if its toggle - enables .stop().toggle() to \"reverse\"\n\t\tif ( toggle ) {\n\t\t\tdataShow.hidden = !hidden;\n\t\t}\n\t\tif ( hidden ) {\n\t\t\tjQuery( elem ).show();\n\t\t} else {\n\t\t\tanim.done( function() {\n\t\t\t\tjQuery( elem ).hide();\n\t\t\t} );\n\t\t}\n\t\tanim.done( function() {\n\t\t\tvar prop;\n\n\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\tfor ( prop in orig ) {\n\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t}\n\t\t} );\n\t\tfor ( prop in orig ) {\n\t\t\ttween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\n\t\t\tif ( !( prop in dataShow ) ) {\n\t\t\t\tdataShow[ prop ] = tween.start;\n\t\t\t\tif ( hidden ) {\n\t\t\t\t\ttween.end = tween.start;\n\t\t\t\t\ttween.start = prop === \"width\" || prop === \"height\" ? 1 : 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t// If this is a noop like .hide().hide(), restore an overwritten display value\n\t} else if ( ( display === \"none\" ? defaultDisplay( elem.nodeName ) : display ) === \"inline\" ) {\n\t\tstyle.display = display;\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = jQuery.camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( jQuery.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length ; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t} else {\n\t\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length ; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length ; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( jQuery.isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tjQuery.proxy( result.stop, result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( jQuery.isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\t// attach callbacks from options\n\treturn animation.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( jQuery.isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnotwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length ; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tjQuery.isFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !jQuery.isFunction( easing ) && easing\n\t};\n\n\topt.duration = jQuery.fx.off ? 0 : typeof opt.duration === \"number\" ?\n\t\topt.duration : opt.duration in jQuery.fx.speeds ?\n\t\t\tjQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( jQuery.isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHidden ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue && type !== false ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = jQuery.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Checks the timer has not already been removed\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tif ( timer() ) {\n\t\tjQuery.fx.start();\n\t} else {\n\t\tjQuery.timers.pop();\n\t}\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( !timerId ) {\n\t\ttimerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );\n\t}\n};\n\njQuery.fx.stop = function() {\n\twindow.clearInterval( timerId );\n\n\ttimerId = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: iOS<=5.1, Android<=4.2+\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE<=11+\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: Android<=2.3\n\t// Options inside disabled selects are incorrectly marked as disabled\n\tselect.disabled = true;\n\tsupport.optDisabled = !opt.disabled;\n\n\t// Support: IE<=11+\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// All attributes are lowercase\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\tname = name.toLowerCase();\n\t\t\thooks = jQuery.attrHooks[ name ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tjQuery.nodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name, propName,\n\t\t\ti = 0,\n\t\t\tattrNames = value && value.match( rnotwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\tpropName = jQuery.propFix[ name ] || name;\n\n\t\t\t\t// Boolean attributes get special treatment (#10870)\n\t\t\t\tif ( jQuery.expr.match.bool.test( name ) ) {\n\n\t\t\t\t\t// Set corresponding property to false\n\t\t\t\t\telem[ propName ] = false;\n\t\t\t\t}\n\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle;\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ name ];\n\t\t\tattrHandle[ name ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tname.toLowerCase() :\n\t\t\t\tnull;\n\t\t\tattrHandle[ name ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\treturn tabindex ?\n\t\t\t\t\tparseInt( tabindex, 10 ) :\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\t\trclickable.test( elem.nodeName ) && elem.href ?\n\t\t\t\t\t\t\t0 :\n\t\t\t\t\t\t\t-1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\nvar rclass = /[\\t\\r\\n\\f]/g;\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof value === \"string\" && value ) {\n\t\t\tclasses = value.match( rnotwhite ) || [];\n\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 &&\n\t\t\t\t\t( \" \" + curValue + \" \" ).replace( rclass, \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = jQuery.trim( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tif ( typeof value === \"string\" && value ) {\n\t\t\tclasses = value.match( rnotwhite ) || [];\n\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 &&\n\t\t\t\t\t( \" \" + curValue + \" \" ).replace( rclass, \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = jQuery.trim( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value;\n\n\t\tif ( typeof stateVal === \"boolean\" && type === \"string\" ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\tif ( type === \"string\" ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\ti = 0;\n\t\t\t\tself = jQuery( this );\n\t\t\t\tclassNames = value.match( rnotwhite ) || [];\n\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + getClass( elem ) + \" \" ).replace( rclass, \" \" )\n\t\t\t\t\t.indexOf( className ) > -1\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g,\n\trspaces = /[\\x20\\t\\r\\n\\f]+/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, isFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\treturn typeof ret === \"string\" ?\n\n\t\t\t\t\t// Handle most common string cases\n\t\t\t\t\tret.replace( rreturn, \"\" ) :\n\n\t\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\t\tret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tisFunction = jQuery.isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( isFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( jQuery.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE10-11+\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tjQuery.trim( jQuery.text( elem ) ).replace( rspaces, \" \" );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\" || index < 0,\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length,\n\t\t\t\t\ti = index < 0 ?\n\t\t\t\t\t\tmax :\n\t\t\t\t\t\tone ? index : 0;\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t( support.optDisabled ?\n\t\t\t\t\t\t\t\t!option.disabled : option.getAttribute( \"disabled\" ) === null ) &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!jQuery.nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( jQuery.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || {} )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\tif ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\t\t\t\t\telem[ type ]();\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\njQuery.each( ( \"blur focus focusin focusout load resize scroll unload click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup error contextmenu\" ).split( \" \" ),\n\tfunction( i, name ) {\n\n\t// Handle event binding\n\tjQuery.fn[ name ] = function( data, fn ) {\n\t\treturn arguments.length > 0 ?\n\t\t\tthis.on( name, null, data, fn ) :\n\t\t\tthis.trigger( name );\n\t};\n} );\n\njQuery.fn.extend( {\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\n\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\n// Support: Firefox\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome, Safari\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = jQuery.now();\n\nvar rquery = ( /\\?/ );\n\n\n\n// Support: Android 2.3\n// Workaround failure to string-cast null input\njQuery.parseJSON = function( data ) {\n\treturn JSON.parse( data + \"\" );\n};\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE9\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trhash = /#.*$/,\n\trts = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\toriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];\n\n\t\tif ( jQuery.isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": jQuery.parseJSON,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// The jqXHR state\n\t\t\tstate = 0,\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( state === 2 ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match;\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn state === 2 ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tvar lname = name.toLowerCase();\n\t\t\t\t\tif ( !state ) {\n\t\t\t\t\t\tname = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( !state ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( state < 2 ) {\n\t\t\t\t\t\t\tfor ( code in map ) {\n\n\t\t\t\t\t\t\t\t// Lazy-add the new callback in a way that preserves old ones\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR ).complete = completeDeferred.add;\n\t\tjqXHR.success = jqXHR.done;\n\t\tjqXHR.error = jqXHR.fail;\n\n\t\t// Remove hash character (#7531: and string promotion)\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" ).replace( rhash, \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = jQuery.trim( s.dataType || \"*\" ).toLowerCase().match( rnotwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE8-11+\n\t\t\t// IE throws exception if url is malformed, e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE8-11+\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( state === 2 ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\tcacheURL = s.url;\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// If data is available, append data to url\n\t\t\tif ( s.data ) {\n\t\t\t\tcacheURL = ( s.url += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data );\n\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add anti-cache in url if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\ts.url = rts.test( cacheURL ) ?\n\n\t\t\t\t\t// If there is already a '_' parameter, set its value\n\t\t\t\t\tcacheURL.replace( rts, \"$1_=\" + nonce++ ) :\n\n\t\t\t\t\t// Otherwise add one to the end\n\t\t\t\t\tcacheURL + ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + nonce++;\n\t\t\t}\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tfor ( i in { success: 1, error: 1, complete: 1 } ) {\n\t\t\tjqXHR[ i ]( s[ i ] );\n\t\t}\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( state === 2 ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tstate = 1;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Propagate exception as error if not done\n\t\t\t\tif ( state < 2 ) {\n\t\t\t\t\tdone( -1, e );\n\n\t\t\t\t// Simply rethrow otherwise\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Called once\n\t\t\tif ( state === 2 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// State is \"done\" now\n\t\t\tstate = 2;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( jQuery.isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\n\njQuery._evalUrl = function( url ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tasync: false,\n\t\tglobal: false,\n\t\t\"throws\": true\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapAll( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( this[ 0 ] ) {\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar isFunction = jQuery.isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function() {\n\t\treturn this.parent().each( function() {\n\t\t\tif ( !jQuery.nodeName( this, \"body\" ) ) {\n\t\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t\t}\n\t\t} ).end();\n\t}\n} );\n\n\njQuery.expr.filters.hidden = function( elem ) {\n\treturn !jQuery.expr.filters.visible( elem );\n};\njQuery.expr.filters.visible = function( elem ) {\n\n\t// Support: Opera <= 12.12\n\t// Opera reports offsetWidths and offsetHeights less than zero on some elements\n\t// Use OR instead of AND as the element is not visible if either is true\n\t// See tickets #10406 and #13132\n\treturn elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;\n};\n\n\n\n\nvar r20 = /%20/g,\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( jQuery.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && jQuery.type( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, value ) {\n\n\t\t\t// If value is a function, invoke it and return its value\n\t\t\tvalue = jQuery.isFunction( value ) ? value() : ( value == null ? \"\" : value );\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" + encodeURIComponent( value );\n\t\t};\n\n\t// Set traditional to true for jQuery <= 1.3.2 behavior.\n\tif ( traditional === undefined ) {\n\t\ttraditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;\n\t}\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" ).replace( r20, \"+\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} )\n\t\t.filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} )\n\t\t.map( function( i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\treturn val == null ?\n\t\t\t\tnull :\n\t\t\t\tjQuery.isArray( val ) ?\n\t\t\t\t\tjQuery.map( val, function( val ) {\n\t\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t\t} ) :\n\t\t\t\t\t{ name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE9\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE9\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = callback( \"error\" );\n\n\t\t\t\t// Support: IE9\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain requests\n\tif ( s.crossDomain ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" ).prop( {\n\t\t\t\t\tcharset: s.scriptCharset,\n\t\t\t\t\tsrc: s.url\n\t\t\t\t} ).on(\n\t\t\t\t\t\"load error\",\n\t\t\t\t\tcallback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && jQuery.isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\tcontext = context || document;\n\n\tvar parsed = rsingleTag.exec( data ),\n\t\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n// Keep a copy of the old load method\nvar _load = jQuery.fn.load;\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tif ( typeof url !== \"string\" && _load ) {\n\t\treturn _load.apply( this, arguments );\n\t}\n\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = jQuery.trim( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( jQuery.isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\n// Attach a bunch of functions for handling common AJAX events\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.expr.filters.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\n/**\n * Gets a window from an element\n */\nfunction getWindow( elem ) {\n\treturn jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;\n}\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( jQuery.isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\toffset: function( options ) {\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar docElem, win,\n\t\t\telem = this[ 0 ],\n\t\t\tbox = { top: 0, left: 0 },\n\t\t\tdoc = elem && elem.ownerDocument;\n\n\t\tif ( !doc ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdocElem = doc.documentElement;\n\n\t\t// Make sure it's not a disconnected DOM node\n\t\tif ( !jQuery.contains( docElem, elem ) ) {\n\t\t\treturn box;\n\t\t}\n\n\t\tbox = elem.getBoundingClientRect();\n\t\twin = getWindow( doc );\n\t\treturn {\n\t\t\ttop: box.top + win.pageYOffset - docElem.clientTop,\n\t\t\tleft: box.left + win.pageXOffset - docElem.clientLeft\n\t\t};\n\t},\n\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// Fixed elements are offset from window (parentOffset = {top:0, left: 0},\n\t\t// because it is its only offset parent\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume getBoundingClientRect is there when computed position is fixed\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\n\t\t\t// Get *real* offsetParent\n\t\t\toffsetParent = this.offsetParent();\n\n\t\t\t// Get correct offsets\n\t\t\toffset = this.offset();\n\t\t\tif ( !jQuery.nodeName( offsetParent[ 0 ], \"html\" ) ) {\n\t\t\t\tparentOffset = offsetParent.offset();\n\t\t\t}\n\n\t\t\t// Add offsetParent borders\n\t\t\tparentOffset.top += jQuery.css( offsetParent[ 0 ], \"borderTopWidth\", true );\n\t\t\tparentOffset.left += jQuery.css( offsetParent[ 0 ], \"borderLeftWidth\", true );\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\t\t\tvar win = getWindow( elem );\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari<7-8+, Chrome<37-44+\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name },\n\t\tfunction( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( jQuery.isWindow( elem ) ) {\n\n\t\t\t\t\t// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there\n\t\t\t\t\t// isn't a whole lot we can do. See pull request at this URL for discussion:\n\t\t\t\t\t// https://github.com/jquery/jquery/pull/764\n\t\t\t\t\treturn elem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable, null );\n\t\t};\n\t} );\n} );\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t},\n\tsize: function() {\n\t\treturn this.length;\n\t}\n} );\n\njQuery.fn.andSelf = jQuery.fn.addBack;\n\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( true ) {\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t\treturn jQuery;\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( !noGlobal ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\nreturn jQuery;\n}));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 206:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                   * @preserve jQuery DateTimePicker plugin v2.3.4\n                                                                                                                                                                                                                                                   * @homepage http://xdsoft.net/jqplugins/datetimepicker/\n                                                                                                                                                                                                                                                   * (c) 2014, Chupurnov Valeriy.\n                                                                                                                                                                                                                                                   */\n\n\nvar _jquery = __webpack_require__(56);\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(function ($) {\n  'use strict';\n\n  var default_options = {\n    i18n: {\n      bg: { // Bulgarian\n        months: [\"Януари\", \"Февруари\", \"Март\", \"Април\", \"Май\", \"Юни\", \"Юли\", \"Август\", \"Септември\", \"Октомври\", \"Ноември\", \"Декември\"],\n        dayOfWeek: [\"Нд\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"]\n      },\n      fa: { // Persian/Farsi\n        months: ['فروردین', 'اردیبهشت', 'خرداد', 'تیر', 'مرداد', 'شهریور', 'مهر', 'آبان', 'آذر', 'دی', 'بهمن', 'اسفند'],\n        dayOfWeek: ['یکشنبه', 'دوشنبه', 'سه شنبه', 'چهارشنبه', 'پنجشنبه', 'جمعه', 'شنبه']\n      },\n      ru: { // Russian\n        months: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],\n        dayOfWeek: [\"Вск\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"]\n      },\n      uk: { // Ukrainian\n        months: ['Січень', 'Лютий', 'Березень', 'Квітень', 'Травень', 'Червень', 'Липень', 'Серпень', 'Вересень', 'Жовтень', 'Листопад', 'Грудень'],\n        dayOfWeek: [\"Ндл\", \"Пнд\", \"Втр\", \"Срд\", \"Чтв\", \"Птн\", \"Сбт\"]\n      },\n      en: { // English\n        months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n        dayOfWeek: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]\n      },\n      el: { // Ελληνικά\n        months: [\"Ιανουάριος\", \"Φεβρουάριος\", \"Μάρτιος\", \"Απρίλιος\", \"Μάιος\", \"Ιούνιος\", \"Ιούλιος\", \"Αύγουστος\", \"Σεπτέμβριος\", \"Οκτώβριος\", \"Νοέμβριος\", \"Δεκέμβριος\"],\n        dayOfWeek: [\"Κυρ\", \"Δευ\", \"Τρι\", \"Τετ\", \"Πεμ\", \"Παρ\", \"Σαβ\"]\n      },\n      de: { // German\n        months: ['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'],\n        dayOfWeek: [\"So\", \"Mo\", \"Di\", \"Mi\", \"Do\", \"Fr\", \"Sa\"]\n      },\n      nl: { // Dutch\n        months: [\"januari\", \"februari\", \"maart\", \"april\", \"mei\", \"juni\", \"juli\", \"augustus\", \"september\", \"oktober\", \"november\", \"december\"],\n        dayOfWeek: [\"zo\", \"ma\", \"di\", \"wo\", \"do\", \"vr\", \"za\"]\n      },\n      tr: { // Turkish\n        months: [\"Ocak\", \"Şubat\", \"Mart\", \"Nisan\", \"Mayıs\", \"Haziran\", \"Temmuz\", \"Ağustos\", \"Eylül\", \"Ekim\", \"Kasım\", \"Aralık\"],\n        dayOfWeek: [\"Paz\", \"Pts\", \"Sal\", \"Çar\", \"Per\", \"Cum\", \"Cts\"]\n      },\n      fr: { //French\n        months: [\"Janvier\", \"Février\", \"Mars\", \"Avril\", \"Mai\", \"Juin\", \"Juillet\", \"Août\", \"Septembre\", \"Octobre\", \"Novembre\", \"Décembre\"],\n        dayOfWeek: [\"Dim\", \"Lun\", \"Mar\", \"Mer\", \"Jeu\", \"Ven\", \"Sam\"]\n      },\n      es: { // Spanish\n        months: [\"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"],\n        dayOfWeek: [\"Dom\", \"Lun\", \"Mar\", \"Mié\", \"Jue\", \"Vie\", \"Sáb\"]\n      },\n      th: { // Thai\n        months: ['มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน', 'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม'],\n        dayOfWeek: ['อา.', 'จ.', 'อ.', 'พ.', 'พฤ.', 'ศ.', 'ส.']\n      },\n      pl: { // Polish\n        months: [\"styczeń\", \"luty\", \"marzec\", \"kwiecień\", \"maj\", \"czerwiec\", \"lipiec\", \"sierpień\", \"wrzesień\", \"październik\", \"listopad\", \"grudzień\"],\n        dayOfWeek: [\"nd\", \"pn\", \"wt\", \"śr\", \"cz\", \"pt\", \"sb\"]\n      },\n      pt: { // Portuguese\n        months: [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"],\n        dayOfWeek: [\"Dom\", \"Seg\", \"Ter\", \"Qua\", \"Qui\", \"Sex\", \"Sab\"]\n      },\n      ch: { // Simplified Chinese\n        months: [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\"],\n        dayOfWeek: [\"日\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\"]\n      },\n      se: { // Swedish\n        months: [\"Januari\", \"Februari\", \"Mars\", \"April\", \"Maj\", \"Juni\", \"Juli\", \"Augusti\", \"September\", \"Oktober\", \"November\", \"December\"],\n        dayOfWeek: [\"Sön\", \"Mån\", \"Tis\", \"Ons\", \"Tor\", \"Fre\", \"Lör\"]\n      },\n      kr: { // Korean\n        months: [\"1월\", \"2월\", \"3월\", \"4월\", \"5월\", \"6월\", \"7월\", \"8월\", \"9월\", \"10월\", \"11월\", \"12월\"],\n        dayOfWeek: [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"]\n      },\n      it: { // Italian\n        months: [\"Gennaio\", \"Febbraio\", \"Marzo\", \"Aprile\", \"Maggio\", \"Giugno\", \"Luglio\", \"Agosto\", \"Settembre\", \"Ottobre\", \"Novembre\", \"Dicembre\"],\n        dayOfWeek: [\"Dom\", \"Lun\", \"Mar\", \"Mer\", \"Gio\", \"Ven\", \"Sab\"]\n      },\n      da: { // Dansk\n        months: [\"January\", \"Februar\", \"Marts\", \"April\", \"Maj\", \"Juni\", \"July\", \"August\", \"September\", \"Oktober\", \"November\", \"December\"],\n        dayOfWeek: [\"Søn\", \"Man\", \"Tir\", \"Ons\", \"Tor\", \"Fre\", \"Lør\"]\n      },\n      no: { // Norwegian\n        months: [\"Januar\", \"Februar\", \"Mars\", \"April\", \"Mai\", \"Juni\", \"Juli\", \"August\", \"September\", \"Oktober\", \"November\", \"Desember\"],\n        dayOfWeek: [\"Søn\", \"Man\", \"Tir\", \"Ons\", \"Tor\", \"Fre\", \"Lør\"]\n      },\n      ja: { // Japanese\n        months: [\"1月\", \"2月\", \"3月\", \"4月\", \"5月\", \"6月\", \"7月\", \"8月\", \"9月\", \"10月\", \"11月\", \"12月\"],\n        dayOfWeek: [\"日\", \"月\", \"火\", \"水\", \"木\", \"金\", \"土\"]\n      },\n      vi: { // Vietnamese\n        months: [\"Tháng 1\", \"Tháng 2\", \"Tháng 3\", \"Tháng 4\", \"Tháng 5\", \"Tháng 6\", \"Tháng 7\", \"Tháng 8\", \"Tháng 9\", \"Tháng 10\", \"Tháng 11\", \"Tháng 12\"],\n        dayOfWeek: [\"CN\", \"T2\", \"T3\", \"T4\", \"T5\", \"T6\", \"T7\"]\n      },\n      sl: { // Slovenščina\n        months: [\"Januar\", \"Februar\", \"Marec\", \"April\", \"Maj\", \"Junij\", \"Julij\", \"Avgust\", \"September\", \"Oktober\", \"November\", \"December\"],\n        dayOfWeek: [\"Ned\", \"Pon\", \"Tor\", \"Sre\", \"Čet\", \"Pet\", \"Sob\"]\n      },\n      cs: { // Čeština\n        months: [\"Leden\", \"Únor\", \"Březen\", \"Duben\", \"Květen\", \"Červen\", \"Červenec\", \"Srpen\", \"Září\", \"Říjen\", \"Listopad\", \"Prosinec\"],\n        dayOfWeek: [\"Ne\", \"Po\", \"Út\", \"St\", \"Čt\", \"Pá\", \"So\"]\n      },\n      hu: { // Hungarian\n        months: [\"Január\", \"Február\", \"Március\", \"Április\", \"Május\", \"Június\", \"Július\", \"Augusztus\", \"Szeptember\", \"Október\", \"November\", \"December\"],\n        dayOfWeek: [\"Va\", \"Hé\", \"Ke\", \"Sze\", \"Cs\", \"Pé\", \"Szo\"]\n      }\n    },\n    value: '',\n    lang: 'en',\n\n    format: 'Y/m/d H:i',\n    formatTime: 'H:i',\n    formatDate: 'Y/m/d',\n\n    startDate: false, // new Date(), '1986/12/08', '-1970/01/05','-1970/01/05', \n\n    step: 60,\n    monthChangeSpinner: true,\n    closeOnDateSelect: false,\n    closeOnWithoutClick: true,\n    closeOnInputClick: true,\n\n    timepicker: true,\n    datepicker: true,\n    weeks: false,\n\n    defaultTime: false, // use formatTime format (ex. '10:00' for formatTime:   'H:i')\n    defaultDate: false, // use formatDate format (ex new Date() or '1986/12/08' or '-1970/01/05' or '-1970/01/05')\n\n    minDate: false,\n    maxDate: false,\n    minTime: false,\n    maxTime: false,\n\n    allowTimes: [],\n    opened: false,\n    initTime: true,\n    inline: false,\n\n    onSelectDate: function onSelectDate() {},\n    onSelectTime: function onSelectTime() {},\n    onChangeMonth: function onChangeMonth() {},\n    onChangeDateTime: function onChangeDateTime() {},\n    onShow: function onShow() {},\n    onClose: function onClose() {},\n    onGenerate: function onGenerate() {},\n\n    withoutCopyright: true,\n\n    inverseButton: false,\n    hours12: false,\n    next: 'xdsoft_next',\n    prev: 'xdsoft_prev',\n    dayOfWeekStart: 0,\n\n    timeHeightInTimePicker: 25,\n    timepickerScrollbar: true,\n\n    todayButton: true, // 2.1.0\n    defaultSelect: true, // 2.1.0\n\n    scrollMonth: true,\n    scrollTime: true,\n    scrollInput: true,\n\n    lazyInit: false,\n\n    mask: false,\n    validateOnBlur: true,\n    allowBlank: true,\n\n    yearStart: 1950,\n    yearEnd: 2050,\n\n    style: '',\n    id: '',\n\n    fixed: false,\n\n    roundTime: 'round', // ceil, floor\n    className: '',\n\n    weekends: [],\n    yearOffset: 0,\n    beforeShowDay: null\n  };\n\n  // fix for ie8\n  if (!Array.prototype.indexOf) {\n    Array.prototype.indexOf = function (obj, start) {\n      for (var i = start || 0, j = this.length; i < j; i++) {\n        if (this[i] === obj) {\n          return i;\n        }\n      }\n      return -1;\n    };\n  }\n\n  Date.prototype.countDaysInMonth = function () {\n    return new Date(this.getFullYear(), this.getMonth() + 1, 0).getDate();\n  };\n\n  $.fn.xdsoftScroller = function (_percent) {\n    return this.each(function () {\n      var timeboxparent = $(this);\n      if (!$(this).hasClass('xdsoft_scroller_box')) {\n        var pointerEventToXY = function pointerEventToXY(e) {\n          var out = {\n            x: 0,\n            y: 0\n          };\n          if (e.type == 'touchstart' || e.type == 'touchmove' || e.type == 'touchend' || e.type == 'touchcancel') {\n            var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];\n            out.x = touch.pageX;\n            out.y = touch.pageY;\n          } else if (e.type == 'mousedown' || e.type == 'mouseup' || e.type == 'mousemove' || e.type == 'mouseover' || e.type == 'mouseout' || e.type == 'mouseenter' || e.type == 'mouseleave') {\n            out.x = e.pageX;\n            out.y = e.pageY;\n          }\n          return out;\n        },\n            move = 0,\n            timebox = timeboxparent.children().eq(0),\n            parentHeight = timeboxparent[0].clientHeight,\n            height = timebox[0].offsetHeight,\n            scrollbar = $('<div class=\"xdsoft_scrollbar\"></div>'),\n            scroller = $('<div class=\"xdsoft_scroller\"></div>'),\n            maximumOffset = 100,\n            start = false;\n\n        scrollbar.append(scroller);\n\n        timeboxparent.addClass('xdsoft_scroller_box').append(scrollbar);\n        scroller.on('mousedown.xdsoft_scroller', function (event) {\n          if (!parentHeight) timeboxparent.trigger('resize_scroll.xdsoft_scroller', [_percent]);\n          var pageY = event.pageY,\n              top = parseInt(scroller.css('margin-top')),\n              h1 = scrollbar[0].offsetHeight;\n          $(document.body).addClass('xdsoft_noselect');\n          $([document.body, window]).on('mouseup.xdsoft_scroller', function arguments_callee() {\n            $([document.body, window]).off('mouseup.xdsoft_scroller', arguments_callee).off('mousemove.xdsoft_scroller', move).removeClass('xdsoft_noselect');\n          });\n          $(document.body).on('mousemove.xdsoft_scroller', move = function move(event) {\n            var offset = event.pageY - pageY + top;\n            if (offset < 0) offset = 0;\n            if (offset + scroller[0].offsetHeight > h1) offset = h1 - scroller[0].offsetHeight;\n            timeboxparent.trigger('scroll_element.xdsoft_scroller', [maximumOffset ? offset / maximumOffset : 0]);\n          });\n        });\n\n        timeboxparent.on('scroll_element.xdsoft_scroller', function (event, percent) {\n          if (!parentHeight) timeboxparent.trigger('resize_scroll.xdsoft_scroller', [percent, true]);\n          percent = percent > 1 ? 1 : percent < 0 || isNaN(percent) ? 0 : percent;\n          scroller.css('margin-top', maximumOffset * percent);\n          timebox.css('marginTop', -parseInt((height - parentHeight) * percent));\n        }).on('resize_scroll.xdsoft_scroller', function (event, _percent, noTriggerScroll) {\n          parentHeight = timeboxparent[0].clientHeight;\n          height = timebox[0].offsetHeight;\n          var percent = parentHeight / height,\n              sh = percent * scrollbar[0].offsetHeight;\n          if (percent > 1) scroller.hide();else {\n            scroller.show();\n            scroller.css('height', parseInt(sh > 10 ? sh : 10));\n            maximumOffset = scrollbar[0].offsetHeight - scroller[0].offsetHeight;\n            if (noTriggerScroll !== true) timeboxparent.trigger('scroll_element.xdsoft_scroller', [_percent ? _percent : Math.abs(parseInt(timebox.css('marginTop'))) / (height - parentHeight)]);\n          }\n        });\n        timeboxparent.mousewheel && timeboxparent.mousewheel(function (event, delta, deltaX, deltaY) {\n          var top = Math.abs(parseInt(timebox.css('marginTop')));\n          timeboxparent.trigger('scroll_element.xdsoft_scroller', [(top - delta * 20) / (height - parentHeight)]);\n          event.stopPropagation();\n          return false;\n        });\n        timeboxparent.on('touchstart', function (event) {\n          start = pointerEventToXY(event);\n        });\n        timeboxparent.on('touchmove', function (event) {\n          if (start) {\n            var coord = pointerEventToXY(event),\n                top = Math.abs(parseInt(timebox.css('marginTop')));\n            timeboxparent.trigger('scroll_element.xdsoft_scroller', [(top - (coord.y - start.y)) / (height - parentHeight)]);\n            event.stopPropagation();\n            event.preventDefault();\n            start = pointerEventToXY(event);\n          }\n        });\n        timeboxparent.on('touchend touchcancel', function (event) {\n          start = false;\n        });\n      }\n      timeboxparent.trigger('resize_scroll.xdsoft_scroller', [_percent]);\n    });\n  };\n  $.fn.datetimepicker = function (opt) {\n    var KEY0 = 48,\n        KEY9 = 57,\n        _KEY0 = 96,\n        _KEY9 = 105,\n        CTRLKEY = 17,\n        DEL = 46,\n        ENTER = 13,\n        ESC = 27,\n        BACKSPACE = 8,\n        ARROWLEFT = 37,\n        ARROWUP = 38,\n        ARROWRIGHT = 39,\n        ARROWDOWN = 40,\n        TAB = 9,\n        F5 = 116,\n        AKEY = 65,\n        CKEY = 67,\n        VKEY = 86,\n        ZKEY = 90,\n        YKEY = 89,\n        ctrlDown = false,\n        options = $.isPlainObject(opt) || !opt ? $.extend(true, {}, default_options, opt) : $.extend({}, default_options),\n        lazyInitTimer = 0,\n        lazyInit = function lazyInit(input) {\n      input.on('open.xdsoft focusin.xdsoft mousedown.xdsoft', function initOnActionCallback(event) {\n        if (input.is(':disabled') || input.is(':hidden') || !input.is(':visible') || input.data('xdsoft_datetimepicker')) return;\n\n        clearTimeout(lazyInitTimer);\n\n        lazyInitTimer = setTimeout(function () {\n\n          if (!input.data('xdsoft_datetimepicker')) createDateTimePicker(input);\n\n          input.off('open.xdsoft focusin.xdsoft mousedown.xdsoft', initOnActionCallback).trigger('open.xdsoft');\n        }, 100);\n      });\n    },\n        createDateTimePicker = function createDateTimePicker(input) {\n\n      var datetimepicker = $('<div ' + (options.id ? 'id=\"' + options.id + '\"' : '') + ' ' + (options.style ? 'style=\"' + options.style + '\"' : '') + ' class=\"xdsoft_datetimepicker xdsoft_noselect ' + (options.weeks ? ' xdsoft_showweeks' : '') + options.className + '\"></div>'),\n          xdsoft_copyright = $('<div class=\"xdsoft_copyright\"><a target=\"_blank\" href=\"http://xdsoft.net/jqplugins/datetimepicker/\">xdsoft.net</a></div>'),\n          datepicker = $('<div class=\"xdsoft_datepicker active\"></div>'),\n          mounth_picker = $('<div class=\"xdsoft_mounthpicker\"><button type=\"button\" class=\"xdsoft_prev\"></button><button type=\"button\" class=\"xdsoft_today_button\"></button><div class=\"xdsoft_label xdsoft_month\"><span></span></div><div class=\"xdsoft_label xdsoft_year\"><span></span></div><button type=\"button\" class=\"xdsoft_next\"></button></div>'),\n          calendar = $('<div class=\"xdsoft_calendar\"></div>'),\n          timepicker = $('<div class=\"xdsoft_timepicker active\"><button type=\"button\" class=\"xdsoft_prev\"></button><div class=\"xdsoft_time_box\"></div><button type=\"button\" class=\"xdsoft_next\"></button></div>'),\n          timeboxparent = timepicker.find('.xdsoft_time_box').eq(0),\n          timebox = $('<div class=\"xdsoft_time_variant\"></div>'),\n          scrollbar = $('<div class=\"xdsoft_scrollbar\"></div>'),\n          scroller = $('<div class=\"xdsoft_scroller\"></div>'),\n          monthselect = $('<div class=\"xdsoft_select xdsoft_monthselect\"><div></div></div>'),\n          yearselect = $('<div class=\"xdsoft_select xdsoft_yearselect\"><div></div></div>');\n\n      //constructor lego\n      mounth_picker.find('.xdsoft_month span').after(monthselect);\n      mounth_picker.find('.xdsoft_year span').after(yearselect);\n\n      mounth_picker.find('.xdsoft_month,.xdsoft_year').on('mousedown.xdsoft', function (event) {\n        mounth_picker.find('.xdsoft_select').hide();\n\n        var select = $(this).find('.xdsoft_select').eq(0),\n            val = 0,\n            top = 0;\n\n        if (_xdsoft_datetime.currentTime) val = _xdsoft_datetime.currentTime[$(this).hasClass('xdsoft_month') ? 'getMonth' : 'getFullYear']();\n\n        select.show();\n\n        for (var items = select.find('div.xdsoft_option'), i = 0; i < items.length; i++) {\n          if (items.eq(i).data('value') == val) {\n            break;\n          } else top += items[0].offsetHeight;\n        }\n\n        select.xdsoftScroller(top / (select.children()[0].offsetHeight - select[0].clientHeight));\n        event.stopPropagation();\n\n        return false;\n      });\n\n      mounth_picker.find('.xdsoft_select').xdsoftScroller().on('mousedown.xdsoft', function (event) {\n        event.stopPropagation();\n        event.preventDefault();\n      }).on('mousedown.xdsoft', '.xdsoft_option', function (event) {\n        if (_xdsoft_datetime && _xdsoft_datetime.currentTime) _xdsoft_datetime.currentTime[$(this).parent().parent().hasClass('xdsoft_monthselect') ? 'setMonth' : 'setFullYear']($(this).data('value'));\n\n        $(this).parent().parent().hide();\n\n        datetimepicker.trigger('xchange.xdsoft');\n        options.onChangeMonth && options.onChangeMonth.call && options.onChangeMonth.call(datetimepicker, _xdsoft_datetime.currentTime, datetimepicker.data('input'));\n      });\n\n      // set options\n      datetimepicker.setOptions = function (_options) {\n        options = $.extend(true, {}, options, _options);\n\n        if (_options.allowTimes && $.isArray(_options.allowTimes) && _options.allowTimes.length) {\n          options['allowTimes'] = $.extend(true, [], _options.allowTimes);\n        }\n\n        if (_options.weekends && $.isArray(_options.weekends) && _options.weekends.length) {\n          options['weekends'] = $.extend(true, [], _options.weekends);\n        }\n\n        if ((options.open || options.opened) && !options.inline) {\n          input.trigger('open.xdsoft');\n        }\n\n        if (options.inline) {\n          triggerAfterOpen = true;\n          datetimepicker.addClass('xdsoft_inline');\n          input.after(datetimepicker).hide();\n        }\n\n        if (options.inverseButton) {\n          options.next = 'xdsoft_prev';\n          options.prev = 'xdsoft_next';\n        }\n\n        if (options.datepicker) datepicker.addClass('active');else datepicker.removeClass('active');\n\n        if (options.timepicker) timepicker.addClass('active');else timepicker.removeClass('active');\n\n        if (options.value) {\n          input && input.val && input.val(options.value);\n          _xdsoft_datetime.setCurrentTime(options.value);\n        }\n\n        if (isNaN(options.dayOfWeekStart)) options.dayOfWeekStart = 0;else options.dayOfWeekStart = parseInt(options.dayOfWeekStart) % 7;\n\n        if (!options.timepickerScrollbar) scrollbar.hide();\n\n        if (options.minDate && /^-(.*)$/.test(options.minDate)) {\n          options.minDate = _xdsoft_datetime.strToDateTime(options.minDate).dateFormat(options.formatDate);\n        }\n\n        if (options.maxDate && /^\\+(.*)$/.test(options.maxDate)) {\n          options.maxDate = _xdsoft_datetime.strToDateTime(options.maxDate).dateFormat(options.formatDate);\n        }\n\n        mounth_picker.find('.xdsoft_today_button').css('visibility', !options.todayButton ? 'hidden' : 'visible');\n\n        if (options.mask) {\n          var e,\n              getCaretPos = function getCaretPos(input) {\n            try {\n              if (document.selection && document.selection.createRange) {\n                var range = document.selection.createRange();\n                return range.getBookmark().charCodeAt(2) - 2;\n              } else if (input.setSelectionRange) return input.selectionStart;\n            } catch (e) {\n              return 0;\n            }\n          },\n              setCaretPos = function setCaretPos(node, pos) {\n            node = typeof node == \"string\" || node instanceof String ? document.getElementById(node) : node;\n            if (!node) {\n              return false;\n            } else if (node.createTextRange) {\n              var textRange = node.createTextRange();\n              textRange.collapse(true);\n              textRange.moveEnd(pos);\n              textRange.moveStart(pos);\n              textRange.select();\n              return true;\n            } else if (node.setSelectionRange) {\n              node.setSelectionRange(pos, pos);\n              return true;\n            }\n            return false;\n          },\n              isValidValue = function isValidValue(mask, value) {\n            var reg = mask.replace(/([\\[\\]\\/\\{\\}\\(\\)\\-\\.\\+]{1})/g, '\\\\$1').replace(/_/g, '{digit+}').replace(/([0-9]{1})/g, '{digit$1}').replace(/\\{digit([0-9]{1})\\}/g, '[0-$1_]{1}').replace(/\\{digit[\\+]\\}/g, '[0-9_]{1}');\n            return RegExp(reg).test(value);\n          };\n          input.off('keydown.xdsoft');\n          switch (true) {\n            case options.mask === true:\n\n              options.mask = options.format.replace(/Y/g, '9999').replace(/F/g, '9999').replace(/m/g, '19').replace(/d/g, '39').replace(/H/g, '29').replace(/i/g, '59').replace(/s/g, '59');\n\n            case $.type(options.mask) == 'string':\n\n              if (!isValidValue(options.mask, input.val())) input.val(options.mask.replace(/[0-9]/g, '_'));\n\n              input.on('keydown.xdsoft', function (event) {\n                var val = this.value,\n                    key = event.which;\n\n                switch (true) {\n                  case key >= KEY0 && key <= KEY9 || key >= _KEY0 && key <= _KEY9 || key == BACKSPACE || key == DEL:\n                    var pos = getCaretPos(this),\n                        digit = key != BACKSPACE && key != DEL ? String.fromCharCode(_KEY0 <= key && key <= _KEY9 ? key - KEY0 : key) : '_';\n\n                    if ((key == BACKSPACE || key == DEL) && pos) {\n                      pos--;\n                      digit = '_';\n                    }\n\n                    while (/[^0-9_]/.test(options.mask.substr(pos, 1)) && pos < options.mask.length && pos > 0) {\n                      pos += key == BACKSPACE || key == DEL ? -1 : 1;\n                    }val = val.substr(0, pos) + digit + val.substr(pos + 1);\n                    if ($.trim(val) == '') {\n                      val = options.mask.replace(/[0-9]/g, '_');\n                    } else {\n                      if (pos == options.mask.length) break;\n                    }\n\n                    pos += key == BACKSPACE || key == DEL ? 0 : 1;\n                    while (/[^0-9_]/.test(options.mask.substr(pos, 1)) && pos < options.mask.length && pos > 0) {\n                      pos += key == BACKSPACE || key == DEL ? -1 : 1;\n                    }if (isValidValue(options.mask, val)) {\n                      this.value = val;\n                      setCaretPos(this, pos);\n                    } else if ($.trim(val) == '') this.value = options.mask.replace(/[0-9]/g, '_');else {\n                      input.trigger('error_input.xdsoft');\n                    }\n                    break;\n                  case !!~[AKEY, CKEY, VKEY, ZKEY, YKEY].indexOf(key) && ctrlDown:\n                  case !!~[ESC, ARROWUP, ARROWDOWN, ARROWLEFT, ARROWRIGHT, F5, CTRLKEY, TAB, ENTER].indexOf(key):\n                    return true;\n                }\n                event.preventDefault();\n                return false;\n              });\n              break;\n          }\n        }\n        if (options.validateOnBlur) {\n          input.off('blur.xdsoft').on('blur.xdsoft', function () {\n            if (options.allowBlank && !$.trim($(this).val()).length) {\n              $(this).val(null);\n              datetimepicker.data('xdsoft_datetime').empty();\n            } else if (!Date.parseDate($(this).val(), options.format)) {\n              $(this).val(_xdsoft_datetime.now().dateFormat(options.format));\n              datetimepicker.data('xdsoft_datetime').setCurrentTime($(this).val());\n            } else {\n              datetimepicker.data('xdsoft_datetime').setCurrentTime($(this).val());\n            }\n            datetimepicker.trigger('changedatetime.xdsoft');\n          });\n        }\n        options.dayOfWeekStartPrev = options.dayOfWeekStart == 0 ? 6 : options.dayOfWeekStart - 1;\n\n        datetimepicker.trigger('xchange.xdsoft').trigger('afterOpen.xdsoft');\n      };\n\n      datetimepicker.data('options', options).on('mousedown.xdsoft', function (event) {\n        event.stopPropagation();\n        event.preventDefault();\n        yearselect.hide();\n        monthselect.hide();\n        return false;\n      });\n\n      var scroll_element = timepicker.find('.xdsoft_time_box');\n      scroll_element.append(timebox);\n      scroll_element.xdsoftScroller();\n\n      datetimepicker.on('afterOpen.xdsoft', function () {\n        scroll_element.xdsoftScroller();\n      });\n\n      datetimepicker.append(datepicker).append(timepicker);\n\n      if (options.withoutCopyright !== true) datetimepicker.append(xdsoft_copyright);\n\n      datepicker.append(mounth_picker).append(calendar);\n\n      $('body').append(datetimepicker);\n\n      var _xdsoft_datetime = new function () {\n        var _this = this;\n        _this.now = function (norecursion) {\n          var d = new Date();\n\n          if (!norecursion && options.defaultDate) {\n            var date = _this.strtodate(options.defaultDate);\n            d.setFullYear(date.getFullYear());\n            d.setMonth(date.getMonth());\n            d.setDate(date.getDate());\n          }\n\n          if (options.yearOffset) {\n            d.setFullYear(d.getFullYear() + options.yearOffset);\n          }\n\n          if (!norecursion && options.defaultTime) {\n            var time = _this.strtotime(options.defaultTime);\n            d.setHours(time.getHours());\n            d.setMinutes(time.getMinutes());\n          }\n\n          return d;\n        };\n\n        _this.isValidDate = function (d) {\n          if (Object.prototype.toString.call(d) !== \"[object Date]\") return false;\n          return !isNaN(d.getTime());\n        };\n\n        _this.setCurrentTime = function (dTime) {\n          _this.currentTime = typeof dTime == 'string' ? _this.strToDateTime(dTime) : _this.isValidDate(dTime) ? dTime : _this.now();\n          datetimepicker.trigger('xchange.xdsoft');\n        };\n\n        _this.empty = function () {\n          _this.currentTime = null;\n        };\n\n        _this.getCurrentTime = function (dTime) {\n          return _this.currentTime;\n        };\n\n        _this.nextMonth = function () {\n          var month = _this.currentTime.getMonth() + 1;\n          if (month == 12) {\n            _this.currentTime.setFullYear(_this.currentTime.getFullYear() + 1);\n            month = 0;\n          }\n          _this.currentTime.setDate(Math.min(Date.daysInMonth[month], _this.currentTime.getDate()));\n          _this.currentTime.setMonth(month);\n          options.onChangeMonth && options.onChangeMonth.call && options.onChangeMonth.call(datetimepicker, _xdsoft_datetime.currentTime, datetimepicker.data('input'));\n          datetimepicker.trigger('xchange.xdsoft');\n          return month;\n        };\n\n        _this.prevMonth = function () {\n          var month = _this.currentTime.getMonth() - 1;\n          if (month == -1) {\n            _this.currentTime.setFullYear(_this.currentTime.getFullYear() - 1);\n            month = 11;\n          }\n          _this.currentTime.setDate(Math.min(Date.daysInMonth[month], _this.currentTime.getDate()));\n          _this.currentTime.setMonth(month);\n          options.onChangeMonth && options.onChangeMonth.call && options.onChangeMonth.call(datetimepicker, _xdsoft_datetime.currentTime, datetimepicker.data('input'));\n          datetimepicker.trigger('xchange.xdsoft');\n          return month;\n        };\n\n        _this.strToDateTime = function (sDateTime) {\n          if (sDateTime && sDateTime instanceof Date && _this.isValidDate(sDateTime)) return sDateTime;\n\n          var tmpDate = [],\n              timeOffset,\n              currentTime;\n\n          if ((tmpDate = /^(\\+|\\-)(.*)$/.exec(sDateTime)) && (tmpDate[2] = Date.parseDate(tmpDate[2], options.formatDate))) {\n            timeOffset = tmpDate[2].getTime() - tmpDate[2].getTimezoneOffset() * 60000;\n            currentTime = new Date(_xdsoft_datetime.now().getTime() + parseInt(tmpDate[1] + '1') * timeOffset);\n          } else currentTime = sDateTime ? Date.parseDate(sDateTime, options.format) : _this.now();\n\n          if (!_this.isValidDate(currentTime)) currentTime = _this.now();\n\n          return currentTime;\n        };\n\n        _this.strtodate = function (sDate) {\n          if (sDate && sDate instanceof Date && _this.isValidDate(sDate)) return sDate;\n\n          var currentTime = sDate ? Date.parseDate(sDate, options.formatDate) : _this.now(true);\n          if (!_this.isValidDate(currentTime)) currentTime = _this.now(true);\n\n          return currentTime;\n        };\n\n        _this.strtotime = function (sTime) {\n          if (sTime && sTime instanceof Date && _this.isValidDate(sTime)) return sTime;\n\n          var currentTime = sTime ? Date.parseDate(sTime, options.formatTime) : _this.now();\n          if (!_this.isValidDate(currentTime)) currentTime = _this.now(true);\n\n          return currentTime;\n        };\n\n        _this.str = function () {\n          return _this.currentTime.dateFormat(options.format);\n        };\n\n        _this.currentTime = this.now();\n      }();\n      mounth_picker.find('.xdsoft_today_button').on('mousedown.xdsoft', function () {\n        datetimepicker.data('changed', true);\n        _xdsoft_datetime.setCurrentTime(0);\n        datetimepicker.trigger('afterOpen.xdsoft');\n      }).on('dblclick.xdsoft', function () {\n        input.val(_xdsoft_datetime.str());\n        datetimepicker.trigger('close.xdsoft');\n      });\n      mounth_picker.find('.xdsoft_prev,.xdsoft_next').on('mousedown.xdsoft', function () {\n        var $this = $(this),\n            timer = 0,\n            stop = false;\n\n        (function arguments_callee1(v) {\n          var month = _xdsoft_datetime.currentTime.getMonth();\n          if ($this.hasClass(options.next)) {\n            _xdsoft_datetime.nextMonth();\n          } else if ($this.hasClass(options.prev)) {\n            _xdsoft_datetime.prevMonth();\n          }\n          if (options.monthChangeSpinner) {\n            !stop && (timer = setTimeout(arguments_callee1, v ? v : 100));\n          }\n        })(500);\n\n        $([document.body, window]).on('mouseup.xdsoft', function arguments_callee2() {\n          clearTimeout(timer);\n          stop = true;\n          $([document.body, window]).off('mouseup.xdsoft', arguments_callee2);\n        });\n      });\n\n      timepicker.find('.xdsoft_prev,.xdsoft_next').on('mousedown.xdsoft', function () {\n        var $this = $(this),\n            timer = 0,\n            stop = false,\n            period = 110;\n        (function arguments_callee4(v) {\n          var pheight = timeboxparent[0].clientHeight,\n              height = timebox[0].offsetHeight,\n              top = Math.abs(parseInt(timebox.css('marginTop')));\n          if ($this.hasClass(options.next) && height - pheight - options.timeHeightInTimePicker >= top) {\n            timebox.css('marginTop', '-' + (top + options.timeHeightInTimePicker) + 'px');\n          } else if ($this.hasClass(options.prev) && top - options.timeHeightInTimePicker >= 0) {\n            timebox.css('marginTop', '-' + (top - options.timeHeightInTimePicker) + 'px');\n          }\n          timeboxparent.trigger('scroll_element.xdsoft_scroller', [Math.abs(parseInt(timebox.css('marginTop')) / (height - pheight))]);\n          period = period > 10 ? 10 : period - 10;\n          !stop && (timer = setTimeout(arguments_callee4, v ? v : period));\n        })(500);\n        $([document.body, window]).on('mouseup.xdsoft', function arguments_callee5() {\n          clearTimeout(timer);\n          stop = true;\n          $([document.body, window]).off('mouseup.xdsoft', arguments_callee5);\n        });\n      });\n\n      var xchangeTimer = 0;\n      // base handler - generating a calendar and timepicker\n      datetimepicker.on('xchange.xdsoft', function (event) {\n        clearTimeout(xchangeTimer);\n        xchangeTimer = setTimeout(function () {\n          var table = '',\n              start = new Date(_xdsoft_datetime.currentTime.getFullYear(), _xdsoft_datetime.currentTime.getMonth(), 1, 12, 0, 0),\n              i = 0,\n              today = _xdsoft_datetime.now();\n\n          while (start.getDay() != options.dayOfWeekStart) {\n            start.setDate(start.getDate() - 1);\n          } //generate calendar\n          table += '<table><thead><tr>';\n\n          if (options.weeks) {\n            table += '<th></th>';\n          }\n\n          // days\n          for (var j = 0; j < 7; j++) {\n            table += '<th>' + options.i18n[options.lang].dayOfWeek[(j + options.dayOfWeekStart) % 7] + '</th>';\n          }\n\n          table += '</tr></thead>';\n          table += '<tbody>';\n          var maxDate = false,\n              minDate = false;\n\n          if (options.maxDate !== false) {\n            maxDate = _xdsoft_datetime.strtodate(options.maxDate);\n            maxDate = new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate(), 23, 59, 59, 999);\n          }\n\n          if (options.minDate !== false) {\n            minDate = _xdsoft_datetime.strtodate(options.minDate);\n            minDate = new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate());\n          }\n\n          var d,\n              y,\n              m,\n              w,\n              classes = [],\n              customDateSettings,\n              newRow = true;\n\n          while (i < _xdsoft_datetime.currentTime.countDaysInMonth() || start.getDay() != options.dayOfWeekStart || _xdsoft_datetime.currentTime.getMonth() == start.getMonth()) {\n            classes = [];\n            i++;\n\n            d = start.getDate();\n            y = start.getFullYear();\n            m = start.getMonth();\n            w = start.getWeekOfYear();\n\n            classes.push('xdsoft_date');\n\n            if (options.beforeShowDay && options.beforeShowDay.call) {\n              customDateSettings = options.beforeShowDay.call(datetimepicker, start);\n            } else {\n              customDateSettings = null;\n            }\n\n            if (maxDate !== false && start > maxDate || minDate !== false && start < minDate || customDateSettings && customDateSettings[0] === false) {\n              classes.push('xdsoft_disabled');\n            }\n\n            if (customDateSettings && customDateSettings[1] != \"\") {\n              classes.push(customDateSettings[1]);\n            }\n\n            if (_xdsoft_datetime.currentTime.getMonth() != m) classes.push('xdsoft_other_month');\n\n            if ((options.defaultSelect || datetimepicker.data('changed')) && _xdsoft_datetime.currentTime.dateFormat(options.formatDate) == start.dateFormat(options.formatDate)) {\n              classes.push('xdsoft_current');\n            }\n\n            if (today.dateFormat(options.formatDate) == start.dateFormat(options.formatDate)) {\n              classes.push('xdsoft_today');\n            }\n\n            if (start.getDay() == 0 || start.getDay() == 6 || ~options.weekends.indexOf(start.dateFormat(options.formatDate))) {\n              classes.push('xdsoft_weekend');\n            }\n\n            if (options.beforeShowDay && typeof options.beforeShowDay == 'function') {\n              classes.push(options.beforeShowDay(start));\n            }\n\n            if (newRow) {\n              table += '<tr>';\n              newRow = false;\n\n              if (options.weeks) {\n                table += '<th>' + w + '</th>';\n              }\n            }\n\n            table += '<td data-date=\"' + d + '\" data-month=\"' + m + '\" data-year=\"' + y + '\"' + ' class=\"xdsoft_date xdsoft_day_of_week' + start.getDay() + ' ' + classes.join(' ') + '\">' + '<div>' + d + '</div>' + '</td>';\n\n            if (start.getDay() == options.dayOfWeekStartPrev) {\n              table += '</tr>';\n              newRow = true;\n            }\n\n            start.setDate(d + 1);\n          }\n          table += '</tbody></table>';\n\n          calendar.html(table);\n\n          mounth_picker.find('.xdsoft_label span').eq(0).text(options.i18n[options.lang].months[_xdsoft_datetime.currentTime.getMonth()]);\n          mounth_picker.find('.xdsoft_label span').eq(1).text(_xdsoft_datetime.currentTime.getFullYear());\n\n          // generate timebox\n          var time = '',\n              h = '',\n              m = '',\n              line_time = function line_time(h, m) {\n            var now = _xdsoft_datetime.now();\n            now.setHours(h);\n            h = parseInt(now.getHours());\n            now.setMinutes(m);\n            m = parseInt(now.getMinutes());\n\n            classes = [];\n            if (options.maxTime !== false && _xdsoft_datetime.strtotime(options.maxTime).getTime() < now.getTime() || options.minTime !== false && _xdsoft_datetime.strtotime(options.minTime).getTime() > now.getTime()) classes.push('xdsoft_disabled');\n            if ((options.initTime || options.defaultSelect || datetimepicker.data('changed')) && parseInt(_xdsoft_datetime.currentTime.getHours()) == parseInt(h) && (options.step > 59 || Math[options.roundTime](_xdsoft_datetime.currentTime.getMinutes() / options.step) * options.step == parseInt(m))) {\n              if (options.defaultSelect || datetimepicker.data('changed')) {\n                classes.push('xdsoft_current');\n              } else if (options.initTime) {\n                classes.push('xdsoft_init_time');\n              }\n            }\n            if (parseInt(today.getHours()) == parseInt(h) && parseInt(today.getMinutes()) == parseInt(m)) classes.push('xdsoft_today');\n            time += '<div class=\"xdsoft_time ' + classes.join(' ') + '\" data-hour=\"' + h + '\" data-minute=\"' + m + '\">' + now.dateFormat(options.formatTime) + '</div>';\n          };\n\n          if (!options.allowTimes || !$.isArray(options.allowTimes) || !options.allowTimes.length) {\n            for (var i = 0, j = 0; i < (options.hours12 ? 12 : 24); i++) {\n              for (j = 0; j < 60; j += options.step) {\n                h = (i < 10 ? '0' : '') + i;\n                m = (j < 10 ? '0' : '') + j;\n                line_time(h, m);\n              }\n            }\n          } else {\n            for (var i = 0; i < options.allowTimes.length; i++) {\n              h = _xdsoft_datetime.strtotime(options.allowTimes[i]).getHours();\n              m = _xdsoft_datetime.strtotime(options.allowTimes[i]).getMinutes();\n              line_time(h, m);\n            }\n          }\n\n          timebox.html(time);\n\n          var opt = '',\n              i = 0;\n\n          for (i = parseInt(options.yearStart, 10) + options.yearOffset; i <= parseInt(options.yearEnd, 10) + options.yearOffset; i++) {\n            opt += '<div class=\"xdsoft_option ' + (_xdsoft_datetime.currentTime.getFullYear() == i ? 'xdsoft_current' : '') + '\" data-value=\"' + i + '\">' + i + '</div>';\n          }\n          yearselect.children().eq(0).html(opt);\n\n          for (i = 0, opt = ''; i <= 11; i++) {\n            opt += '<div class=\"xdsoft_option ' + (_xdsoft_datetime.currentTime.getMonth() == i ? 'xdsoft_current' : '') + '\" data-value=\"' + i + '\">' + options.i18n[options.lang].months[i] + '</div>';\n          }\n          monthselect.children().eq(0).html(opt);\n          $(datetimepicker).trigger('generate.xdsoft');\n        }, 10);\n        event.stopPropagation();\n      }).on('afterOpen.xdsoft', function () {\n        if (options.timepicker) {\n          var classType;\n          if (timebox.find('.xdsoft_current').length) {\n            classType = '.xdsoft_current';\n          } else if (timebox.find('.xdsoft_init_time').length) {\n            classType = '.xdsoft_init_time';\n          }\n\n          if (classType) {\n            var pheight = timeboxparent[0].clientHeight,\n                height = timebox[0].offsetHeight,\n                top = timebox.find(classType).index() * options.timeHeightInTimePicker + 1;\n            if (height - pheight < top) top = height - pheight;\n            timeboxparent.trigger('scroll_element.xdsoft_scroller', [parseInt(top) / (height - pheight)]);\n          } else {\n            timeboxparent.trigger('scroll_element.xdsoft_scroller', [0]);\n          }\n        }\n      });\n\n      var timerclick = 0;\n\n      calendar.on('click.xdsoft', 'td', function (xdevent) {\n        xdevent.stopPropagation(); // Prevents closing of Pop-ups, Modals and Flyouts in Bootstrap\n        timerclick++;\n        var $this = $(this),\n            currentTime = _xdsoft_datetime.currentTime;\n\n        if (currentTime === undefined || currentTime === null) {\n          _xdsoft_datetime.currentTime = _xdsoft_datetime.now();\n          currentTime = _xdsoft_datetime.currentTime;\n        }\n\n        if ($this.hasClass('xdsoft_disabled')) return false;\n\n        currentTime.setDate(1);\n        currentTime.setFullYear($this.data('year'));\n        currentTime.setMonth($this.data('month'));\n        currentTime.setDate($this.data('date'));\n\n        datetimepicker.trigger('select.xdsoft', [currentTime]);\n\n        input.val(_xdsoft_datetime.str());\n        if ((timerclick > 1 || options.closeOnDateSelect === true || options.closeOnDateSelect === 0 && !options.timepicker) && !options.inline) {\n          datetimepicker.trigger('close.xdsoft');\n        }\n\n        if (options.onSelectDate && options.onSelectDate.call) {\n          options.onSelectDate.call(datetimepicker, _xdsoft_datetime.currentTime, datetimepicker.data('input'));\n        }\n\n        datetimepicker.data('changed', true);\n        datetimepicker.trigger('xchange.xdsoft');\n        datetimepicker.trigger('changedatetime.xdsoft');\n        setTimeout(function () {\n          timerclick = 0;\n        }, 200);\n      });\n\n      timebox.on('click.xdsoft', 'div', function (xdevent) {\n        xdevent.stopPropagation(); // NAJ: Prevents closing of Pop-ups, Modals and Flyouts\n        var $this = $(this),\n            currentTime = _xdsoft_datetime.currentTime;\n\n        if (currentTime === undefined || currentTime === null) {\n          _xdsoft_datetime.currentTime = _xdsoft_datetime.now();\n          currentTime = _xdsoft_datetime.currentTime;\n        }\n\n        if ($this.hasClass('xdsoft_disabled')) return false;\n        currentTime.setHours($this.data('hour'));\n        currentTime.setMinutes($this.data('minute'));\n        datetimepicker.trigger('select.xdsoft', [currentTime]);\n\n        datetimepicker.data('input').val(_xdsoft_datetime.str());\n\n        !options.inline && datetimepicker.trigger('close.xdsoft');\n\n        if (options.onSelectTime && options.onSelectTime.call) {\n          options.onSelectTime.call(datetimepicker, _xdsoft_datetime.currentTime, datetimepicker.data('input'));\n        }\n        datetimepicker.data('changed', true);\n        datetimepicker.trigger('xchange.xdsoft');\n        datetimepicker.trigger('changedatetime.xdsoft');\n      });\n\n      datetimepicker.mousewheel && datepicker.mousewheel(function (event, delta, deltaX, deltaY) {\n        if (!options.scrollMonth) return true;\n        if (delta < 0) _xdsoft_datetime.nextMonth();else _xdsoft_datetime.prevMonth();\n        return false;\n      });\n\n      datetimepicker.mousewheel && timeboxparent.unmousewheel().mousewheel(function (event, delta, deltaX, deltaY) {\n        if (!options.scrollTime) return true;\n        var pheight = timeboxparent[0].clientHeight,\n            height = timebox[0].offsetHeight,\n            top = Math.abs(parseInt(timebox.css('marginTop'))),\n            fl = true;\n        if (delta < 0 && height - pheight - options.timeHeightInTimePicker >= top) {\n          timebox.css('marginTop', '-' + (top + options.timeHeightInTimePicker) + 'px');\n          fl = false;\n        } else if (delta > 0 && top - options.timeHeightInTimePicker >= 0) {\n          timebox.css('marginTop', '-' + (top - options.timeHeightInTimePicker) + 'px');\n          fl = false;\n        }\n        timeboxparent.trigger('scroll_element.xdsoft_scroller', [Math.abs(parseInt(timebox.css('marginTop')) / (height - pheight))]);\n        event.stopPropagation();\n        return fl;\n      });\n\n      var triggerAfterOpen = false;\n      datetimepicker.on('changedatetime.xdsoft', function () {\n        if (options.onChangeDateTime && options.onChangeDateTime.call) {\n          var $input = datetimepicker.data('input');\n          options.onChangeDateTime.call(datetimepicker, _xdsoft_datetime.currentTime, $input);\n          delete options.value;\n          $input.trigger('change');\n        }\n      }).on('generate.xdsoft', function () {\n        if (options.onGenerate && options.onGenerate.call) options.onGenerate.call(datetimepicker, _xdsoft_datetime.currentTime, datetimepicker.data('input'));\n        if (triggerAfterOpen) {\n          datetimepicker.trigger('afterOpen.xdsoft');\n          triggerAfterOpen = false;\n        }\n      }).on('click.xdsoft', function (xdevent) {\n        xdevent.stopPropagation(); // Prevents closing of Pop-ups, Modals and Flyouts in Bootstrap\n      });\n\n      var current_time_index = 0;\n      input.mousewheel && input.mousewheel(function (event, delta, deltaX, deltaY) {\n        if (!options.scrollInput) return true;\n        if (!options.datepicker && options.timepicker) {\n          current_time_index = timebox.find('.xdsoft_current').length ? timebox.find('.xdsoft_current').eq(0).index() : 0;\n          if (current_time_index + delta >= 0 && current_time_index + delta < timebox.children().length) current_time_index += delta;\n          timebox.children().eq(current_time_index).length && timebox.children().eq(current_time_index).trigger('mousedown');\n          return false;\n        } else if (options.datepicker && !options.timepicker) {\n          datepicker.trigger(event, [delta, deltaX, deltaY]);\n          input.val && input.val(_xdsoft_datetime.str());\n          datetimepicker.trigger('changedatetime.xdsoft');\n          return false;\n        }\n      });\n      var setPos = function setPos() {\n        var offset = datetimepicker.data('input').offset(),\n            top = offset.top + datetimepicker.data('input')[0].offsetHeight - 1,\n            left = offset.left,\n            position = \"absolute\";\n        if (options.fixed) {\n          top -= $(window).scrollTop();\n          left -= $(window).scrollLeft();\n          position = \"fixed\";\n        } else {\n          if (top + datetimepicker[0].offsetHeight > $(window).height() + $(window).scrollTop()) top = offset.top - datetimepicker[0].offsetHeight + 1;\n          if (top < 0) top = 0;\n          if (left + datetimepicker[0].offsetWidth > $(window).width()) left = offset.left - datetimepicker[0].offsetWidth + datetimepicker.data('input')[0].offsetWidth;\n        }\n        datetimepicker.css({\n          left: left,\n          top: top,\n          position: position\n        });\n      };\n      datetimepicker.on('open.xdsoft', function () {\n        var onShow = true;\n        if (options.onShow && options.onShow.call) {\n          onShow = options.onShow.call(datetimepicker, _xdsoft_datetime.currentTime, datetimepicker.data('input'));\n        }\n        if (onShow !== false) {\n          datetimepicker.show();\n          setPos();\n          $(window).off('resize.xdsoft', setPos).on('resize.xdsoft', setPos);\n\n          if (options.closeOnWithoutClick) {\n            $([document.body, window]).on('mousedown.xdsoft', function arguments_callee6() {\n              datetimepicker.trigger('close.xdsoft');\n              $([document.body, window]).off('mousedown.xdsoft', arguments_callee6);\n            });\n          }\n        }\n      }).on('close.xdsoft', function (event) {\n        var onClose = true;\n        if (options.onClose && options.onClose.call) {\n          onClose = options.onClose.call(datetimepicker, _xdsoft_datetime.currentTime, datetimepicker.data('input'));\n        }\n        if (onClose !== false && !options.opened && !options.inline) {\n          datetimepicker.hide();\n        }\n        event.stopPropagation();\n      }).data('input', input);\n\n      var timer = 0,\n          timer1 = 0;\n\n      datetimepicker.data('xdsoft_datetime', _xdsoft_datetime);\n      datetimepicker.setOptions(options);\n\n      function getCurrentValue() {\n\n        var ct = false;\n\n        if (options.startDate) {\n          ct = _xdsoft_datetime.strToDateTime(options.startDate);\n        } else {\n          ct = options.value ? options.value : input && input.val && input.val() ? input.val() : '';\n          ct = Date.parseDate(ct, options.format);\n        }\n\n        if (ct && _xdsoft_datetime.isValidDate(ct)) {\n          datetimepicker.data('changed', true);\n        } else {\n          ct = '';\n        }\n\n        return ct ? ct : 0;\n      }\n      //debugger\n      _xdsoft_datetime.setCurrentTime(getCurrentValue());\n\n      input.data('xdsoft_datetimepicker', datetimepicker).on('open.xdsoft focusin.xdsoft mousedown.xdsoft', function (event) {\n        if (input.is(':disabled') || input.is(':hidden') || !input.is(':visible') || input.data('xdsoft_datetimepicker').is(':visible') && options.closeOnInputClick) return;\n        clearTimeout(timer);\n        timer = setTimeout(function () {\n          if (input.is(':disabled') || input.is(':hidden') || !input.is(':visible')) return;\n\n          triggerAfterOpen = true;\n          _xdsoft_datetime.setCurrentTime(getCurrentValue());\n\n          datetimepicker.trigger('open.xdsoft');\n        }, 100);\n      }).on('keydown.xdsoft', function (event) {\n        var val = this.value,\n            key = event.which;\n        switch (true) {\n          case !!~[ENTER].indexOf(key):\n            var elementSelector = $(\"input:visible,textarea:visible\");\n            datetimepicker.trigger('close.xdsoft');\n            elementSelector.eq(elementSelector.index(this) + 1).focus();\n            return false;\n          case !!~[TAB].indexOf(key):\n            datetimepicker.trigger('close.xdsoft');\n            return true;\n        }\n      });\n    },\n        destroyDateTimePicker = function destroyDateTimePicker(input) {\n      var datetimepicker = input.data('xdsoft_datetimepicker');\n      if (datetimepicker) {\n        datetimepicker.data('xdsoft_datetime', null);\n        datetimepicker.remove();\n        input.data('xdsoft_datetimepicker', null).off('open.xdsoft focusin.xdsoft focusout.xdsoft mousedown.xdsoft blur.xdsoft keydown.xdsoft');\n        $(window).off('resize.xdsoft');\n        $([window, document.body]).off('mousedown.xdsoft');\n        input.unmousewheel && input.unmousewheel();\n      }\n    };\n    $(document).off('keydown.xdsoftctrl keyup.xdsoftctrl').on('keydown.xdsoftctrl', function (e) {\n      if (e.keyCode == CTRLKEY) ctrlDown = true;\n    }).on('keyup.xdsoftctrl', function (e) {\n      if (e.keyCode == CTRLKEY) ctrlDown = false;\n    });\n    return this.each(function () {\n      var datetimepicker;\n      if (datetimepicker = $(this).data('xdsoft_datetimepicker')) {\n        if ($.type(opt) === 'string') {\n          switch (opt) {\n            case 'show':\n              $(this).select().focus();\n              datetimepicker.trigger('open.xdsoft');\n              break;\n            case 'hide':\n              datetimepicker.trigger('close.xdsoft');\n              break;\n            case 'destroy':\n              destroyDateTimePicker($(this));\n              break;\n            case 'reset':\n              this.value = this.defaultValue;\n              if (!this.value || !datetimepicker.data('xdsoft_datetime').isValidDate(Date.parseDate(this.value, options.format))) datetimepicker.data('changed', false);\n              datetimepicker.data('xdsoft_datetime').setCurrentTime(this.value);\n              break;\n          }\n        } else {\n          datetimepicker.setOptions(opt);\n        }\n        return 0;\n      } else if ($.type(opt) !== 'string') {\n        if (!options.lazyInit || options.open || options.inline) {\n          createDateTimePicker($(this));\n        } else lazyInit($(this));\n      }\n    });\n  };\n  $.fn.datetimepicker.defaults = default_options;\n})(_jquery2.default);\n\n/*\n * Copyright (c) 2013 Brandon Aaron (http://brandonaaron.net)\n *\n * Licensed under the MIT License (LICENSE.txt).\n *\n * Thanks to: http://adomas.org/javascript-mouse-wheel/ for some pointers.\n * Thanks to: Mathias Bank(http://www.mathias-bank.de) for a scope bug fix.\n * Thanks to: Seamus Leahy for adding deltaX and deltaY\n *\n * Version: 3.1.3\n *\n * Requires: 1.2.2+\n */\n(function (factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(56)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n    module.exports = factory;\n  } else {\n    factory(_jquery2.default);\n  }\n})(function ($) {\n  var toFix = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'];\n  var toBind = 'onwheel' in document || document.documentMode >= 9 ? ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'];\n  var lowestDelta, lowestDeltaXY;\n  if ($.event.fixHooks) {\n    for (var i = toFix.length; i;) {\n      $.event.fixHooks[toFix[--i]] = $.event.mouseHooks;\n    }\n  }\n  $.event.special.mousewheel = {\n    setup: function setup() {\n      if (this.addEventListener) {\n        for (var i = toBind.length; i;) {\n          this.addEventListener(toBind[--i], handler, false);\n        }\n      } else {\n        this.onmousewheel = handler;\n      }\n    },\n    teardown: function teardown() {\n      if (this.removeEventListener) {\n        for (var i = toBind.length; i;) {\n          this.removeEventListener(toBind[--i], handler, false);\n        }\n      } else {\n        this.onmousewheel = null;\n      }\n    }\n  };\n  $.fn.extend({\n    mousewheel: function mousewheel(fn) {\n      return fn ? this.bind(\"mousewheel\", fn) : this.trigger(\"mousewheel\");\n    },\n    unmousewheel: function unmousewheel(fn) {\n      return this.unbind(\"mousewheel\", fn);\n    }\n  });\n\n  function handler(event) {\n    var orgEvent = event || window.event,\n        args = [].slice.call(arguments, 1),\n        delta = 0,\n        deltaX = 0,\n        deltaY = 0,\n        absDelta = 0,\n        absDeltaXY = 0,\n        fn;\n    event = $.event.fix(orgEvent);\n    event.type = \"mousewheel\";\n    if (orgEvent.wheelDelta) {\n      delta = orgEvent.wheelDelta;\n    }\n    if (orgEvent.detail) {\n      delta = orgEvent.detail * -1;\n    }\n    if (orgEvent.deltaY) {\n      deltaY = orgEvent.deltaY * -1;\n      delta = deltaY;\n    }\n    if (orgEvent.deltaX) {\n      deltaX = orgEvent.deltaX;\n      delta = deltaX * -1;\n    }\n    if (orgEvent.wheelDeltaY !== undefined) {\n      deltaY = orgEvent.wheelDeltaY;\n    }\n    if (orgEvent.wheelDeltaX !== undefined) {\n      deltaX = orgEvent.wheelDeltaX * -1;\n    }\n    absDelta = Math.abs(delta);\n    if (!lowestDelta || absDelta < lowestDelta) {\n      lowestDelta = absDelta;\n    }\n    absDeltaXY = Math.max(Math.abs(deltaY), Math.abs(deltaX));\n    if (!lowestDeltaXY || absDeltaXY < lowestDeltaXY) {\n      lowestDeltaXY = absDeltaXY;\n    }\n    fn = delta > 0 ? 'floor' : 'ceil';\n    delta = Math[fn](delta / lowestDelta);\n    deltaX = Math[fn](deltaX / lowestDeltaXY);\n    deltaY = Math[fn](deltaY / lowestDeltaXY);\n    args.unshift(event, delta, deltaX, deltaY);\n    return ($.event.dispatch || $.event.handle).apply(this, args);\n  }\n});\n\n// Parse and Format Library\n//http://www.xaprb.com/blog/2005/12/12/javascript-closures-for-runtime-efficiency/\n/*\n * Copyright (C) 2004 Baron Schwartz <baron at sequent dot org>\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by the\n * Free Software Foundation, version 2.1.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more\n * details.\n */\nDate.parseFunctions = {\n  count: 0\n};\nDate.parseRegexes = [];\nDate.formatFunctions = {\n  count: 0\n};\nDate.prototype.dateFormat = function (b) {\n  if (b == \"unixtime\") {\n    return parseInt(this.getTime() / 1000);\n  }\n  if (Date.formatFunctions[b] == null) {\n    Date.createNewFormat(b);\n  }\n  var a = Date.formatFunctions[b];\n  return this[a]();\n};\nDate.createNewFormat = function (format) {\n  var funcName = \"format\" + Date.formatFunctions.count++;\n  Date.formatFunctions[format] = funcName;\n  var code = \"Date.prototype.\" + funcName + \" = function() {return \";\n  var special = false;\n  var ch = \"\";\n  for (var i = 0; i < format.length; ++i) {\n    ch = format.charAt(i);\n    if (!special && ch == \"\\\\\") {\n      special = true;\n    } else {\n      if (special) {\n        special = false;\n        code += \"'\" + String.escape(ch) + \"' + \";\n      } else {\n        code += Date.getFormatCode(ch);\n      }\n    }\n  }\n  eval(code.substring(0, code.length - 3) + \";}\");\n};\nDate.getFormatCode = function (a) {\n  switch (a) {\n    case \"d\":\n      return \"String.leftPad(this.getDate(), 2, '0') + \";\n    case \"D\":\n      return \"Date.dayNames[this.getDay()].substring(0, 3) + \";\n    case \"j\":\n      return \"this.getDate() + \";\n    case \"l\":\n      return \"Date.dayNames[this.getDay()] + \";\n    case \"S\":\n      return \"this.getSuffix() + \";\n    case \"w\":\n      return \"this.getDay() + \";\n    case \"z\":\n      return \"this.getDayOfYear() + \";\n    case \"W\":\n      return \"this.getWeekOfYear() + \";\n    case \"F\":\n      return \"Date.monthNames[this.getMonth()] + \";\n    case \"m\":\n      return \"String.leftPad(this.getMonth() + 1, 2, '0') + \";\n    case \"M\":\n      return \"Date.monthNames[this.getMonth()].substring(0, 3) + \";\n    case \"n\":\n      return \"(this.getMonth() + 1) + \";\n    case \"t\":\n      return \"this.getDaysInMonth() + \";\n    case \"L\":\n      return \"(this.isLeapYear() ? 1 : 0) + \";\n    case \"Y\":\n      return \"this.getFullYear() + \";\n    case \"y\":\n      return \"('' + this.getFullYear()).substring(2, 4) + \";\n    case \"a\":\n      return \"(this.getHours() < 12 ? 'am' : 'pm') + \";\n    case \"A\":\n      return \"(this.getHours() < 12 ? 'AM' : 'PM') + \";\n    case \"g\":\n      return \"((this.getHours() %12) ? this.getHours() % 12 : 12) + \";\n    case \"G\":\n      return \"this.getHours() + \";\n    case \"h\":\n      return \"String.leftPad((this.getHours() %12) ? this.getHours() % 12 : 12, 2, '0') + \";\n    case \"H\":\n      return \"String.leftPad(this.getHours(), 2, '0') + \";\n    case \"i\":\n      return \"String.leftPad(this.getMinutes(), 2, '0') + \";\n    case \"s\":\n      return \"String.leftPad(this.getSeconds(), 2, '0') + \";\n    case \"O\":\n      return \"this.getGMTOffset() + \";\n    case \"T\":\n      return \"this.getTimezone() + \";\n    case \"Z\":\n      return \"(this.getTimezoneOffset() * -60) + \";\n    default:\n      return \"'\" + String.escape(a) + \"' + \";\n  }\n};\nDate.parseDate = function (a, c) {\n  if (c == \"unixtime\") {\n    return new Date(!isNaN(parseInt(a)) ? parseInt(a) * 1000 : 0);\n  }\n  if (Date.parseFunctions[c] == null) {\n    Date.createParser(c);\n  }\n  var b = Date.parseFunctions[c];\n  return Date[b](a);\n};\nDate.createParser = function (format) {\n  var funcName = \"parse\" + Date.parseFunctions.count++;\n  var regexNum = Date.parseRegexes.length;\n  var currentGroup = 1;\n  Date.parseFunctions[format] = funcName;\n  var code = \"Date.\" + funcName + \" = function(input) {\\nvar y = -1, m = -1, d = -1, h = -1, i = -1, s = -1, z = -1;\\nvar d = new Date();\\ny = d.getFullYear();\\nm = d.getMonth();\\nd = d.getDate();\\nvar results = input.match(Date.parseRegexes[\" + regexNum + \"]);\\nif (results && results.length > 0) {\";\n  var regex = \"\";\n  var special = false;\n  var ch = \"\";\n  for (var i = 0; i < format.length; ++i) {\n    ch = format.charAt(i);\n    if (!special && ch == \"\\\\\") {\n      special = true;\n    } else {\n      if (special) {\n        special = false;\n        regex += String.escape(ch);\n      } else {\n        obj = Date.formatCodeToRegex(ch, currentGroup);\n        currentGroup += obj.g;\n        regex += obj.s;\n        if (obj.g && obj.c) {\n          code += obj.c;\n        }\n      }\n    }\n  }\n  code += \"if (y > 0 && z > 0){\\nvar doyDate = new Date(y,0);\\ndoyDate.setDate(z);\\nm = doyDate.getMonth();\\nd = doyDate.getDate();\\n}\";\n  code += \"if (y > 0 && m >= 0 && d > 0 && h >= 0 && i >= 0 && s >= 0)\\n{return new Date(y, m, d, h, i, s);}\\nelse if (y > 0 && m >= 0 && d > 0 && h >= 0 && i >= 0)\\n{return new Date(y, m, d, h, i);}\\nelse if (y > 0 && m >= 0 && d > 0 && h >= 0)\\n{return new Date(y, m, d, h);}\\nelse if (y > 0 && m >= 0 && d > 0)\\n{return new Date(y, m, d);}\\nelse if (y > 0 && m >= 0)\\n{return new Date(y, m);}\\nelse if (y > 0)\\n{return new Date(y);}\\n}return null;}\";\n  Date.parseRegexes[regexNum] = new RegExp(\"^\" + regex + \"$\");\n  eval(code);\n};\nDate.formatCodeToRegex = function (b, a) {\n  switch (b) {\n    case \"D\":\n      return {\n        g: 0,\n        c: null,\n        s: \"(?:Sun|Mon|Tue|Wed|Thu|Fri|Sat)\"\n      };\n    case \"j\":\n    case \"d\":\n      return {\n        g: 1,\n        c: \"d = parseInt(results[\" + a + \"], 10);\\n\",\n        s: \"(\\\\d{1,2})\"\n      };\n    case \"l\":\n      return {\n        g: 0,\n        c: null,\n        s: \"(?:\" + Date.dayNames.join(\"|\") + \")\"\n      };\n    case \"S\":\n      return {\n        g: 0,\n        c: null,\n        s: \"(?:st|nd|rd|th)\"\n      };\n    case \"w\":\n      return {\n        g: 0,\n        c: null,\n        s: \"\\\\d\"\n      };\n    case \"z\":\n      return {\n        g: 1,\n        c: \"z = parseInt(results[\" + a + \"], 10);\\n\",\n        s: \"(\\\\d{1,3})\"\n      };\n    case \"W\":\n      return {\n        g: 0,\n        c: null,\n        s: \"(?:\\\\d{2})\"\n      };\n    case \"F\":\n      return {\n        g: 1,\n        c: \"m = parseInt(Date.monthNumbers[results[\" + a + \"].substring(0, 3)], 10);\\n\",\n        s: \"(\" + Date.monthNames.join(\"|\") + \")\"\n      };\n    case \"M\":\n      return {\n        g: 1,\n        c: \"m = parseInt(Date.monthNumbers[results[\" + a + \"]], 10);\\n\",\n        s: \"(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\"\n      };\n    case \"n\":\n    case \"m\":\n      return {\n        g: 1,\n        c: \"m = parseInt(results[\" + a + \"], 10) - 1;\\n\",\n        s: \"(\\\\d{1,2})\"\n      };\n    case \"t\":\n      return {\n        g: 0,\n        c: null,\n        s: \"\\\\d{1,2}\"\n      };\n    case \"L\":\n      return {\n        g: 0,\n        c: null,\n        s: \"(?:1|0)\"\n      };\n    case \"Y\":\n      return {\n        g: 1,\n        c: \"y = parseInt(results[\" + a + \"], 10);\\n\",\n        s: \"(\\\\d{4})\"\n      };\n    case \"y\":\n      return {\n        g: 1,\n        c: \"var ty = parseInt(results[\" + a + \"], 10);\\ny = ty > Date.y2kYear ? 1900 + ty : 2000 + ty;\\n\",\n        s: \"(\\\\d{1,2})\"\n      };\n    case \"a\":\n      return {\n        g: 1,\n        c: \"if (results[\" + a + \"] == 'am') {\\nif (h == 12) { h = 0; }\\n} else { if (h < 12) { h += 12; }}\",\n        s: \"(am|pm)\"\n      };\n    case \"A\":\n      return {\n        g: 1,\n        c: \"if (results[\" + a + \"] == 'AM') {\\nif (h == 12) { h = 0; }\\n} else { if (h < 12) { h += 12; }}\",\n        s: \"(AM|PM)\"\n      };\n    case \"g\":\n    case \"G\":\n    case \"h\":\n    case \"H\":\n      return {\n        g: 1,\n        c: \"h = parseInt(results[\" + a + \"], 10);\\n\",\n        s: \"(\\\\d{1,2})\"\n      };\n    case \"i\":\n      return {\n        g: 1,\n        c: \"i = parseInt(results[\" + a + \"], 10);\\n\",\n        s: \"(\\\\d{2})\"\n      };\n    case \"s\":\n      return {\n        g: 1,\n        c: \"s = parseInt(results[\" + a + \"], 10);\\n\",\n        s: \"(\\\\d{2})\"\n      };\n    case \"O\":\n      return {\n        g: 0,\n        c: null,\n        s: \"[+-]\\\\d{4}\"\n      };\n    case \"T\":\n      return {\n        g: 0,\n        c: null,\n        s: \"[A-Z]{3}\"\n      };\n    case \"Z\":\n      return {\n        g: 0,\n        c: null,\n        s: \"[+-]\\\\d{1,5}\"\n      };\n    default:\n      return {\n        g: 0,\n        c: null,\n        s: String.escape(b)\n      };\n  }\n};\nDate.prototype.getTimezone = function () {\n  return this.toString().replace(/^.*? ([A-Z]{3}) [0-9]{4}.*$/, \"$1\").replace(/^.*?\\(([A-Z])[a-z]+ ([A-Z])[a-z]+ ([A-Z])[a-z]+\\)$/, \"$1$2$3\");\n};\nDate.prototype.getGMTOffset = function () {\n  return (this.getTimezoneOffset() > 0 ? \"-\" : \"+\") + String.leftPad(Math.floor(Math.abs(this.getTimezoneOffset()) / 60), 2, \"0\") + String.leftPad(Math.abs(this.getTimezoneOffset()) % 60, 2, \"0\");\n};\nDate.prototype.getDayOfYear = function () {\n  var a = 0;\n  Date.daysInMonth[1] = this.isLeapYear() ? 29 : 28;\n  for (var b = 0; b < this.getMonth(); ++b) {\n    a += Date.daysInMonth[b];\n  }\n  return a + this.getDate();\n};\nDate.prototype.getWeekOfYear = function () {\n  var b = this.getDayOfYear() + (4 - this.getDay());\n  var a = new Date(this.getFullYear(), 0, 1);\n  var c = 7 - a.getDay() + 4;\n  return String.leftPad(Math.ceil((b - c) / 7) + 1, 2, \"0\");\n};\nDate.prototype.isLeapYear = function () {\n  var a = this.getFullYear();\n  return (a & 3) == 0 && (a % 100 || a % 400 == 0 && a);\n};\nDate.prototype.getFirstDayOfMonth = function () {\n  var a = (this.getDay() - (this.getDate() - 1)) % 7;\n  return a < 0 ? a + 7 : a;\n};\nDate.prototype.getLastDayOfMonth = function () {\n  var a = (this.getDay() + (Date.daysInMonth[this.getMonth()] - this.getDate())) % 7;\n  return a < 0 ? a + 7 : a;\n};\nDate.prototype.getDaysInMonth = function () {\n  Date.daysInMonth[1] = this.isLeapYear() ? 29 : 28;\n  return Date.daysInMonth[this.getMonth()];\n};\nDate.prototype.getSuffix = function () {\n  switch (this.getDate()) {\n    case 1:\n    case 21:\n    case 31:\n      return \"st\";\n    case 2:\n    case 22:\n      return \"nd\";\n    case 3:\n    case 23:\n      return \"rd\";\n    default:\n      return \"th\";\n  }\n};\nString.escape = function (a) {\n  return a.replace(/('|\\\\)/g, \"\\\\$1\");\n};\nString.leftPad = function (d, b, c) {\n  var a = new String(d);\n  if (c == null) {\n    c = \" \";\n  }\n  while (a.length < b) {\n    a = c + a;\n  }\n  return a;\n};\nDate.daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nDate.monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nDate.dayNames = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nDate.y2kYear = 50;\nDate.monthNumbers = {\n  Jan: 0,\n  Feb: 1,\n  Mar: 2,\n  Apr: 3,\n  May: 4,\n  Jun: 5,\n  Jul: 6,\n  Aug: 7,\n  Sep: 8,\n  Oct: 9,\n  Nov: 10,\n  Dec: 11\n};\nDate.patterns = {\n  ISO8601LongPattern: \"Y-m-d H:i:s\",\n  ISO8601ShortPattern: \"Y-m-d\",\n  ShortDatePattern: \"n/j/Y\",\n  LongDatePattern: \"l, F d, Y\",\n  FullDateTimePattern: \"l, F d, Y g:i:s A\",\n  MonthDayPattern: \"F d\",\n  ShortTimePattern: \"g:i A\",\n  LongTimePattern: \"g:i:s A\",\n  SortableDateTimePattern: \"Y-m-d\\\\TH:i:s\",\n  UniversalSortableDateTimePattern: \"Y-m-d H:i:sO\",\n  YearMonthPattern: \"F, Y\"\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvdmVuZG9ycy9qcXVlcnkuZGF0ZXRpbWVwaWNrZXIubWluLmpzPzdhZGUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7a1BBQUE7Ozs7Ozs7QUFLQTs7Ozs7O0FBQ0EsQ0FBQyxVQUFTLENBQVQsRUFBWTtBQUNYOztBQUNBLE1BQUksa0JBQWtCO0FBQ3BCLFVBQU07QUFDSixVQUFJLEVBQUU7QUFDSixnQkFBUSxDQUNOLFFBRE0sRUFDSSxVQURKLEVBQ2dCLE1BRGhCLEVBQ3dCLE9BRHhCLEVBQ2lDLEtBRGpDLEVBQ3dDLEtBRHhDLEVBQytDLEtBRC9DLEVBQ3NELFFBRHRELEVBQ2dFLFdBRGhFLEVBQzZFLFVBRDdFLEVBQ3lGLFNBRHpGLEVBQ29HLFVBRHBHLENBRE47QUFJRixtQkFBVyxDQUNULElBRFMsRUFDSCxJQURHLEVBQ0csSUFESCxFQUNTLElBRFQsRUFDZSxJQURmLEVBQ3FCLElBRHJCLEVBQzJCLElBRDNCO0FBSlQsT0FEQTtBQVNKLFVBQUksRUFBRTtBQUNKLGdCQUFRLENBQ04sU0FETSxFQUNLLFVBREwsRUFDaUIsT0FEakIsRUFDMEIsS0FEMUIsRUFDaUMsT0FEakMsRUFDMEMsUUFEMUMsRUFDb0QsS0FEcEQsRUFDMkQsTUFEM0QsRUFDbUUsS0FEbkUsRUFDMEUsSUFEMUUsRUFDZ0YsTUFEaEYsRUFDd0YsT0FEeEYsQ0FETjtBQUlGLG1CQUFXLENBQ1QsUUFEUyxFQUNDLFFBREQsRUFDVyxTQURYLEVBQ3NCLFVBRHRCLEVBQ2tDLFNBRGxDLEVBQzZDLE1BRDdDLEVBQ3FELE1BRHJEO0FBSlQsT0FUQTtBQWlCSixVQUFJLEVBQUU7QUFDSixnQkFBUSxDQUNOLFFBRE0sRUFDSSxTQURKLEVBQ2UsTUFEZixFQUN1QixRQUR2QixFQUNpQyxLQURqQyxFQUN3QyxNQUR4QyxFQUNnRCxNQURoRCxFQUN3RCxRQUR4RCxFQUNrRSxVQURsRSxFQUM4RSxTQUQ5RSxFQUN5RixRQUR6RixFQUNtRyxTQURuRyxDQURO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LFNBQUQsRUFBWSxVQUFaLEVBQXdCLE9BQXhCLEVBQWlDLE9BQWpDLEVBQTBDLEtBQTFDLEVBQWlELE1BQWpELEVBQXlELE1BQXpELEVBQWlFLFFBQWpFLEVBQTJFLFdBQTNFLEVBQXdGLFNBQXhGLEVBQW1HLFVBQW5HLEVBQStHLFVBQS9HLENBQWxCO0FBQ0EsS0FBSyxRQUFMLEdBQWdCLENBQUMsUUFBRCxFQUFXLFFBQVgsRUFBcUIsU0FBckIsRUFBZ0MsV0FBaEMsRUFBNkMsVUFBN0MsRUFBeUQsUUFBekQsRUFBbUUsVUFBbkUsQ0FBaEI7QUFDQSxLQUFLLE9BQUwsR0FBZSxFQUFmO0FBQ0EsS0FBSyxZQUFMLEdBQW9CO0FBQ2xCLE9BQUssQ0FEYTtBQUVsQixPQUFLLENBRmE7QUFHbEIsT0FBSyxDQUhhO0FBSWxCLE9BQUssQ0FKYTtBQUtsQixPQUFLLENBTGE7QUFNbEIsT0FBSyxDQU5hO0FBT2xCLE9BQUssQ0FQYTtBQVFsQixPQUFLLENBUmE7QUFTbEIsT0FBSyxDQVRhO0FBVWxCLE9BQUssQ0FWYTtBQVdsQixPQUFLLEVBWGE7QUFZbEIsT0FBSztBQVphLENBQXBCO0FBY0EsS0FBSyxRQUFMLEdBQWdCO0FBQ2Qsc0JBQW9CLGFBRE47QUFFZCx1QkFBcUIsT0FGUDtBQUdkLG9CQUFrQixPQUhKO0FBSWQsbUJBQWlCLFdBSkg7QUFLZCx1QkFBcUIsbUJBTFA7QUFNZCxtQkFBaUIsS0FOSDtBQU9kLG9CQUFrQixPQVBKO0FBUWQsbUJBQWlCLFNBUkg7QUFTZCwyQkFBeUIsZUFUWDtBQVVkLG9DQUFrQyxjQVZwQjtBQVdkLG9CQUFrQjtBQVhKLENBQWhCIiwiZmlsZSI6IjIwNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHByZXNlcnZlIGpRdWVyeSBEYXRlVGltZVBpY2tlciBwbHVnaW4gdjIuMy40XG4gKiBAaG9tZXBhZ2UgaHR0cDovL3hkc29mdC5uZXQvanFwbHVnaW5zL2RhdGV0aW1lcGlja2VyL1xuICogKGMpIDIwMTQsIENodXB1cm5vdiBWYWxlcml5LlxuICovXG5pbXBvcnQgalF1ZXJ5IGZyb20gJ2pxdWVyeSc7XG4oZnVuY3Rpb24oJCkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBkZWZhdWx0X29wdGlvbnMgPSB7XG4gICAgaTE4bjoge1xuICAgICAgYmc6IHsgLy8gQnVsZ2FyaWFuXG4gICAgICAgIG1vbnRoczogW1xuICAgICAgICAgIFwi0K/QvdGD0LDRgNC4XCIsIFwi0KTQtdCy0YDRg9Cw0YDQuFwiLCBcItCc0LDRgNGCXCIsIFwi0JDQv9GA0LjQu1wiLCBcItCc0LDQuVwiLCBcItCu0L3QuFwiLCBcItCu0LvQuFwiLCBcItCQ0LLQs9GD0YHRglwiLCBcItCh0LXQv9GC0LXQvNCy0YDQuFwiLCBcItCe0LrRgtC+0LzQstGA0LhcIiwgXCLQndC+0LXQvNCy0YDQuFwiLCBcItCU0LXQutC10LzQstGA0LhcIlxuICAgICAgICBdLFxuICAgICAgICBkYXlPZldlZWs6IFtcbiAgICAgICAgICBcItCd0LRcIiwgXCLQn9C9XCIsIFwi0JLRglwiLCBcItCh0YBcIiwgXCLQp9GCXCIsIFwi0J/RglwiLCBcItCh0LFcIlxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgZmE6IHsgLy8gUGVyc2lhbi9GYXJzaVxuICAgICAgICBtb250aHM6IFtcbiAgICAgICAgICAn2YHYsdmI2LHYr9uM2YYnLCAn2KfYsdiv24zYqNmH2LTYqicsICfYrtix2K/Yp9ivJywgJ9iq24zYsScsICfZhdix2K/Yp9ivJywgJ9i02YfYsduM2YjYsScsICfZhdmH2LEnLCAn2KLYqNin2YYnLCAn2KLYsNixJywgJ9iv24wnLCAn2KjZh9mF2YYnLCAn2KfYs9mB2YbYrydcbiAgICAgICAgXSxcbiAgICAgICAgZGF5T2ZXZWVrOiBbXG4gICAgICAgICAgJ9uM2qnYtNmG2KjZhycsICfYr9mI2LTZhtio2YcnLCAn2LPZhyDYtNmG2KjZhycsICfahtmH2KfYsdi02YbYqNmHJywgJ9m+2YbYrNi02YbYqNmHJywgJ9is2YXYudmHJywgJ9i02YbYqNmHJ1xuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgcnU6IHsgLy8gUnVzc2lhblxuICAgICAgICBtb250aHM6IFtcbiAgICAgICAgICAn0K/QvdCy0LDRgNGMJywgJ9Ck0LXQstGA0LDQu9GMJywgJ9Cc0LDRgNGCJywgJ9CQ0L/RgNC10LvRjCcsICfQnNCw0LknLCAn0JjRjtC90YwnLCAn0JjRjtC70YwnLCAn0JDQstCz0YPRgdGCJywgJ9Ch0LXQvdGC0Y/QsdGA0YwnLCAn0J7QutGC0Y/QsdGA0YwnLCAn0J3QvtGP0LHRgNGMJywgJ9CU0LXQutCw0LHRgNGMJ1xuICAgICAgICBdLFxuICAgICAgICBkYXlPZldlZWs6IFtcbiAgICAgICAgICBcItCS0YHQulwiLCBcItCf0L1cIiwgXCLQktGCXCIsIFwi0KHRgFwiLCBcItCn0YJcIiwgXCLQn9GCXCIsIFwi0KHQsVwiXG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICB1azogeyAvLyBVa3JhaW5pYW5cbiAgICAgICAgbW9udGhzOiBbXG4gICAgICAgICAgJ9Ch0ZbRh9C10L3RjCcsICfQm9GO0YLQuNC5JywgJ9CR0LXRgNC10LfQtdC90YwnLCAn0JrQstGW0YLQtdC90YwnLCAn0KLRgNCw0LLQtdC90YwnLCAn0KfQtdGA0LLQtdC90YwnLCAn0JvQuNC/0LXQvdGMJywgJ9Ch0LXRgNC/0LXQvdGMJywgJ9CS0LXRgNC10YHQtdC90YwnLCAn0JbQvtCy0YLQtdC90YwnLCAn0JvQuNGB0YLQvtC/0LDQtCcsICfQk9GA0YPQtNC10L3RjCdcbiAgICAgICAgXSxcbiAgICAgICAgZGF5T2ZXZWVrOiBbXG4gICAgICAgICAgXCLQndC00LtcIiwgXCLQn9C90LRcIiwgXCLQktGC0YBcIiwgXCLQodGA0LRcIiwgXCLQp9GC0LJcIiwgXCLQn9GC0L1cIiwgXCLQodCx0YJcIlxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgZW46IHsgLy8gRW5nbGlzaFxuICAgICAgICBtb250aHM6IFtcbiAgICAgICAgICBcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJcbiAgICAgICAgXSxcbiAgICAgICAgZGF5T2ZXZWVrOiBbXG4gICAgICAgICAgXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIlxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgZWw6IHsgLy8gzpXOu867zrfOvc65zrrOrFxuICAgICAgICBtb250aHM6IFtcbiAgICAgICAgICBcIs6ZzrHOvc6/z4XOrM+BzrnOv8+CXCIsIFwizqbOtc6yz4HOv8+FzqzPgc65zr/PglwiLCBcIs6czqzPgc+EzrnOv8+CXCIsIFwizpHPgM+Bzq/Ou865zr/PglwiLCBcIs6czqzOuc6/z4JcIiwgXCLOmc6/z43Ovc65zr/PglwiLCBcIs6Zzr/Pjc67zrnOv8+CXCIsIFwizpHPjc6zzr/Phc+Dz4TOv8+CXCIsIFwizqPOtc+Az4TOrc68zrLPgc65zr/PglwiLCBcIs6fzrrPhM+OzrLPgc65zr/PglwiLCBcIs6dzr/Orc68zrLPgc65zr/PglwiLCBcIs6UzrXOus6tzrzOss+BzrnOv8+CXCJcbiAgICAgICAgXSxcbiAgICAgICAgZGF5T2ZXZWVrOiBbXG4gICAgICAgICAgXCLOms+Fz4FcIiwgXCLOlM61z4VcIiwgXCLOpM+BzrlcIiwgXCLOpM61z4RcIiwgXCLOoM61zrxcIiwgXCLOoM6xz4FcIiwgXCLOo86xzrJcIlxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgZGU6IHsgLy8gR2VybWFuXG4gICAgICAgIG1vbnRoczogW1xuICAgICAgICAgICdKYW51YXInLCAnRmVicnVhcicsICdNw6RyeicsICdBcHJpbCcsICdNYWknLCAnSnVuaScsICdKdWxpJywgJ0F1Z3VzdCcsICdTZXB0ZW1iZXInLCAnT2t0b2JlcicsICdOb3ZlbWJlcicsICdEZXplbWJlcidcbiAgICAgICAgXSxcbiAgICAgICAgZGF5T2ZXZWVrOiBbXG4gICAgICAgICAgXCJTb1wiLCBcIk1vXCIsIFwiRGlcIiwgXCJNaVwiLCBcIkRvXCIsIFwiRnJcIiwgXCJTYVwiXG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICBubDogeyAvLyBEdXRjaFxuICAgICAgICBtb250aHM6IFtcbiAgICAgICAgICBcImphbnVhcmlcIiwgXCJmZWJydWFyaVwiLCBcIm1hYXJ0XCIsIFwiYXByaWxcIiwgXCJtZWlcIiwgXCJqdW5pXCIsIFwianVsaVwiLCBcImF1Z3VzdHVzXCIsIFwic2VwdGVtYmVyXCIsIFwib2t0b2JlclwiLCBcIm5vdmVtYmVyXCIsIFwiZGVjZW1iZXJcIlxuICAgICAgICBdLFxuICAgICAgICBkYXlPZldlZWs6IFtcbiAgICAgICAgICBcInpvXCIsIFwibWFcIiwgXCJkaVwiLCBcIndvXCIsIFwiZG9cIiwgXCJ2clwiLCBcInphXCJcbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIHRyOiB7IC8vIFR1cmtpc2hcbiAgICAgICAgbW9udGhzOiBbXG4gICAgICAgICAgXCJPY2FrXCIsIFwixZ51YmF0XCIsIFwiTWFydFwiLCBcIk5pc2FuXCIsIFwiTWF5xLFzXCIsIFwiSGF6aXJhblwiLCBcIlRlbW11elwiLCBcIkHEn3VzdG9zXCIsIFwiRXlsw7xsXCIsIFwiRWtpbVwiLCBcIkthc8SxbVwiLCBcIkFyYWzEsWtcIlxuICAgICAgICBdLFxuICAgICAgICBkYXlPZldlZWs6IFtcbiAgICAgICAgICBcIlBhelwiLCBcIlB0c1wiLCBcIlNhbFwiLCBcIsOHYXJcIiwgXCJQZXJcIiwgXCJDdW1cIiwgXCJDdHNcIlxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgZnI6IHsgLy9GcmVuY2hcbiAgICAgICAgbW9udGhzOiBbXG4gICAgICAgICAgXCJKYW52aWVyXCIsIFwiRsOpdnJpZXJcIiwgXCJNYXJzXCIsIFwiQXZyaWxcIiwgXCJNYWlcIiwgXCJKdWluXCIsIFwiSnVpbGxldFwiLCBcIkFvw7t0XCIsIFwiU2VwdGVtYnJlXCIsIFwiT2N0b2JyZVwiLCBcIk5vdmVtYnJlXCIsIFwiRMOpY2VtYnJlXCJcbiAgICAgICAgXSxcbiAgICAgICAgZGF5T2ZXZWVrOiBbXG4gICAgICAgICAgXCJEaW1cIiwgXCJMdW5cIiwgXCJNYXJcIiwgXCJNZXJcIiwgXCJKZXVcIiwgXCJWZW5cIiwgXCJTYW1cIlxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgZXM6IHsgLy8gU3BhbmlzaFxuICAgICAgICBtb250aHM6IFtcbiAgICAgICAgICBcIkVuZXJvXCIsIFwiRmVicmVyb1wiLCBcIk1hcnpvXCIsIFwiQWJyaWxcIiwgXCJNYXlvXCIsIFwiSnVuaW9cIiwgXCJKdWxpb1wiLCBcIkFnb3N0b1wiLCBcIlNlcHRpZW1icmVcIiwgXCJPY3R1YnJlXCIsIFwiTm92aWVtYnJlXCIsIFwiRGljaWVtYnJlXCJcbiAgICAgICAgXSxcbiAgICAgICAgZGF5T2ZXZWVrOiBbXG4gICAgICAgICAgXCJEb21cIiwgXCJMdW5cIiwgXCJNYXJcIiwgXCJNacOpXCIsIFwiSnVlXCIsIFwiVmllXCIsIFwiU8OhYlwiXG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICB0aDogeyAvLyBUaGFpXG4gICAgICAgIG1vbnRoczogW1xuICAgICAgICAgICfguKHguIHguKPguLLguITguKEnLCAn4LiB4Li44Lih4Lig4Liy4Lie4Lix4LiZ4LiY4LmMJywgJ+C4oeC4teC4meC4suC4hOC4oScsICfguYDguKHguKnguLLguKLguJknLCAn4Lie4Lik4Lip4Lig4Liy4LiE4LihJywgJ+C4oeC4tOC4luC4uOC4meC4suC4ouC4mScsICfguIHguKPguIHguI7guLLguITguKEnLCAn4Liq4Li04LiH4Lir4Liy4LiE4LihJywgJ+C4geC4seC4meC4ouC4suC4ouC4mScsICfguJXguLjguKXguLLguITguKEnLCAn4Lie4Lik4Lio4LiI4Li04LiB4Liy4Lii4LiZJywgJ+C4mOC4seC4meC4p+C4suC4hOC4oSdcbiAgICAgICAgXSxcbiAgICAgICAgZGF5T2ZXZWVrOiBbXG4gICAgICAgICAgJ+C4reC4si4nLCAn4LiILicsICfguK0uJywgJ+C4ni4nLCAn4Lie4LikLicsICfguKguJywgJ+C4qi4nXG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICBwbDogeyAvLyBQb2xpc2hcbiAgICAgICAgbW9udGhzOiBbXG4gICAgICAgICAgXCJzdHljemXFhFwiLCBcImx1dHlcIiwgXCJtYXJ6ZWNcIiwgXCJrd2llY2llxYRcIiwgXCJtYWpcIiwgXCJjemVyd2llY1wiLCBcImxpcGllY1wiLCBcInNpZXJwaWXFhFwiLCBcIndyemVzaWXFhFwiLCBcInBhxbpkemllcm5pa1wiLCBcImxpc3RvcGFkXCIsIFwiZ3J1ZHppZcWEXCJcbiAgICAgICAgXSxcbiAgICAgICAgZGF5T2ZXZWVrOiBbXG4gICAgICAgICAgXCJuZFwiLCBcInBuXCIsIFwid3RcIiwgXCLFm3JcIiwgXCJjelwiLCBcInB0XCIsIFwic2JcIlxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgcHQ6IHsgLy8gUG9ydHVndWVzZVxuICAgICAgICBtb250aHM6IFtcbiAgICAgICAgICBcIkphbmVpcm9cIiwgXCJGZXZlcmVpcm9cIiwgXCJNYXLDp29cIiwgXCJBYnJpbFwiLCBcIk1haW9cIiwgXCJKdW5ob1wiLCBcIkp1bGhvXCIsIFwiQWdvc3RvXCIsIFwiU2V0ZW1icm9cIiwgXCJPdXR1YnJvXCIsIFwiTm92ZW1icm9cIiwgXCJEZXplbWJyb1wiXG4gICAgICAgIF0sXG4gICAgICAgIGRheU9mV2VlazogW1xuICAgICAgICAgIFwiRG9tXCIsIFwiU2VnXCIsIFwiVGVyXCIsIFwiUXVhXCIsIFwiUXVpXCIsIFwiU2V4XCIsIFwiU2FiXCJcbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIGNoOiB7IC8vIFNpbXBsaWZpZWQgQ2hpbmVzZVxuICAgICAgICBtb250aHM6IFtcbiAgICAgICAgICBcIuS4gOaciFwiLCBcIuS6jOaciFwiLCBcIuS4ieaciFwiLCBcIuWbm+aciFwiLCBcIuS6lOaciFwiLCBcIuWFreaciFwiLCBcIuS4g+aciFwiLCBcIuWFq+aciFwiLCBcIuS5neaciFwiLCBcIuWNgeaciFwiLCBcIuWNgeS4gOaciFwiLCBcIuWNgeS6jOaciFwiXG4gICAgICAgIF0sXG4gICAgICAgIGRheU9mV2VlazogW1xuICAgICAgICAgIFwi5pelXCIsIFwi5LiAXCIsIFwi5LqMXCIsIFwi5LiJXCIsIFwi5ZubXCIsIFwi5LqUXCIsIFwi5YWtXCJcbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIHNlOiB7IC8vIFN3ZWRpc2hcbiAgICAgICAgbW9udGhzOiBbXG4gICAgICAgICAgXCJKYW51YXJpXCIsIFwiRmVicnVhcmlcIiwgXCJNYXJzXCIsIFwiQXByaWxcIiwgXCJNYWpcIiwgXCJKdW5pXCIsIFwiSnVsaVwiLCBcIkF1Z3VzdGlcIiwgXCJTZXB0ZW1iZXJcIiwgXCJPa3RvYmVyXCIsIFwiTm92ZW1iZXJcIiwgXCJEZWNlbWJlclwiXG4gICAgICAgIF0sXG4gICAgICAgIGRheU9mV2VlazogW1xuICAgICAgICAgIFwiU8O2blwiLCBcIk3DpW5cIiwgXCJUaXNcIiwgXCJPbnNcIiwgXCJUb3JcIiwgXCJGcmVcIiwgXCJMw7ZyXCJcbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIGtyOiB7IC8vIEtvcmVhblxuICAgICAgICBtb250aHM6IFtcbiAgICAgICAgICBcIjHsm5RcIiwgXCIy7JuUXCIsIFwiM+yblFwiLCBcIjTsm5RcIiwgXCI17JuUXCIsIFwiNuyblFwiLCBcIjfsm5RcIiwgXCI47JuUXCIsIFwiOeyblFwiLCBcIjEw7JuUXCIsIFwiMTHsm5RcIiwgXCIxMuyblFwiXG4gICAgICAgIF0sXG4gICAgICAgIGRheU9mV2VlazogW1xuICAgICAgICAgIFwi7J28XCIsIFwi7JuUXCIsIFwi7ZmUXCIsIFwi7IiYXCIsIFwi66qpXCIsIFwi6riIXCIsIFwi7YagXCJcbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIGl0OiB7IC8vIEl0YWxpYW5cbiAgICAgICAgbW9udGhzOiBbXG4gICAgICAgICAgXCJHZW5uYWlvXCIsIFwiRmViYnJhaW9cIiwgXCJNYXJ6b1wiLCBcIkFwcmlsZVwiLCBcIk1hZ2dpb1wiLCBcIkdpdWdub1wiLCBcIkx1Z2xpb1wiLCBcIkFnb3N0b1wiLCBcIlNldHRlbWJyZVwiLCBcIk90dG9icmVcIiwgXCJOb3ZlbWJyZVwiLCBcIkRpY2VtYnJlXCJcbiAgICAgICAgXSxcbiAgICAgICAgZGF5T2ZXZWVrOiBbXG4gICAgICAgICAgXCJEb21cIiwgXCJMdW5cIiwgXCJNYXJcIiwgXCJNZXJcIiwgXCJHaW9cIiwgXCJWZW5cIiwgXCJTYWJcIlxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgZGE6IHsgLy8gRGFuc2tcbiAgICAgICAgbW9udGhzOiBbXG4gICAgICAgICAgXCJKYW51YXJ5XCIsIFwiRmVicnVhclwiLCBcIk1hcnRzXCIsIFwiQXByaWxcIiwgXCJNYWpcIiwgXCJKdW5pXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9rdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJcbiAgICAgICAgXSxcbiAgICAgICAgZGF5T2ZXZWVrOiBbXG4gICAgICAgICAgXCJTw7huXCIsIFwiTWFuXCIsIFwiVGlyXCIsIFwiT25zXCIsIFwiVG9yXCIsIFwiRnJlXCIsIFwiTMO4clwiXG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICBubzogeyAvLyBOb3J3ZWdpYW5cbiAgICAgICAgbW9udGhzOiBbXG4gICAgICAgICAgXCJKYW51YXJcIiwgXCJGZWJydWFyXCIsIFwiTWFyc1wiLCBcIkFwcmlsXCIsIFwiTWFpXCIsIFwiSnVuaVwiLCBcIkp1bGlcIiwgXCJBdWd1c3RcIiwgXCJTZXB0ZW1iZXJcIiwgXCJPa3RvYmVyXCIsIFwiTm92ZW1iZXJcIiwgXCJEZXNlbWJlclwiXG4gICAgICAgIF0sXG4gICAgICAgIGRheU9mV2VlazogW1xuICAgICAgICAgIFwiU8O4blwiLCBcIk1hblwiLCBcIlRpclwiLCBcIk9uc1wiLCBcIlRvclwiLCBcIkZyZVwiLCBcIkzDuHJcIlxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgamE6IHsgLy8gSmFwYW5lc2VcbiAgICAgICAgbW9udGhzOiBbXG4gICAgICAgICAgXCIx5pyIXCIsIFwiMuaciFwiLCBcIjPmnIhcIiwgXCI05pyIXCIsIFwiNeaciFwiLCBcIjbmnIhcIiwgXCI35pyIXCIsIFwiOOaciFwiLCBcIjnmnIhcIiwgXCIxMOaciFwiLCBcIjEx5pyIXCIsIFwiMTLmnIhcIlxuICAgICAgICBdLFxuICAgICAgICBkYXlPZldlZWs6IFtcbiAgICAgICAgICBcIuaXpVwiLCBcIuaciFwiLCBcIueBq1wiLCBcIuawtFwiLCBcIuacqFwiLCBcIumHkVwiLCBcIuWcn1wiXG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICB2aTogeyAvLyBWaWV0bmFtZXNlXG4gICAgICAgIG1vbnRoczogW1xuICAgICAgICAgIFwiVGjDoW5nIDFcIiwgXCJUaMOhbmcgMlwiLCBcIlRow6FuZyAzXCIsIFwiVGjDoW5nIDRcIiwgXCJUaMOhbmcgNVwiLCBcIlRow6FuZyA2XCIsIFwiVGjDoW5nIDdcIiwgXCJUaMOhbmcgOFwiLCBcIlRow6FuZyA5XCIsIFwiVGjDoW5nIDEwXCIsIFwiVGjDoW5nIDExXCIsIFwiVGjDoW5nIDEyXCJcbiAgICAgICAgXSxcbiAgICAgICAgZGF5T2ZXZWVrOiBbXG4gICAgICAgICAgXCJDTlwiLCBcIlQyXCIsIFwiVDNcIiwgXCJUNFwiLCBcIlQ1XCIsIFwiVDZcIiwgXCJUN1wiXG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICBzbDogeyAvLyBTbG92ZW7FocSNaW5hXG4gICAgICAgIG1vbnRoczogW1xuICAgICAgICAgIFwiSmFudWFyXCIsIFwiRmVicnVhclwiLCBcIk1hcmVjXCIsIFwiQXByaWxcIiwgXCJNYWpcIiwgXCJKdW5palwiLCBcIkp1bGlqXCIsIFwiQXZndXN0XCIsIFwiU2VwdGVtYmVyXCIsIFwiT2t0b2JlclwiLCBcIk5vdmVtYmVyXCIsIFwiRGVjZW1iZXJcIlxuICAgICAgICBdLFxuICAgICAgICBkYXlPZldlZWs6IFtcbiAgICAgICAgICBcIk5lZFwiLCBcIlBvblwiLCBcIlRvclwiLCBcIlNyZVwiLCBcIsSMZXRcIiwgXCJQZXRcIiwgXCJTb2JcIlxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgY3M6IHsgLy8gxIxlxaF0aW5hXG4gICAgICAgIG1vbnRoczogW1xuICAgICAgICAgIFwiTGVkZW5cIiwgXCLDmm5vclwiLCBcIkLFmWV6ZW5cIiwgXCJEdWJlblwiLCBcIkt2xJt0ZW5cIiwgXCLEjGVydmVuXCIsIFwixIxlcnZlbmVjXCIsIFwiU3JwZW5cIiwgXCJaw6HFmcOtXCIsIFwixZjDrWplblwiLCBcIkxpc3RvcGFkXCIsIFwiUHJvc2luZWNcIlxuICAgICAgICBdLFxuICAgICAgICBkYXlPZldlZWs6IFtcbiAgICAgICAgICBcIk5lXCIsIFwiUG9cIiwgXCLDmnRcIiwgXCJTdFwiLCBcIsSMdFwiLCBcIlDDoVwiLCBcIlNvXCJcbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIGh1OiB7IC8vIEh1bmdhcmlhblxuICAgICAgICBtb250aHM6IFtcbiAgICAgICAgICBcIkphbnXDoXJcIiwgXCJGZWJydcOhclwiLCBcIk3DoXJjaXVzXCIsIFwiw4FwcmlsaXNcIiwgXCJNw6FqdXNcIiwgXCJKw7puaXVzXCIsIFwiSsO6bGl1c1wiLCBcIkF1Z3VzenR1c1wiLCBcIlN6ZXB0ZW1iZXJcIiwgXCJPa3TDs2JlclwiLCBcIk5vdmVtYmVyXCIsIFwiRGVjZW1iZXJcIlxuICAgICAgICBdLFxuICAgICAgICBkYXlPZldlZWs6IFtcbiAgICAgICAgICBcIlZhXCIsIFwiSMOpXCIsIFwiS2VcIiwgXCJTemVcIiwgXCJDc1wiLCBcIlDDqVwiLCBcIlN6b1wiXG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbHVlOiAnJyxcbiAgICBsYW5nOiAnZW4nLFxuXG4gICAgZm9ybWF0OiAnWS9tL2QgSDppJyxcbiAgICBmb3JtYXRUaW1lOiAnSDppJyxcbiAgICBmb3JtYXREYXRlOiAnWS9tL2QnLFxuXG4gICAgc3RhcnREYXRlOiBmYWxzZSwgLy8gbmV3IERhdGUoKSwgJzE5ODYvMTIvMDgnLCAnLTE5NzAvMDEvMDUnLCctMTk3MC8wMS8wNScsIFxuXG4gICAgc3RlcDogNjAsXG4gICAgbW9udGhDaGFuZ2VTcGlubmVyOiB0cnVlLFxuICAgIGNsb3NlT25EYXRlU2VsZWN0OiBmYWxzZSxcbiAgICBjbG9zZU9uV2l0aG91dENsaWNrOiB0cnVlLFxuICAgIGNsb3NlT25JbnB1dENsaWNrOiB0cnVlLFxuXG4gICAgdGltZXBpY2tlcjogdHJ1ZSxcbiAgICBkYXRlcGlja2VyOiB0cnVlLFxuICAgIHdlZWtzOiBmYWxzZSxcblxuICAgIGRlZmF1bHRUaW1lOiBmYWxzZSwgLy8gdXNlIGZvcm1hdFRpbWUgZm9ybWF0IChleC4gJzEwOjAwJyBmb3IgZm9ybWF0VGltZTogICAnSDppJylcbiAgICBkZWZhdWx0RGF0ZTogZmFsc2UsIC8vIHVzZSBmb3JtYXREYXRlIGZvcm1hdCAoZXggbmV3IERhdGUoKSBvciAnMTk4Ni8xMi8wOCcgb3IgJy0xOTcwLzAxLzA1JyBvciAnLTE5NzAvMDEvMDUnKVxuXG4gICAgbWluRGF0ZTogZmFsc2UsXG4gICAgbWF4RGF0ZTogZmFsc2UsXG4gICAgbWluVGltZTogZmFsc2UsXG4gICAgbWF4VGltZTogZmFsc2UsXG5cbiAgICBhbGxvd1RpbWVzOiBbXSxcbiAgICBvcGVuZWQ6IGZhbHNlLFxuICAgIGluaXRUaW1lOiB0cnVlLFxuICAgIGlubGluZTogZmFsc2UsXG5cbiAgICBvblNlbGVjdERhdGU6IGZ1bmN0aW9uKCkge30sXG4gICAgb25TZWxlY3RUaW1lOiBmdW5jdGlvbigpIHt9LFxuICAgIG9uQ2hhbmdlTW9udGg6IGZ1bmN0aW9uKCkge30sXG4gICAgb25DaGFuZ2VEYXRlVGltZTogZnVuY3Rpb24oKSB7fSxcbiAgICBvblNob3c6IGZ1bmN0aW9uKCkge30sXG4gICAgb25DbG9zZTogZnVuY3Rpb24oKSB7fSxcbiAgICBvbkdlbmVyYXRlOiBmdW5jdGlvbigpIHt9LFxuXG4gICAgd2l0aG91dENvcHlyaWdodDogdHJ1ZSxcblxuICAgIGludmVyc2VCdXR0b246IGZhbHNlLFxuICAgIGhvdXJzMTI6IGZhbHNlLFxuICAgIG5leHQ6ICd4ZHNvZnRfbmV4dCcsXG4gICAgcHJldjogJ3hkc29mdF9wcmV2JyxcbiAgICBkYXlPZldlZWtTdGFydDogMCxcblxuICAgIHRpbWVIZWlnaHRJblRpbWVQaWNrZXI6IDI1LFxuICAgIHRpbWVwaWNrZXJTY3JvbGxiYXI6IHRydWUsXG5cbiAgICB0b2RheUJ1dHRvbjogdHJ1ZSwgLy8gMi4xLjBcbiAgICBkZWZhdWx0U2VsZWN0OiB0cnVlLCAvLyAyLjEuMFxuXG4gICAgc2Nyb2xsTW9udGg6IHRydWUsXG4gICAgc2Nyb2xsVGltZTogdHJ1ZSxcbiAgICBzY3JvbGxJbnB1dDogdHJ1ZSxcblxuICAgIGxhenlJbml0OiBmYWxzZSxcblxuICAgIG1hc2s6IGZhbHNlLFxuICAgIHZhbGlkYXRlT25CbHVyOiB0cnVlLFxuICAgIGFsbG93Qmxhbms6IHRydWUsXG5cbiAgICB5ZWFyU3RhcnQ6IDE5NTAsXG4gICAgeWVhckVuZDogMjA1MCxcblxuICAgIHN0eWxlOiAnJyxcbiAgICBpZDogJycsXG5cbiAgICBmaXhlZDogZmFsc2UsXG5cbiAgICByb3VuZFRpbWU6ICdyb3VuZCcsIC8vIGNlaWwsIGZsb29yXG4gICAgY2xhc3NOYW1lOiAnJyxcblxuICAgIHdlZWtlbmRzOiBbXSxcbiAgICB5ZWFyT2Zmc2V0OiAwLFxuICAgIGJlZm9yZVNob3dEYXk6IG51bGxcbiAgfTtcblxuICAvLyBmaXggZm9yIGllOFxuICBpZiAoIUFycmF5LnByb3RvdHlwZS5pbmRleE9mKSB7XG4gICAgQXJyYXkucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbihvYmosIHN0YXJ0KSB7XG4gICAgICBmb3IgKHZhciBpID0gKHN0YXJ0IHx8IDApLCBqID0gdGhpcy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgaWYgKHRoaXNbaV0gPT09IG9iaikge1xuICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICB9XG5cbiAgRGF0ZS5wcm90b3R5cGUuY291bnREYXlzSW5Nb250aCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLmdldEZ1bGxZZWFyKCksIHRoaXMuZ2V0TW9udGgoKSArIDEsIDApLmdldERhdGUoKTtcbiAgfTtcblxuICAkLmZuLnhkc29mdFNjcm9sbGVyID0gZnVuY3Rpb24oX3BlcmNlbnQpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHRpbWVib3hwYXJlbnQgPSAkKHRoaXMpO1xuICAgICAgaWYgKCEkKHRoaXMpLmhhc0NsYXNzKCd4ZHNvZnRfc2Nyb2xsZXJfYm94JykpIHtcbiAgICAgICAgdmFyIHBvaW50ZXJFdmVudFRvWFkgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgb3V0ID0ge1xuICAgICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgICB5OiAwXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGUudHlwZSA9PSAndG91Y2hzdGFydCcgfHwgZS50eXBlID09ICd0b3VjaG1vdmUnIHx8IGUudHlwZSA9PSAndG91Y2hlbmQnIHx8IGUudHlwZSA9PSAndG91Y2hjYW5jZWwnKSB7XG4gICAgICAgICAgICAgIHZhciB0b3VjaCA9IGUub3JpZ2luYWxFdmVudC50b3VjaGVzWzBdIHx8IGUub3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgICAgICAgICAgICAgb3V0LnggPSB0b3VjaC5wYWdlWDtcbiAgICAgICAgICAgICAgb3V0LnkgPSB0b3VjaC5wYWdlWTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZS50eXBlID09ICdtb3VzZWRvd24nIHx8IGUudHlwZSA9PSAnbW91c2V1cCcgfHwgZS50eXBlID09ICdtb3VzZW1vdmUnIHx8IGUudHlwZSA9PSAnbW91c2VvdmVyJyB8fCBlLnR5cGUgPT0gJ21vdXNlb3V0JyB8fCBlLnR5cGUgPT0gJ21vdXNlZW50ZXInIHx8IGUudHlwZSA9PSAnbW91c2VsZWF2ZScpIHtcbiAgICAgICAgICAgICAgb3V0LnggPSBlLnBhZ2VYO1xuICAgICAgICAgICAgICBvdXQueSA9IGUucGFnZVk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgICAgIH0sXG4gICAgICAgICAgbW92ZSA9IDAsXG4gICAgICAgICAgdGltZWJveCA9IHRpbWVib3hwYXJlbnQuY2hpbGRyZW4oKS5lcSgwKSxcbiAgICAgICAgICBwYXJlbnRIZWlnaHQgPSB0aW1lYm94cGFyZW50WzBdLmNsaWVudEhlaWdodCxcbiAgICAgICAgICBoZWlnaHQgPSB0aW1lYm94WzBdLm9mZnNldEhlaWdodCxcbiAgICAgICAgICBzY3JvbGxiYXIgPSAkKCc8ZGl2IGNsYXNzPVwieGRzb2Z0X3Njcm9sbGJhclwiPjwvZGl2PicpLFxuICAgICAgICAgIHNjcm9sbGVyID0gJCgnPGRpdiBjbGFzcz1cInhkc29mdF9zY3JvbGxlclwiPjwvZGl2PicpLFxuICAgICAgICAgIG1heGltdW1PZmZzZXQgPSAxMDAsXG4gICAgICAgICAgc3RhcnQgPSBmYWxzZTtcblxuICAgICAgICBzY3JvbGxiYXIuYXBwZW5kKHNjcm9sbGVyKTtcblxuICAgICAgICB0aW1lYm94cGFyZW50LmFkZENsYXNzKCd4ZHNvZnRfc2Nyb2xsZXJfYm94JykuYXBwZW5kKHNjcm9sbGJhcik7XG4gICAgICAgIHNjcm9sbGVyLm9uKCdtb3VzZWRvd24ueGRzb2Z0X3Njcm9sbGVyJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICBpZiAoIXBhcmVudEhlaWdodClcbiAgICAgICAgICAgIHRpbWVib3hwYXJlbnQudHJpZ2dlcigncmVzaXplX3Njcm9sbC54ZHNvZnRfc2Nyb2xsZXInLCBbX3BlcmNlbnRdKTtcbiAgICAgICAgICB2YXIgcGFnZVkgPSBldmVudC5wYWdlWSxcbiAgICAgICAgICAgIHRvcCA9IHBhcnNlSW50KHNjcm9sbGVyLmNzcygnbWFyZ2luLXRvcCcpKSxcbiAgICAgICAgICAgIGgxID0gc2Nyb2xsYmFyWzBdLm9mZnNldEhlaWdodDtcbiAgICAgICAgICAkKGRvY3VtZW50LmJvZHkpLmFkZENsYXNzKCd4ZHNvZnRfbm9zZWxlY3QnKTtcbiAgICAgICAgICAkKFtkb2N1bWVudC5ib2R5LCB3aW5kb3ddKS5vbignbW91c2V1cC54ZHNvZnRfc2Nyb2xsZXInLCBmdW5jdGlvbiBhcmd1bWVudHNfY2FsbGVlKCkge1xuICAgICAgICAgICAgJChbZG9jdW1lbnQuYm9keSwgd2luZG93XSkub2ZmKCdtb3VzZXVwLnhkc29mdF9zY3JvbGxlcicsIGFyZ3VtZW50c19jYWxsZWUpXG4gICAgICAgICAgICAgIC5vZmYoJ21vdXNlbW92ZS54ZHNvZnRfc2Nyb2xsZXInLCBtb3ZlKVxuICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3hkc29mdF9ub3NlbGVjdCcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgICQoZG9jdW1lbnQuYm9keSkub24oJ21vdXNlbW92ZS54ZHNvZnRfc2Nyb2xsZXInLCBtb3ZlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSBldmVudC5wYWdlWSAtIHBhZ2VZICsgdG9wO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDApXG4gICAgICAgICAgICAgIG9mZnNldCA9IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0ICsgc2Nyb2xsZXJbMF0ub2Zmc2V0SGVpZ2h0ID4gaDEpXG4gICAgICAgICAgICAgIG9mZnNldCA9IGgxIC0gc2Nyb2xsZXJbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgdGltZWJveHBhcmVudC50cmlnZ2VyKCdzY3JvbGxfZWxlbWVudC54ZHNvZnRfc2Nyb2xsZXInLCBbbWF4aW11bU9mZnNldCA/IG9mZnNldCAvIG1heGltdW1PZmZzZXQgOiAwXSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRpbWVib3hwYXJlbnRcbiAgICAgICAgICAub24oJ3Njcm9sbF9lbGVtZW50Lnhkc29mdF9zY3JvbGxlcicsIGZ1bmN0aW9uKGV2ZW50LCBwZXJjZW50KSB7XG4gICAgICAgICAgICBpZiAoIXBhcmVudEhlaWdodClcbiAgICAgICAgICAgICAgdGltZWJveHBhcmVudC50cmlnZ2VyKCdyZXNpemVfc2Nyb2xsLnhkc29mdF9zY3JvbGxlcicsIFtwZXJjZW50LCB0cnVlXSk7XG4gICAgICAgICAgICBwZXJjZW50ID0gcGVyY2VudCA+IDEgPyAxIDogKHBlcmNlbnQgPCAwIHx8IGlzTmFOKHBlcmNlbnQpKSA/IDAgOiBwZXJjZW50O1xuICAgICAgICAgICAgc2Nyb2xsZXIuY3NzKCdtYXJnaW4tdG9wJywgbWF4aW11bU9mZnNldCAqIHBlcmNlbnQpO1xuICAgICAgICAgICAgdGltZWJveC5jc3MoJ21hcmdpblRvcCcsIC1wYXJzZUludCgoaGVpZ2h0IC0gcGFyZW50SGVpZ2h0KSAqIHBlcmNlbnQpKVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLm9uKCdyZXNpemVfc2Nyb2xsLnhkc29mdF9zY3JvbGxlcicsIGZ1bmN0aW9uKGV2ZW50LCBfcGVyY2VudCwgbm9UcmlnZ2VyU2Nyb2xsKSB7XG4gICAgICAgICAgICBwYXJlbnRIZWlnaHQgPSB0aW1lYm94cGFyZW50WzBdLmNsaWVudEhlaWdodDtcbiAgICAgICAgICAgIGhlaWdodCA9IHRpbWVib3hbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgdmFyIHBlcmNlbnQgPSBwYXJlbnRIZWlnaHQgLyBoZWlnaHQsXG4gICAgICAgICAgICAgIHNoID0gcGVyY2VudCAqIHNjcm9sbGJhclswXS5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgICBpZiAocGVyY2VudCA+IDEpXG4gICAgICAgICAgICAgIHNjcm9sbGVyLmhpZGUoKTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICBzY3JvbGxlci5zaG93KCk7XG4gICAgICAgICAgICAgIHNjcm9sbGVyLmNzcygnaGVpZ2h0JywgcGFyc2VJbnQoc2ggPiAxMCA/IHNoIDogMTApKTtcbiAgICAgICAgICAgICAgbWF4aW11bU9mZnNldCA9IHNjcm9sbGJhclswXS5vZmZzZXRIZWlnaHQgLSBzY3JvbGxlclswXS5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgICAgIGlmIChub1RyaWdnZXJTY3JvbGwgIT09IHRydWUpXG4gICAgICAgICAgICAgICAgdGltZWJveHBhcmVudC50cmlnZ2VyKCdzY3JvbGxfZWxlbWVudC54ZHNvZnRfc2Nyb2xsZXInLCBbX3BlcmNlbnQgPyBfcGVyY2VudCA6IE1hdGguYWJzKHBhcnNlSW50KHRpbWVib3guY3NzKCdtYXJnaW5Ub3AnKSkpIC8gKGhlaWdodCAtIHBhcmVudEhlaWdodCldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgdGltZWJveHBhcmVudC5tb3VzZXdoZWVsICYmIHRpbWVib3hwYXJlbnQubW91c2V3aGVlbChmdW5jdGlvbihldmVudCwgZGVsdGEsIGRlbHRhWCwgZGVsdGFZKSB7XG4gICAgICAgICAgdmFyIHRvcCA9IE1hdGguYWJzKHBhcnNlSW50KHRpbWVib3guY3NzKCdtYXJnaW5Ub3AnKSkpO1xuICAgICAgICAgIHRpbWVib3hwYXJlbnQudHJpZ2dlcignc2Nyb2xsX2VsZW1lbnQueGRzb2Z0X3Njcm9sbGVyJywgWyh0b3AgLSBkZWx0YSAqIDIwKSAvIChoZWlnaHQgLSBwYXJlbnRIZWlnaHQpXSk7XG4gICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgICAgdGltZWJveHBhcmVudC5vbigndG91Y2hzdGFydCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgc3RhcnQgPSBwb2ludGVyRXZlbnRUb1hZKGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRpbWVib3hwYXJlbnQub24oJ3RvdWNobW92ZScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgaWYgKHN0YXJ0KSB7XG4gICAgICAgICAgICB2YXIgY29vcmQgPSBwb2ludGVyRXZlbnRUb1hZKGV2ZW50KSxcbiAgICAgICAgICAgICAgdG9wID0gTWF0aC5hYnMocGFyc2VJbnQodGltZWJveC5jc3MoJ21hcmdpblRvcCcpKSk7XG4gICAgICAgICAgICB0aW1lYm94cGFyZW50LnRyaWdnZXIoJ3Njcm9sbF9lbGVtZW50Lnhkc29mdF9zY3JvbGxlcicsIFsodG9wIC0gKGNvb3JkLnkgLSBzdGFydC55KSkgLyAoaGVpZ2h0IC0gcGFyZW50SGVpZ2h0KV0pO1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgc3RhcnQgPSBwb2ludGVyRXZlbnRUb1hZKGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aW1lYm94cGFyZW50Lm9uKCd0b3VjaGVuZCB0b3VjaGNhbmNlbCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgc3RhcnQgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB0aW1lYm94cGFyZW50LnRyaWdnZXIoJ3Jlc2l6ZV9zY3JvbGwueGRzb2Z0X3Njcm9sbGVyJywgW19wZXJjZW50XSk7XG4gICAgfSk7XG4gIH07XG4gICQuZm4uZGF0ZXRpbWVwaWNrZXIgPSBmdW5jdGlvbihvcHQpIHtcbiAgICB2YXIgS0VZMCA9IDQ4LFxuICAgICAgS0VZOSA9IDU3LFxuICAgICAgX0tFWTAgPSA5NixcbiAgICAgIF9LRVk5ID0gMTA1LFxuICAgICAgQ1RSTEtFWSA9IDE3LFxuICAgICAgREVMID0gNDYsXG4gICAgICBFTlRFUiA9IDEzLFxuICAgICAgRVNDID0gMjcsXG4gICAgICBCQUNLU1BBQ0UgPSA4LFxuICAgICAgQVJST1dMRUZUID0gMzcsXG4gICAgICBBUlJPV1VQID0gMzgsXG4gICAgICBBUlJPV1JJR0hUID0gMzksXG4gICAgICBBUlJPV0RPV04gPSA0MCxcbiAgICAgIFRBQiA9IDksXG4gICAgICBGNSA9IDExNixcbiAgICAgIEFLRVkgPSA2NSxcbiAgICAgIENLRVkgPSA2NyxcbiAgICAgIFZLRVkgPSA4NixcbiAgICAgIFpLRVkgPSA5MCxcbiAgICAgIFlLRVkgPSA4OSxcbiAgICAgIGN0cmxEb3duID0gZmFsc2UsXG4gICAgICBvcHRpb25zID0gKCQuaXNQbGFpbk9iamVjdChvcHQpIHx8ICFvcHQpID8gJC5leHRlbmQodHJ1ZSwge30sIGRlZmF1bHRfb3B0aW9ucywgb3B0KSA6ICQuZXh0ZW5kKHt9LCBkZWZhdWx0X29wdGlvbnMpLFxuXG4gICAgICBsYXp5SW5pdFRpbWVyID0gMCxcblxuICAgICAgbGF6eUluaXQgPSBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICBpbnB1dFxuICAgICAgICAgIC5vbignb3Blbi54ZHNvZnQgZm9jdXNpbi54ZHNvZnQgbW91c2Vkb3duLnhkc29mdCcsIGZ1bmN0aW9uIGluaXRPbkFjdGlvbkNhbGxiYWNrKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoaW5wdXQuaXMoJzpkaXNhYmxlZCcpIHx8IGlucHV0LmlzKCc6aGlkZGVuJykgfHwgIWlucHV0LmlzKCc6dmlzaWJsZScpIHx8IGlucHV0LmRhdGEoJ3hkc29mdF9kYXRldGltZXBpY2tlcicpKVxuICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgIGNsZWFyVGltZW91dChsYXp5SW5pdFRpbWVyKTtcblxuICAgICAgICAgICAgbGF6eUluaXRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgaWYgKCFpbnB1dC5kYXRhKCd4ZHNvZnRfZGF0ZXRpbWVwaWNrZXInKSlcbiAgICAgICAgICAgICAgICBjcmVhdGVEYXRlVGltZVBpY2tlcihpbnB1dCk7XG5cbiAgICAgICAgICAgICAgaW5wdXRcbiAgICAgICAgICAgICAgICAub2ZmKCdvcGVuLnhkc29mdCBmb2N1c2luLnhkc29mdCBtb3VzZWRvd24ueGRzb2Z0JywgaW5pdE9uQWN0aW9uQ2FsbGJhY2spXG4gICAgICAgICAgICAgICAgLnRyaWdnZXIoJ29wZW4ueGRzb2Z0Jyk7XG4gICAgICAgICAgICB9LCAxMDApO1xuXG4gICAgICAgICAgfSk7XG4gICAgICB9LFxuXG4gICAgICBjcmVhdGVEYXRlVGltZVBpY2tlciA9IGZ1bmN0aW9uKGlucHV0KSB7XG5cbiAgICAgICAgdmFyIGRhdGV0aW1lcGlja2VyID0gJCgnPGRpdiAnICsgKG9wdGlvbnMuaWQgPyAnaWQ9XCInICsgb3B0aW9ucy5pZCArICdcIicgOiAnJykgKyAnICcgKyAob3B0aW9ucy5zdHlsZSA/ICdzdHlsZT1cIicgKyBvcHRpb25zLnN0eWxlICsgJ1wiJyA6ICcnKSArICcgY2xhc3M9XCJ4ZHNvZnRfZGF0ZXRpbWVwaWNrZXIgeGRzb2Z0X25vc2VsZWN0ICcgKyAob3B0aW9ucy53ZWVrcyA/ICcgeGRzb2Z0X3Nob3d3ZWVrcycgOiAnJykgKyBvcHRpb25zLmNsYXNzTmFtZSArICdcIj48L2Rpdj4nKSxcbiAgICAgICAgICB4ZHNvZnRfY29weXJpZ2h0ID0gJCgnPGRpdiBjbGFzcz1cInhkc29mdF9jb3B5cmlnaHRcIj48YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cDovL3hkc29mdC5uZXQvanFwbHVnaW5zL2RhdGV0aW1lcGlja2VyL1wiPnhkc29mdC5uZXQ8L2E+PC9kaXY+JyksXG4gICAgICAgICAgZGF0ZXBpY2tlciA9ICQoJzxkaXYgY2xhc3M9XCJ4ZHNvZnRfZGF0ZXBpY2tlciBhY3RpdmVcIj48L2Rpdj4nKSxcbiAgICAgICAgICBtb3VudGhfcGlja2VyID0gJCgnPGRpdiBjbGFzcz1cInhkc29mdF9tb3VudGhwaWNrZXJcIj48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInhkc29mdF9wcmV2XCI+PC9idXR0b24+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJ4ZHNvZnRfdG9kYXlfYnV0dG9uXCI+PC9idXR0b24+PGRpdiBjbGFzcz1cInhkc29mdF9sYWJlbCB4ZHNvZnRfbW9udGhcIj48c3Bhbj48L3NwYW4+PC9kaXY+PGRpdiBjbGFzcz1cInhkc29mdF9sYWJlbCB4ZHNvZnRfeWVhclwiPjxzcGFuPjwvc3Bhbj48L2Rpdj48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInhkc29mdF9uZXh0XCI+PC9idXR0b24+PC9kaXY+JyksXG4gICAgICAgICAgY2FsZW5kYXIgPSAkKCc8ZGl2IGNsYXNzPVwieGRzb2Z0X2NhbGVuZGFyXCI+PC9kaXY+JyksXG4gICAgICAgICAgdGltZXBpY2tlciA9ICQoJzxkaXYgY2xhc3M9XCJ4ZHNvZnRfdGltZXBpY2tlciBhY3RpdmVcIj48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInhkc29mdF9wcmV2XCI+PC9idXR0b24+PGRpdiBjbGFzcz1cInhkc29mdF90aW1lX2JveFwiPjwvZGl2PjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwieGRzb2Z0X25leHRcIj48L2J1dHRvbj48L2Rpdj4nKSxcbiAgICAgICAgICB0aW1lYm94cGFyZW50ID0gdGltZXBpY2tlci5maW5kKCcueGRzb2Z0X3RpbWVfYm94JykuZXEoMCksXG4gICAgICAgICAgdGltZWJveCA9ICQoJzxkaXYgY2xhc3M9XCJ4ZHNvZnRfdGltZV92YXJpYW50XCI+PC9kaXY+JyksXG4gICAgICAgICAgc2Nyb2xsYmFyID0gJCgnPGRpdiBjbGFzcz1cInhkc29mdF9zY3JvbGxiYXJcIj48L2Rpdj4nKSxcbiAgICAgICAgICBzY3JvbGxlciA9ICQoJzxkaXYgY2xhc3M9XCJ4ZHNvZnRfc2Nyb2xsZXJcIj48L2Rpdj4nKSxcbiAgICAgICAgICBtb250aHNlbGVjdCA9ICQoJzxkaXYgY2xhc3M9XCJ4ZHNvZnRfc2VsZWN0IHhkc29mdF9tb250aHNlbGVjdFwiPjxkaXY+PC9kaXY+PC9kaXY+JyksXG4gICAgICAgICAgeWVhcnNlbGVjdCA9ICQoJzxkaXYgY2xhc3M9XCJ4ZHNvZnRfc2VsZWN0IHhkc29mdF95ZWFyc2VsZWN0XCI+PGRpdj48L2Rpdj48L2Rpdj4nKTtcblxuICAgICAgICAvL2NvbnN0cnVjdG9yIGxlZ29cbiAgICAgICAgbW91bnRoX3BpY2tlclxuICAgICAgICAgIC5maW5kKCcueGRzb2Z0X21vbnRoIHNwYW4nKVxuICAgICAgICAgIC5hZnRlcihtb250aHNlbGVjdCk7XG4gICAgICAgIG1vdW50aF9waWNrZXJcbiAgICAgICAgICAuZmluZCgnLnhkc29mdF95ZWFyIHNwYW4nKVxuICAgICAgICAgIC5hZnRlcih5ZWFyc2VsZWN0KTtcblxuICAgICAgICBtb3VudGhfcGlja2VyXG4gICAgICAgICAgLmZpbmQoJy54ZHNvZnRfbW9udGgsLnhkc29mdF95ZWFyJylcbiAgICAgICAgICAub24oJ21vdXNlZG93bi54ZHNvZnQnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgbW91bnRoX3BpY2tlclxuICAgICAgICAgICAgICAuZmluZCgnLnhkc29mdF9zZWxlY3QnKVxuICAgICAgICAgICAgICAuaGlkZSgpO1xuXG4gICAgICAgICAgICB2YXIgc2VsZWN0ID0gJCh0aGlzKS5maW5kKCcueGRzb2Z0X3NlbGVjdCcpLmVxKDApLFxuICAgICAgICAgICAgICB2YWwgPSAwLFxuICAgICAgICAgICAgICB0b3AgPSAwO1xuXG4gICAgICAgICAgICBpZiAoX3hkc29mdF9kYXRldGltZS5jdXJyZW50VGltZSlcbiAgICAgICAgICAgICAgdmFsID0gX3hkc29mdF9kYXRldGltZS5jdXJyZW50VGltZVskKHRoaXMpLmhhc0NsYXNzKCd4ZHNvZnRfbW9udGgnKSA/ICdnZXRNb250aCcgOiAnZ2V0RnVsbFllYXInXSgpO1xuXG4gICAgICAgICAgICBzZWxlY3Quc2hvdygpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpdGVtcyA9IHNlbGVjdC5maW5kKCdkaXYueGRzb2Z0X29wdGlvbicpLCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGlmIChpdGVtcy5lcShpKS5kYXRhKCd2YWx1ZScpID09IHZhbCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9IGVsc2UgdG9wICs9IGl0ZW1zWzBdLm9mZnNldEhlaWdodDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2VsZWN0Lnhkc29mdFNjcm9sbGVyKHRvcCAvIChzZWxlY3QuY2hpbGRyZW4oKVswXS5vZmZzZXRIZWlnaHQgLSAoc2VsZWN0WzBdLmNsaWVudEhlaWdodCkpKTtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgbW91bnRoX3BpY2tlclxuICAgICAgICAgIC5maW5kKCcueGRzb2Z0X3NlbGVjdCcpXG4gICAgICAgICAgLnhkc29mdFNjcm9sbGVyKClcbiAgICAgICAgICAub24oJ21vdXNlZG93bi54ZHNvZnQnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLm9uKCdtb3VzZWRvd24ueGRzb2Z0JywgJy54ZHNvZnRfb3B0aW9uJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChfeGRzb2Z0X2RhdGV0aW1lICYmIF94ZHNvZnRfZGF0ZXRpbWUuY3VycmVudFRpbWUpXG4gICAgICAgICAgICAgIF94ZHNvZnRfZGF0ZXRpbWUuY3VycmVudFRpbWVbJCh0aGlzKS5wYXJlbnQoKS5wYXJlbnQoKS5oYXNDbGFzcygneGRzb2Z0X21vbnRoc2VsZWN0JykgPyAnc2V0TW9udGgnIDogJ3NldEZ1bGxZZWFyJ10oJCh0aGlzKS5kYXRhKCd2YWx1ZScpKTtcblxuICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5wYXJlbnQoKS5oaWRlKCk7XG5cbiAgICAgICAgICAgIGRhdGV0aW1lcGlja2VyLnRyaWdnZXIoJ3hjaGFuZ2UueGRzb2Z0Jyk7XG4gICAgICAgICAgICBvcHRpb25zLm9uQ2hhbmdlTW9udGggJiYgb3B0aW9ucy5vbkNoYW5nZU1vbnRoLmNhbGwgJiYgb3B0aW9ucy5vbkNoYW5nZU1vbnRoLmNhbGwoZGF0ZXRpbWVwaWNrZXIsIF94ZHNvZnRfZGF0ZXRpbWUuY3VycmVudFRpbWUsIGRhdGV0aW1lcGlja2VyLmRhdGEoJ2lucHV0JykpO1xuICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgLy8gc2V0IG9wdGlvbnNcbiAgICAgICAgZGF0ZXRpbWVwaWNrZXIuc2V0T3B0aW9ucyA9IGZ1bmN0aW9uKF9vcHRpb25zKSB7XG4gICAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCBvcHRpb25zLCBfb3B0aW9ucyk7XG5cbiAgICAgICAgICBpZiAoX29wdGlvbnMuYWxsb3dUaW1lcyAmJiAkLmlzQXJyYXkoX29wdGlvbnMuYWxsb3dUaW1lcykgJiYgX29wdGlvbnMuYWxsb3dUaW1lcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIG9wdGlvbnNbJ2FsbG93VGltZXMnXSA9ICQuZXh0ZW5kKHRydWUsIFtdLCBfb3B0aW9ucy5hbGxvd1RpbWVzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoX29wdGlvbnMud2Vla2VuZHMgJiYgJC5pc0FycmF5KF9vcHRpb25zLndlZWtlbmRzKSAmJiBfb3B0aW9ucy53ZWVrZW5kcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIG9wdGlvbnNbJ3dlZWtlbmRzJ10gPSAkLmV4dGVuZCh0cnVlLCBbXSwgX29wdGlvbnMud2Vla2VuZHMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICgob3B0aW9ucy5vcGVuIHx8IG9wdGlvbnMub3BlbmVkKSAmJiAoIW9wdGlvbnMuaW5saW5lKSkge1xuICAgICAgICAgICAgaW5wdXQudHJpZ2dlcignb3Blbi54ZHNvZnQnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAob3B0aW9ucy5pbmxpbmUpIHtcbiAgICAgICAgICAgIHRyaWdnZXJBZnRlck9wZW4gPSB0cnVlO1xuICAgICAgICAgICAgZGF0ZXRpbWVwaWNrZXIuYWRkQ2xhc3MoJ3hkc29mdF9pbmxpbmUnKTtcbiAgICAgICAgICAgIGlucHV0LmFmdGVyKGRhdGV0aW1lcGlja2VyKS5oaWRlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG9wdGlvbnMuaW52ZXJzZUJ1dHRvbikge1xuICAgICAgICAgICAgb3B0aW9ucy5uZXh0ID0gJ3hkc29mdF9wcmV2JztcbiAgICAgICAgICAgIG9wdGlvbnMucHJldiA9ICd4ZHNvZnRfbmV4dCc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG9wdGlvbnMuZGF0ZXBpY2tlcilcbiAgICAgICAgICAgIGRhdGVwaWNrZXIuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRhdGVwaWNrZXIucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuXG4gICAgICAgICAgaWYgKG9wdGlvbnMudGltZXBpY2tlcilcbiAgICAgICAgICAgIHRpbWVwaWNrZXIuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRpbWVwaWNrZXIucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuXG4gICAgICAgICAgaWYgKG9wdGlvbnMudmFsdWUpIHtcbiAgICAgICAgICAgIGlucHV0ICYmIGlucHV0LnZhbCAmJiBpbnB1dC52YWwob3B0aW9ucy52YWx1ZSk7XG4gICAgICAgICAgICBfeGRzb2Z0X2RhdGV0aW1lLnNldEN1cnJlbnRUaW1lKG9wdGlvbnMudmFsdWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpc05hTihvcHRpb25zLmRheU9mV2Vla1N0YXJ0KSlcbiAgICAgICAgICAgIG9wdGlvbnMuZGF5T2ZXZWVrU3RhcnQgPSAwO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIG9wdGlvbnMuZGF5T2ZXZWVrU3RhcnQgPSBwYXJzZUludChvcHRpb25zLmRheU9mV2Vla1N0YXJ0KSAlIDc7XG5cbiAgICAgICAgICBpZiAoIW9wdGlvbnMudGltZXBpY2tlclNjcm9sbGJhcilcbiAgICAgICAgICAgIHNjcm9sbGJhci5oaWRlKCk7XG5cbiAgICAgICAgICBpZiAob3B0aW9ucy5taW5EYXRlICYmIC9eLSguKikkLy50ZXN0KG9wdGlvbnMubWluRGF0ZSkpIHtcbiAgICAgICAgICAgIG9wdGlvbnMubWluRGF0ZSA9IF94ZHNvZnRfZGF0ZXRpbWUuc3RyVG9EYXRlVGltZShvcHRpb25zLm1pbkRhdGUpLmRhdGVGb3JtYXQob3B0aW9ucy5mb3JtYXREYXRlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAob3B0aW9ucy5tYXhEYXRlICYmIC9eXFwrKC4qKSQvLnRlc3Qob3B0aW9ucy5tYXhEYXRlKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5tYXhEYXRlID0gX3hkc29mdF9kYXRldGltZS5zdHJUb0RhdGVUaW1lKG9wdGlvbnMubWF4RGF0ZSkuZGF0ZUZvcm1hdChvcHRpb25zLmZvcm1hdERhdGUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1vdW50aF9waWNrZXJcbiAgICAgICAgICAgIC5maW5kKCcueGRzb2Z0X3RvZGF5X2J1dHRvbicpXG4gICAgICAgICAgICAuY3NzKCd2aXNpYmlsaXR5JywgIW9wdGlvbnMudG9kYXlCdXR0b24gPyAnaGlkZGVuJyA6ICd2aXNpYmxlJyk7XG5cbiAgICAgICAgICBpZiAob3B0aW9ucy5tYXNrKSB7XG4gICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgZ2V0Q2FyZXRQb3MgPSBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuc2VsZWN0aW9uICYmIGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJhbmdlLmdldEJvb2ttYXJrKCkuY2hhckNvZGVBdCgyKSAtIDI7XG4gICAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zZXRTZWxlY3Rpb25SYW5nZSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0LnNlbGVjdGlvblN0YXJ0O1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgc2V0Q2FyZXRQb3MgPSBmdW5jdGlvbihub2RlLCBwb3MpIHtcbiAgICAgICAgICAgICAgICBub2RlID0gKHR5cGVvZiBub2RlID09IFwic3RyaW5nXCIgfHwgbm9kZSBpbnN0YW5jZW9mIFN0cmluZykgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChub2RlKSA6IG5vZGU7XG4gICAgICAgICAgICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChub2RlLmNyZWF0ZVRleHRSYW5nZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIHRleHRSYW5nZSA9IG5vZGUuY3JlYXRlVGV4dFJhbmdlKCk7XG4gICAgICAgICAgICAgICAgICB0ZXh0UmFuZ2UuY29sbGFwc2UodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICB0ZXh0UmFuZ2UubW92ZUVuZChwb3MpO1xuICAgICAgICAgICAgICAgICAgdGV4dFJhbmdlLm1vdmVTdGFydChwb3MpO1xuICAgICAgICAgICAgICAgICAgdGV4dFJhbmdlLnNlbGVjdCgpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChub2RlLnNldFNlbGVjdGlvblJhbmdlKSB7XG4gICAgICAgICAgICAgICAgICBub2RlLnNldFNlbGVjdGlvblJhbmdlKHBvcywgcG9zKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGlzVmFsaWRWYWx1ZSA9IGZ1bmN0aW9uKG1hc2ssIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlZyA9IG1hc2tcbiAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oW1xcW1xcXVxcL1xce1xcfVxcKFxcKVxcLVxcLlxcK117MX0pL2csICdcXFxcJDEnKVxuICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL18vZywgJ3tkaWdpdCt9JylcbiAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oWzAtOV17MX0pL2csICd7ZGlnaXQkMX0nKVxuICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xce2RpZ2l0KFswLTldezF9KVxcfS9nLCAnWzAtJDFfXXsxfScpXG4gICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFx7ZGlnaXRbXFwrXVxcfS9nLCAnWzAtOV9dezF9Jyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlZ0V4cChyZWcpLnRlc3QodmFsdWUpO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgaW5wdXQub2ZmKCdrZXlkb3duLnhkc29mdCcpO1xuICAgICAgICAgICAgc3dpdGNoICh0cnVlKSB7XG4gICAgICAgICAgICAgIGNhc2UgKG9wdGlvbnMubWFzayA9PT0gdHJ1ZSk6XG5cbiAgICAgICAgICAgICAgICBvcHRpb25zLm1hc2sgPSBvcHRpb25zLmZvcm1hdFxuICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1kvZywgJzk5OTknKVxuICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL0YvZywgJzk5OTknKVxuICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL20vZywgJzE5JylcbiAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9kL2csICczOScpXG4gICAgICAgICAgICAgICAgICAucmVwbGFjZSgvSC9nLCAnMjknKVxuICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL2kvZywgJzU5JylcbiAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9zL2csICc1OScpO1xuXG4gICAgICAgICAgICAgIGNhc2UgKCQudHlwZShvcHRpb25zLm1hc2spID09ICdzdHJpbmcnKTpcblxuICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZFZhbHVlKG9wdGlvbnMubWFzaywgaW5wdXQudmFsKCkpKVxuICAgICAgICAgICAgICAgICAgaW5wdXQudmFsKG9wdGlvbnMubWFzay5yZXBsYWNlKC9bMC05XS9nLCAnXycpKTtcblxuICAgICAgICAgICAgICAgIGlucHV0Lm9uKCdrZXlkb3duLnhkc29mdCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdmFsID0gdGhpcy52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAga2V5ID0gZXZlbnQud2hpY2g7XG5cbiAgICAgICAgICAgICAgICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICgoa2V5ID49IEtFWTAgJiYga2V5IDw9IEtFWTkpIHx8IChrZXkgPj0gX0tFWTAgJiYga2V5IDw9IF9LRVk5KSkgfHwgKGtleSA9PSBCQUNLU1BBQ0UgfHwga2V5ID09IERFTCk6XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHBvcyA9IGdldENhcmV0UG9zKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlnaXQgPSAoa2V5ICE9IEJBQ0tTUEFDRSAmJiBrZXkgIT0gREVMKSA/IFN0cmluZy5mcm9tQ2hhckNvZGUoKF9LRVkwIDw9IGtleSAmJiBrZXkgPD0gX0tFWTkpID8ga2V5IC0gS0VZMCA6IGtleSkgOiAnXyc7XG5cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoKGtleSA9PSBCQUNLU1BBQ0UgfHwga2V5ID09IERFTCkgJiYgcG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3MtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpZ2l0ID0gJ18nO1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgvW14wLTlfXS8udGVzdChvcHRpb25zLm1hc2suc3Vic3RyKHBvcywgMSkpICYmIHBvcyA8IG9wdGlvbnMubWFzay5sZW5ndGggJiYgcG9zID4gMClcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcyArPSAoa2V5ID09IEJBQ0tTUEFDRSB8fCBrZXkgPT0gREVMKSA/IC0xIDogMTtcblxuICAgICAgICAgICAgICAgICAgICAgIHZhbCA9IHZhbC5zdWJzdHIoMCwgcG9zKSArIGRpZ2l0ICsgdmFsLnN1YnN0cihwb3MgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoJC50cmltKHZhbCkgPT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9IG9wdGlvbnMubWFzay5yZXBsYWNlKC9bMC05XS9nLCAnXycpO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zID09IG9wdGlvbnMubWFzay5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgIHBvcyArPSAoa2V5ID09IEJBQ0tTUEFDRSB8fCBrZXkgPT0gREVMKSA/IDAgOiAxO1xuICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgvW14wLTlfXS8udGVzdChvcHRpb25zLm1hc2suc3Vic3RyKHBvcywgMSkpICYmIHBvcyA8IG9wdGlvbnMubWFzay5sZW5ndGggJiYgcG9zID4gMClcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcyArPSAoa2V5ID09IEJBQ0tTUEFDRSB8fCBrZXkgPT0gREVMKSA/IC0xIDogMTtcblxuICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkVmFsdWUob3B0aW9ucy5tYXNrLCB2YWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0Q2FyZXRQb3ModGhpcywgcG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCQudHJpbSh2YWwpID09ICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IG9wdGlvbnMubWFzay5yZXBsYWNlKC9bMC05XS9nLCAnXycpO1xuICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQudHJpZ2dlcignZXJyb3JfaW5wdXQueGRzb2Z0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICghIX4oW0FLRVksIENLRVksIFZLRVksIFpLRVksIFlLRVldLmluZGV4T2Yoa2V5KSkgJiYgY3RybERvd24pOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICEhfihbRVNDLCBBUlJPV1VQLCBBUlJPV0RPV04sIEFSUk9XTEVGVCwgQVJST1dSSUdIVCwgRjUsIENUUkxLRVksIFRBQiwgRU5URVJdLmluZGV4T2Yoa2V5KSk6XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAob3B0aW9ucy52YWxpZGF0ZU9uQmx1cikge1xuICAgICAgICAgICAgaW5wdXRcbiAgICAgICAgICAgICAgLm9mZignYmx1ci54ZHNvZnQnKVxuICAgICAgICAgICAgICAub24oJ2JsdXIueGRzb2Z0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuYWxsb3dCbGFuayAmJiAhJC50cmltKCQodGhpcykudmFsKCkpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgJCh0aGlzKS52YWwobnVsbCk7XG4gICAgICAgICAgICAgICAgICBkYXRldGltZXBpY2tlci5kYXRhKCd4ZHNvZnRfZGF0ZXRpbWUnKS5lbXB0eSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIURhdGUucGFyc2VEYXRlKCQodGhpcykudmFsKCksIG9wdGlvbnMuZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgICAgJCh0aGlzKS52YWwoKF94ZHNvZnRfZGF0ZXRpbWUubm93KCkpLmRhdGVGb3JtYXQob3B0aW9ucy5mb3JtYXQpKTtcbiAgICAgICAgICAgICAgICAgIGRhdGV0aW1lcGlja2VyLmRhdGEoJ3hkc29mdF9kYXRldGltZScpLnNldEN1cnJlbnRUaW1lKCQodGhpcykudmFsKCkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBkYXRldGltZXBpY2tlci5kYXRhKCd4ZHNvZnRfZGF0ZXRpbWUnKS5zZXRDdXJyZW50VGltZSgkKHRoaXMpLnZhbCgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGF0ZXRpbWVwaWNrZXIudHJpZ2dlcignY2hhbmdlZGF0ZXRpbWUueGRzb2Z0Jyk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvcHRpb25zLmRheU9mV2Vla1N0YXJ0UHJldiA9IChvcHRpb25zLmRheU9mV2Vla1N0YXJ0ID09IDApID8gNiA6IG9wdGlvbnMuZGF5T2ZXZWVrU3RhcnQgLSAxO1xuXG4gICAgICAgICAgZGF0ZXRpbWVwaWNrZXJcbiAgICAgICAgICAgIC50cmlnZ2VyKCd4Y2hhbmdlLnhkc29mdCcpXG4gICAgICAgICAgICAudHJpZ2dlcignYWZ0ZXJPcGVuLnhkc29mdCcpXG4gICAgICAgIH07XG5cbiAgICAgICAgZGF0ZXRpbWVwaWNrZXJcbiAgICAgICAgICAuZGF0YSgnb3B0aW9ucycsIG9wdGlvbnMpXG4gICAgICAgICAgLm9uKCdtb3VzZWRvd24ueGRzb2Z0JywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHllYXJzZWxlY3QuaGlkZSgpO1xuICAgICAgICAgICAgbW9udGhzZWxlY3QuaGlkZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBzY3JvbGxfZWxlbWVudCA9IHRpbWVwaWNrZXIuZmluZCgnLnhkc29mdF90aW1lX2JveCcpO1xuICAgICAgICBzY3JvbGxfZWxlbWVudC5hcHBlbmQodGltZWJveCk7XG4gICAgICAgIHNjcm9sbF9lbGVtZW50Lnhkc29mdFNjcm9sbGVyKCk7XG5cbiAgICAgICAgZGF0ZXRpbWVwaWNrZXIub24oJ2FmdGVyT3Blbi54ZHNvZnQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzY3JvbGxfZWxlbWVudC54ZHNvZnRTY3JvbGxlcigpO1xuICAgICAgICB9KTtcblxuICAgICAgICBkYXRldGltZXBpY2tlclxuICAgICAgICAgIC5hcHBlbmQoZGF0ZXBpY2tlcilcbiAgICAgICAgICAuYXBwZW5kKHRpbWVwaWNrZXIpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLndpdGhvdXRDb3B5cmlnaHQgIT09IHRydWUpXG4gICAgICAgICAgZGF0ZXRpbWVwaWNrZXJcbiAgICAgICAgICAuYXBwZW5kKHhkc29mdF9jb3B5cmlnaHQpO1xuXG4gICAgICAgIGRhdGVwaWNrZXJcbiAgICAgICAgICAuYXBwZW5kKG1vdW50aF9waWNrZXIpXG4gICAgICAgICAgLmFwcGVuZChjYWxlbmRhcik7XG5cbiAgICAgICAgJCgnYm9keScpLmFwcGVuZChkYXRldGltZXBpY2tlcik7XG5cbiAgICAgICAgdmFyIF94ZHNvZnRfZGF0ZXRpbWUgPSBuZXcgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICBfdGhpcy5ub3cgPSBmdW5jdGlvbihub3JlY3Vyc2lvbikge1xuICAgICAgICAgICAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuXG4gICAgICAgICAgICBpZiAoIW5vcmVjdXJzaW9uICYmIG9wdGlvbnMuZGVmYXVsdERhdGUpIHtcbiAgICAgICAgICAgICAgdmFyIGRhdGUgPSBfdGhpcy5zdHJ0b2RhdGUob3B0aW9ucy5kZWZhdWx0RGF0ZSk7XG4gICAgICAgICAgICAgIGQuc2V0RnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpKTtcbiAgICAgICAgICAgICAgZC5zZXRNb250aChkYXRlLmdldE1vbnRoKCkpO1xuICAgICAgICAgICAgICBkLnNldERhdGUoZGF0ZS5nZXREYXRlKCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy55ZWFyT2Zmc2V0KSB7XG4gICAgICAgICAgICAgIGQuc2V0RnVsbFllYXIoZC5nZXRGdWxsWWVhcigpICsgb3B0aW9ucy55ZWFyT2Zmc2V0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFub3JlY3Vyc2lvbiAmJiBvcHRpb25zLmRlZmF1bHRUaW1lKSB7XG4gICAgICAgICAgICAgIHZhciB0aW1lID0gX3RoaXMuc3RydG90aW1lKG9wdGlvbnMuZGVmYXVsdFRpbWUpO1xuICAgICAgICAgICAgICBkLnNldEhvdXJzKHRpbWUuZ2V0SG91cnMoKSk7XG4gICAgICAgICAgICAgIGQuc2V0TWludXRlcyh0aW1lLmdldE1pbnV0ZXMoKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgIH07XG5cblxuICAgICAgICAgIF90aGlzLmlzVmFsaWREYXRlID0gZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChkKSAhPT0gXCJbb2JqZWN0IERhdGVdXCIpXG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiAhaXNOYU4oZC5nZXRUaW1lKCkpO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBfdGhpcy5zZXRDdXJyZW50VGltZSA9IGZ1bmN0aW9uKGRUaW1lKSB7XG4gICAgICAgICAgICBfdGhpcy5jdXJyZW50VGltZSA9ICh0eXBlb2YgZFRpbWUgPT0gJ3N0cmluZycpID8gX3RoaXMuc3RyVG9EYXRlVGltZShkVGltZSkgOiBfdGhpcy5pc1ZhbGlkRGF0ZShkVGltZSkgPyBkVGltZSA6IF90aGlzLm5vdygpO1xuICAgICAgICAgICAgZGF0ZXRpbWVwaWNrZXIudHJpZ2dlcigneGNoYW5nZS54ZHNvZnQnKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgX3RoaXMuZW1wdHkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIF90aGlzLmN1cnJlbnRUaW1lID0gbnVsbDtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgX3RoaXMuZ2V0Q3VycmVudFRpbWUgPSBmdW5jdGlvbihkVGltZSkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmN1cnJlbnRUaW1lO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBfdGhpcy5uZXh0TW9udGggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBtb250aCA9IF90aGlzLmN1cnJlbnRUaW1lLmdldE1vbnRoKCkgKyAxO1xuICAgICAgICAgICAgaWYgKG1vbnRoID09IDEyKSB7XG4gICAgICAgICAgICAgIF90aGlzLmN1cnJlbnRUaW1lLnNldEZ1bGxZZWFyKF90aGlzLmN1cnJlbnRUaW1lLmdldEZ1bGxZZWFyKCkgKyAxKTtcbiAgICAgICAgICAgICAgbW9udGggPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuY3VycmVudFRpbWUuc2V0RGF0ZShcbiAgICAgICAgICAgICAgTWF0aC5taW4oXG4gICAgICAgICAgICAgICAgRGF0ZS5kYXlzSW5Nb250aFttb250aF0sXG4gICAgICAgICAgICAgICAgX3RoaXMuY3VycmVudFRpbWUuZ2V0RGF0ZSgpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBfdGhpcy5jdXJyZW50VGltZS5zZXRNb250aChtb250aCk7XG4gICAgICAgICAgICBvcHRpb25zLm9uQ2hhbmdlTW9udGggJiYgb3B0aW9ucy5vbkNoYW5nZU1vbnRoLmNhbGwgJiYgb3B0aW9ucy5vbkNoYW5nZU1vbnRoLmNhbGwoZGF0ZXRpbWVwaWNrZXIsIF94ZHNvZnRfZGF0ZXRpbWUuY3VycmVudFRpbWUsIGRhdGV0aW1lcGlja2VyLmRhdGEoJ2lucHV0JykpO1xuICAgICAgICAgICAgZGF0ZXRpbWVwaWNrZXIudHJpZ2dlcigneGNoYW5nZS54ZHNvZnQnKTtcbiAgICAgICAgICAgIHJldHVybiBtb250aDtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgX3RoaXMucHJldk1vbnRoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgbW9udGggPSBfdGhpcy5jdXJyZW50VGltZS5nZXRNb250aCgpIC0gMTtcbiAgICAgICAgICAgIGlmIChtb250aCA9PSAtMSkge1xuICAgICAgICAgICAgICBfdGhpcy5jdXJyZW50VGltZS5zZXRGdWxsWWVhcihfdGhpcy5jdXJyZW50VGltZS5nZXRGdWxsWWVhcigpIC0gMSk7XG4gICAgICAgICAgICAgIG1vbnRoID0gMTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5jdXJyZW50VGltZS5zZXREYXRlKFxuICAgICAgICAgICAgICBNYXRoLm1pbihcbiAgICAgICAgICAgICAgICBEYXRlLmRheXNJbk1vbnRoW21vbnRoXSxcbiAgICAgICAgICAgICAgICBfdGhpcy5jdXJyZW50VGltZS5nZXREYXRlKClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIF90aGlzLmN1cnJlbnRUaW1lLnNldE1vbnRoKG1vbnRoKTtcbiAgICAgICAgICAgIG9wdGlvbnMub25DaGFuZ2VNb250aCAmJiBvcHRpb25zLm9uQ2hhbmdlTW9udGguY2FsbCAmJiBvcHRpb25zLm9uQ2hhbmdlTW9udGguY2FsbChkYXRldGltZXBpY2tlciwgX3hkc29mdF9kYXRldGltZS5jdXJyZW50VGltZSwgZGF0ZXRpbWVwaWNrZXIuZGF0YSgnaW5wdXQnKSk7XG4gICAgICAgICAgICBkYXRldGltZXBpY2tlci50cmlnZ2VyKCd4Y2hhbmdlLnhkc29mdCcpO1xuICAgICAgICAgICAgcmV0dXJuIG1vbnRoO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBfdGhpcy5zdHJUb0RhdGVUaW1lID0gZnVuY3Rpb24oc0RhdGVUaW1lKSB7XG4gICAgICAgICAgICBpZiAoc0RhdGVUaW1lICYmIHNEYXRlVGltZSBpbnN0YW5jZW9mIERhdGUgJiYgX3RoaXMuaXNWYWxpZERhdGUoc0RhdGVUaW1lKSlcbiAgICAgICAgICAgICAgcmV0dXJuIHNEYXRlVGltZTtcblxuICAgICAgICAgICAgdmFyIHRtcERhdGUgPSBbXSxcbiAgICAgICAgICAgICAgdGltZU9mZnNldCwgY3VycmVudFRpbWU7XG5cbiAgICAgICAgICAgIGlmICgodG1wRGF0ZSA9IC9eKFxcK3xcXC0pKC4qKSQvLmV4ZWMoc0RhdGVUaW1lKSkgJiYgKHRtcERhdGVbMl0gPSBEYXRlLnBhcnNlRGF0ZSh0bXBEYXRlWzJdLCBvcHRpb25zLmZvcm1hdERhdGUpKSkge1xuICAgICAgICAgICAgICB0aW1lT2Zmc2V0ID0gdG1wRGF0ZVsyXS5nZXRUaW1lKCkgLSAodG1wRGF0ZVsyXS5nZXRUaW1lem9uZU9mZnNldCgpKSAqIDYwMDAwO1xuICAgICAgICAgICAgICBjdXJyZW50VGltZSA9IG5ldyBEYXRlKChfeGRzb2Z0X2RhdGV0aW1lLm5vdygpKS5nZXRUaW1lKCkgKyBwYXJzZUludCh0bXBEYXRlWzFdICsgJzEnKSAqIHRpbWVPZmZzZXQpO1xuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgIGN1cnJlbnRUaW1lID0gc0RhdGVUaW1lID8gRGF0ZS5wYXJzZURhdGUoc0RhdGVUaW1lLCBvcHRpb25zLmZvcm1hdCkgOiBfdGhpcy5ub3coKTtcblxuICAgICAgICAgICAgaWYgKCFfdGhpcy5pc1ZhbGlkRGF0ZShjdXJyZW50VGltZSkpXG4gICAgICAgICAgICAgIGN1cnJlbnRUaW1lID0gX3RoaXMubm93KCk7XG5cbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50VGltZTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgX3RoaXMuc3RydG9kYXRlID0gZnVuY3Rpb24oc0RhdGUpIHtcbiAgICAgICAgICAgIGlmIChzRGF0ZSAmJiBzRGF0ZSBpbnN0YW5jZW9mIERhdGUgJiYgX3RoaXMuaXNWYWxpZERhdGUoc0RhdGUpKVxuICAgICAgICAgICAgICByZXR1cm4gc0RhdGU7XG5cbiAgICAgICAgICAgIHZhciBjdXJyZW50VGltZSA9IHNEYXRlID8gRGF0ZS5wYXJzZURhdGUoc0RhdGUsIG9wdGlvbnMuZm9ybWF0RGF0ZSkgOiBfdGhpcy5ub3codHJ1ZSk7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmlzVmFsaWREYXRlKGN1cnJlbnRUaW1lKSlcbiAgICAgICAgICAgICAgY3VycmVudFRpbWUgPSBfdGhpcy5ub3codHJ1ZSk7XG5cbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50VGltZTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgX3RoaXMuc3RydG90aW1lID0gZnVuY3Rpb24oc1RpbWUpIHtcbiAgICAgICAgICAgIGlmIChzVGltZSAmJiBzVGltZSBpbnN0YW5jZW9mIERhdGUgJiYgX3RoaXMuaXNWYWxpZERhdGUoc1RpbWUpKVxuICAgICAgICAgICAgICByZXR1cm4gc1RpbWU7XG5cbiAgICAgICAgICAgIHZhciBjdXJyZW50VGltZSA9IHNUaW1lID8gRGF0ZS5wYXJzZURhdGUoc1RpbWUsIG9wdGlvbnMuZm9ybWF0VGltZSkgOiBfdGhpcy5ub3coKTtcbiAgICAgICAgICAgIGlmICghX3RoaXMuaXNWYWxpZERhdGUoY3VycmVudFRpbWUpKVxuICAgICAgICAgICAgICBjdXJyZW50VGltZSA9IF90aGlzLm5vdyh0cnVlKTtcblxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRUaW1lO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBfdGhpcy5zdHIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5jdXJyZW50VGltZS5kYXRlRm9ybWF0KG9wdGlvbnMuZm9ybWF0KTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgX3RoaXMuY3VycmVudFRpbWUgPSB0aGlzLm5vdygpO1xuICAgICAgICB9O1xuICAgICAgICBtb3VudGhfcGlja2VyXG4gICAgICAgICAgLmZpbmQoJy54ZHNvZnRfdG9kYXlfYnV0dG9uJylcbiAgICAgICAgICAub24oJ21vdXNlZG93bi54ZHNvZnQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGRhdGV0aW1lcGlja2VyLmRhdGEoJ2NoYW5nZWQnLCB0cnVlKTtcbiAgICAgICAgICAgIF94ZHNvZnRfZGF0ZXRpbWUuc2V0Q3VycmVudFRpbWUoMCk7XG4gICAgICAgICAgICBkYXRldGltZXBpY2tlci50cmlnZ2VyKCdhZnRlck9wZW4ueGRzb2Z0Jyk7XG4gICAgICAgICAgfSkub24oJ2RibGNsaWNrLnhkc29mdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5wdXQudmFsKF94ZHNvZnRfZGF0ZXRpbWUuc3RyKCkpO1xuICAgICAgICAgICAgZGF0ZXRpbWVwaWNrZXIudHJpZ2dlcignY2xvc2UueGRzb2Z0Jyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIG1vdW50aF9waWNrZXJcbiAgICAgICAgICAuZmluZCgnLnhkc29mdF9wcmV2LC54ZHNvZnRfbmV4dCcpXG4gICAgICAgICAgLm9uKCdtb3VzZWRvd24ueGRzb2Z0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpLFxuICAgICAgICAgICAgICB0aW1lciA9IDAsXG4gICAgICAgICAgICAgIHN0b3AgPSBmYWxzZTtcblxuICAgICAgICAgICAgKGZ1bmN0aW9uIGFyZ3VtZW50c19jYWxsZWUxKHYpIHtcbiAgICAgICAgICAgICAgdmFyIG1vbnRoID0gX3hkc29mdF9kYXRldGltZS5jdXJyZW50VGltZS5nZXRNb250aCgpO1xuICAgICAgICAgICAgICBpZiAoJHRoaXMuaGFzQ2xhc3Mob3B0aW9ucy5uZXh0KSkge1xuICAgICAgICAgICAgICAgIF94ZHNvZnRfZGF0ZXRpbWUubmV4dE1vbnRoKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHRoaXMuaGFzQ2xhc3Mob3B0aW9ucy5wcmV2KSkge1xuICAgICAgICAgICAgICAgIF94ZHNvZnRfZGF0ZXRpbWUucHJldk1vbnRoKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKG9wdGlvbnMubW9udGhDaGFuZ2VTcGlubmVyKSB7XG4gICAgICAgICAgICAgICAgIXN0b3AgJiYgKHRpbWVyID0gc2V0VGltZW91dChhcmd1bWVudHNfY2FsbGVlMSwgdiA/IHYgOiAxMDApKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkoNTAwKTtcblxuICAgICAgICAgICAgJChbZG9jdW1lbnQuYm9keSwgd2luZG93XSkub24oJ21vdXNldXAueGRzb2Z0JywgZnVuY3Rpb24gYXJndW1lbnRzX2NhbGxlZTIoKSB7XG4gICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgICAgICAgIHN0b3AgPSB0cnVlO1xuICAgICAgICAgICAgICAkKFtkb2N1bWVudC5ib2R5LCB3aW5kb3ddKS5vZmYoJ21vdXNldXAueGRzb2Z0JywgYXJndW1lbnRzX2NhbGxlZTIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgdGltZXBpY2tlclxuICAgICAgICAgIC5maW5kKCcueGRzb2Z0X3ByZXYsLnhkc29mdF9uZXh0JylcbiAgICAgICAgICAub24oJ21vdXNlZG93bi54ZHNvZnQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyksXG4gICAgICAgICAgICAgIHRpbWVyID0gMCxcbiAgICAgICAgICAgICAgc3RvcCA9IGZhbHNlLFxuICAgICAgICAgICAgICBwZXJpb2QgPSAxMTA7XG4gICAgICAgICAgICAoZnVuY3Rpb24gYXJndW1lbnRzX2NhbGxlZTQodikge1xuICAgICAgICAgICAgICB2YXIgcGhlaWdodCA9IHRpbWVib3hwYXJlbnRbMF0uY2xpZW50SGVpZ2h0LFxuICAgICAgICAgICAgICAgIGhlaWdodCA9IHRpbWVib3hbMF0ub2Zmc2V0SGVpZ2h0LFxuICAgICAgICAgICAgICAgIHRvcCA9IE1hdGguYWJzKHBhcnNlSW50KHRpbWVib3guY3NzKCdtYXJnaW5Ub3AnKSkpO1xuICAgICAgICAgICAgICBpZiAoJHRoaXMuaGFzQ2xhc3Mob3B0aW9ucy5uZXh0KSAmJiAoaGVpZ2h0IC0gcGhlaWdodCkgLSBvcHRpb25zLnRpbWVIZWlnaHRJblRpbWVQaWNrZXIgPj0gdG9wKSB7XG4gICAgICAgICAgICAgICAgdGltZWJveC5jc3MoJ21hcmdpblRvcCcsICctJyArICh0b3AgKyBvcHRpb25zLnRpbWVIZWlnaHRJblRpbWVQaWNrZXIpICsgJ3B4JylcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICgkdGhpcy5oYXNDbGFzcyhvcHRpb25zLnByZXYpICYmIHRvcCAtIG9wdGlvbnMudGltZUhlaWdodEluVGltZVBpY2tlciA+PSAwKSB7XG4gICAgICAgICAgICAgICAgdGltZWJveC5jc3MoJ21hcmdpblRvcCcsICctJyArICh0b3AgLSBvcHRpb25zLnRpbWVIZWlnaHRJblRpbWVQaWNrZXIpICsgJ3B4JylcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0aW1lYm94cGFyZW50LnRyaWdnZXIoJ3Njcm9sbF9lbGVtZW50Lnhkc29mdF9zY3JvbGxlcicsIFtNYXRoLmFicyhwYXJzZUludCh0aW1lYm94LmNzcygnbWFyZ2luVG9wJykpIC8gKGhlaWdodCAtIHBoZWlnaHQpKV0pO1xuICAgICAgICAgICAgICBwZXJpb2QgPSAocGVyaW9kID4gMTApID8gMTAgOiBwZXJpb2QgLSAxMDtcbiAgICAgICAgICAgICAgIXN0b3AgJiYgKHRpbWVyID0gc2V0VGltZW91dChhcmd1bWVudHNfY2FsbGVlNCwgdiA/IHYgOiBwZXJpb2QpKTtcbiAgICAgICAgICAgIH0pKDUwMCk7XG4gICAgICAgICAgICAkKFtkb2N1bWVudC5ib2R5LCB3aW5kb3ddKS5vbignbW91c2V1cC54ZHNvZnQnLCBmdW5jdGlvbiBhcmd1bWVudHNfY2FsbGVlNSgpIHtcbiAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgICAgICAgc3RvcCA9IHRydWU7XG4gICAgICAgICAgICAgICQoW2RvY3VtZW50LmJvZHksIHdpbmRvd10pXG4gICAgICAgICAgICAgICAgLm9mZignbW91c2V1cC54ZHNvZnQnLCBhcmd1bWVudHNfY2FsbGVlNSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICB2YXIgeGNoYW5nZVRpbWVyID0gMDtcbiAgICAgICAgLy8gYmFzZSBoYW5kbGVyIC0gZ2VuZXJhdGluZyBhIGNhbGVuZGFyIGFuZCB0aW1lcGlja2VyXG4gICAgICAgIGRhdGV0aW1lcGlja2VyXG4gICAgICAgICAgLm9uKCd4Y2hhbmdlLnhkc29mdCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoeGNoYW5nZVRpbWVyKTtcbiAgICAgICAgICAgIHhjaGFuZ2VUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHZhciB0YWJsZSA9ICcnLFxuICAgICAgICAgICAgICAgIHN0YXJ0ID0gbmV3IERhdGUoX3hkc29mdF9kYXRldGltZS5jdXJyZW50VGltZS5nZXRGdWxsWWVhcigpLCBfeGRzb2Z0X2RhdGV0aW1lLmN1cnJlbnRUaW1lLmdldE1vbnRoKCksIDEsIDEyLCAwLCAwKSxcbiAgICAgICAgICAgICAgICBpID0gMCxcbiAgICAgICAgICAgICAgICB0b2RheSA9IF94ZHNvZnRfZGF0ZXRpbWUubm93KCk7XG5cbiAgICAgICAgICAgICAgd2hpbGUgKHN0YXJ0LmdldERheSgpICE9IG9wdGlvbnMuZGF5T2ZXZWVrU3RhcnQpXG4gICAgICAgICAgICAgICAgc3RhcnQuc2V0RGF0ZShzdGFydC5nZXREYXRlKCkgLSAxKTtcblxuICAgICAgICAgICAgICAvL2dlbmVyYXRlIGNhbGVuZGFyXG4gICAgICAgICAgICAgIHRhYmxlICs9ICc8dGFibGU+PHRoZWFkPjx0cj4nO1xuXG4gICAgICAgICAgICAgIGlmIChvcHRpb25zLndlZWtzKSB7XG4gICAgICAgICAgICAgICAgdGFibGUgKz0gJzx0aD48L3RoPic7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBkYXlzXG4gICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgNzsgaisrKSB7XG4gICAgICAgICAgICAgICAgdGFibGUgKz0gJzx0aD4nICsgb3B0aW9ucy5pMThuW29wdGlvbnMubGFuZ10uZGF5T2ZXZWVrWyhqICsgb3B0aW9ucy5kYXlPZldlZWtTdGFydCkgJSA3XSArICc8L3RoPic7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0YWJsZSArPSAnPC90cj48L3RoZWFkPic7XG4gICAgICAgICAgICAgIHRhYmxlICs9ICc8dGJvZHk+JztcbiAgICAgICAgICAgICAgdmFyIG1heERhdGUgPSBmYWxzZSxcbiAgICAgICAgICAgICAgICBtaW5EYXRlID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgaWYgKG9wdGlvbnMubWF4RGF0ZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBtYXhEYXRlID0gX3hkc29mdF9kYXRldGltZS5zdHJ0b2RhdGUob3B0aW9ucy5tYXhEYXRlKTtcbiAgICAgICAgICAgICAgICBtYXhEYXRlID0gbmV3IERhdGUobWF4RGF0ZS5nZXRGdWxsWWVhcigpLCBtYXhEYXRlLmdldE1vbnRoKCksIG1heERhdGUuZ2V0RGF0ZSgpLCAyMywgNTksIDU5LCA5OTkpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKG9wdGlvbnMubWluRGF0ZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBtaW5EYXRlID0gX3hkc29mdF9kYXRldGltZS5zdHJ0b2RhdGUob3B0aW9ucy5taW5EYXRlKTtcbiAgICAgICAgICAgICAgICBtaW5EYXRlID0gbmV3IERhdGUobWluRGF0ZS5nZXRGdWxsWWVhcigpLCBtaW5EYXRlLmdldE1vbnRoKCksIG1pbkRhdGUuZ2V0RGF0ZSgpKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHZhciBkLCB5LCBtLCB3LCBjbGFzc2VzID0gW10sXG4gICAgICAgICAgICAgICAgY3VzdG9tRGF0ZVNldHRpbmdzLCBuZXdSb3cgPSB0cnVlO1xuXG4gICAgICAgICAgICAgIHdoaWxlIChpIDwgX3hkc29mdF9kYXRldGltZS5jdXJyZW50VGltZS5jb3VudERheXNJbk1vbnRoKCkgfHwgc3RhcnQuZ2V0RGF5KCkgIT0gb3B0aW9ucy5kYXlPZldlZWtTdGFydCB8fCBfeGRzb2Z0X2RhdGV0aW1lLmN1cnJlbnRUaW1lLmdldE1vbnRoKCkgPT0gc3RhcnQuZ2V0TW9udGgoKSkge1xuICAgICAgICAgICAgICAgIGNsYXNzZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBpKys7XG5cbiAgICAgICAgICAgICAgICBkID0gc3RhcnQuZ2V0RGF0ZSgpO1xuICAgICAgICAgICAgICAgIHkgPSBzdGFydC5nZXRGdWxsWWVhcigpO1xuICAgICAgICAgICAgICAgIG0gPSBzdGFydC5nZXRNb250aCgpO1xuICAgICAgICAgICAgICAgIHcgPSBzdGFydC5nZXRXZWVrT2ZZZWFyKCk7XG5cbiAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2goJ3hkc29mdF9kYXRlJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5iZWZvcmVTaG93RGF5ICYmIG9wdGlvbnMuYmVmb3JlU2hvd0RheS5jYWxsKSB7XG4gICAgICAgICAgICAgICAgICBjdXN0b21EYXRlU2V0dGluZ3MgPSBvcHRpb25zLmJlZm9yZVNob3dEYXkuY2FsbChkYXRldGltZXBpY2tlciwgc3RhcnQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBjdXN0b21EYXRlU2V0dGluZ3MgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICgobWF4RGF0ZSAhPT0gZmFsc2UgJiYgc3RhcnQgPiBtYXhEYXRlKSB8fCAobWluRGF0ZSAhPT0gZmFsc2UgJiYgc3RhcnQgPCBtaW5EYXRlKSB8fCAoY3VzdG9tRGF0ZVNldHRpbmdzICYmIGN1c3RvbURhdGVTZXR0aW5nc1swXSA9PT0gZmFsc2UpKSB7XG4gICAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2goJ3hkc29mdF9kaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChjdXN0b21EYXRlU2V0dGluZ3MgJiYgY3VzdG9tRGF0ZVNldHRpbmdzWzFdICE9IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgIGNsYXNzZXMucHVzaChjdXN0b21EYXRlU2V0dGluZ3NbMV0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChfeGRzb2Z0X2RhdGV0aW1lLmN1cnJlbnRUaW1lLmdldE1vbnRoKCkgIT0gbSkgY2xhc3Nlcy5wdXNoKCd4ZHNvZnRfb3RoZXJfbW9udGgnKTtcblxuICAgICAgICAgICAgICAgIGlmICgob3B0aW9ucy5kZWZhdWx0U2VsZWN0IHx8IGRhdGV0aW1lcGlja2VyLmRhdGEoJ2NoYW5nZWQnKSkgJiYgX3hkc29mdF9kYXRldGltZS5jdXJyZW50VGltZS5kYXRlRm9ybWF0KG9wdGlvbnMuZm9ybWF0RGF0ZSkgPT0gc3RhcnQuZGF0ZUZvcm1hdChvcHRpb25zLmZvcm1hdERhdGUpKSB7XG4gICAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2goJ3hkc29mdF9jdXJyZW50Jyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRvZGF5LmRhdGVGb3JtYXQob3B0aW9ucy5mb3JtYXREYXRlKSA9PSBzdGFydC5kYXRlRm9ybWF0KG9wdGlvbnMuZm9ybWF0RGF0ZSkpIHtcbiAgICAgICAgICAgICAgICAgIGNsYXNzZXMucHVzaCgneGRzb2Z0X3RvZGF5Jyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0LmdldERheSgpID09IDAgfHwgc3RhcnQuZ2V0RGF5KCkgPT0gNiB8fCB+b3B0aW9ucy53ZWVrZW5kcy5pbmRleE9mKHN0YXJ0LmRhdGVGb3JtYXQob3B0aW9ucy5mb3JtYXREYXRlKSkpIHtcbiAgICAgICAgICAgICAgICAgIGNsYXNzZXMucHVzaCgneGRzb2Z0X3dlZWtlbmQnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5iZWZvcmVTaG93RGF5ICYmIHR5cGVvZiBvcHRpb25zLmJlZm9yZVNob3dEYXkgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKG9wdGlvbnMuYmVmb3JlU2hvd0RheShzdGFydCkpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG5ld1Jvdykge1xuICAgICAgICAgICAgICAgICAgdGFibGUgKz0gJzx0cj4nO1xuICAgICAgICAgICAgICAgICAgbmV3Um93ID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLndlZWtzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhYmxlICs9ICc8dGg+JyArIHcgKyAnPC90aD4nO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRhYmxlICs9ICc8dGQgZGF0YS1kYXRlPVwiJyArIGQgKyAnXCIgZGF0YS1tb250aD1cIicgKyBtICsgJ1wiIGRhdGEteWVhcj1cIicgKyB5ICsgJ1wiJyArICcgY2xhc3M9XCJ4ZHNvZnRfZGF0ZSB4ZHNvZnRfZGF5X29mX3dlZWsnICsgc3RhcnQuZ2V0RGF5KCkgKyAnICcgKyBjbGFzc2VzLmpvaW4oJyAnKSArICdcIj4nICtcbiAgICAgICAgICAgICAgICAgICc8ZGl2PicgKyBkICsgJzwvZGl2PicgK1xuICAgICAgICAgICAgICAgICAgJzwvdGQ+JztcblxuICAgICAgICAgICAgICAgIGlmIChzdGFydC5nZXREYXkoKSA9PSBvcHRpb25zLmRheU9mV2Vla1N0YXJ0UHJldikge1xuICAgICAgICAgICAgICAgICAgdGFibGUgKz0gJzwvdHI+JztcbiAgICAgICAgICAgICAgICAgIG5ld1JvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc3RhcnQuc2V0RGF0ZShkICsgMSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGFibGUgKz0gJzwvdGJvZHk+PC90YWJsZT4nO1xuXG4gICAgICAgICAgICAgIGNhbGVuZGFyLmh0bWwodGFibGUpO1xuXG4gICAgICAgICAgICAgIG1vdW50aF9waWNrZXIuZmluZCgnLnhkc29mdF9sYWJlbCBzcGFuJykuZXEoMCkudGV4dChvcHRpb25zLmkxOG5bb3B0aW9ucy5sYW5nXS5tb250aHNbX3hkc29mdF9kYXRldGltZS5jdXJyZW50VGltZS5nZXRNb250aCgpXSk7XG4gICAgICAgICAgICAgIG1vdW50aF9waWNrZXIuZmluZCgnLnhkc29mdF9sYWJlbCBzcGFuJykuZXEoMSkudGV4dChfeGRzb2Z0X2RhdGV0aW1lLmN1cnJlbnRUaW1lLmdldEZ1bGxZZWFyKCkpO1xuXG4gICAgICAgICAgICAgIC8vIGdlbmVyYXRlIHRpbWVib3hcbiAgICAgICAgICAgICAgdmFyIHRpbWUgPSAnJyxcbiAgICAgICAgICAgICAgICBoID0gJycsXG4gICAgICAgICAgICAgICAgbSA9ICcnLFxuICAgICAgICAgICAgICAgIGxpbmVfdGltZSA9IGZ1bmN0aW9uIGxpbmVfdGltZShoLCBtKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbm93ID0gX3hkc29mdF9kYXRldGltZS5ub3coKTtcbiAgICAgICAgICAgICAgICAgIG5vdy5zZXRIb3VycyhoKTtcbiAgICAgICAgICAgICAgICAgIGggPSBwYXJzZUludChub3cuZ2V0SG91cnMoKSk7XG4gICAgICAgICAgICAgICAgICBub3cuc2V0TWludXRlcyhtKTtcbiAgICAgICAgICAgICAgICAgIG0gPSBwYXJzZUludChub3cuZ2V0TWludXRlcygpKTtcblxuICAgICAgICAgICAgICAgICAgY2xhc3NlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgaWYgKChvcHRpb25zLm1heFRpbWUgIT09IGZhbHNlICYmIF94ZHNvZnRfZGF0ZXRpbWUuc3RydG90aW1lKG9wdGlvbnMubWF4VGltZSkuZ2V0VGltZSgpIDwgbm93LmdldFRpbWUoKSkgfHwgKG9wdGlvbnMubWluVGltZSAhPT0gZmFsc2UgJiYgX3hkc29mdF9kYXRldGltZS5zdHJ0b3RpbWUob3B0aW9ucy5taW5UaW1lKS5nZXRUaW1lKCkgPiBub3cuZ2V0VGltZSgpKSlcbiAgICAgICAgICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCd4ZHNvZnRfZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICAgIGlmICgob3B0aW9ucy5pbml0VGltZSB8fCBvcHRpb25zLmRlZmF1bHRTZWxlY3QgfHwgZGF0ZXRpbWVwaWNrZXIuZGF0YSgnY2hhbmdlZCcpKSAmJiBwYXJzZUludChfeGRzb2Z0X2RhdGV0aW1lLmN1cnJlbnRUaW1lLmdldEhvdXJzKCkpID09IHBhcnNlSW50KGgpICYmIChvcHRpb25zLnN0ZXAgPiA1OSB8fCBNYXRoW29wdGlvbnMucm91bmRUaW1lXShfeGRzb2Z0X2RhdGV0aW1lLmN1cnJlbnRUaW1lLmdldE1pbnV0ZXMoKSAvIG9wdGlvbnMuc3RlcCkgKiBvcHRpb25zLnN0ZXAgPT0gcGFyc2VJbnQobSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmRlZmF1bHRTZWxlY3QgfHwgZGF0ZXRpbWVwaWNrZXIuZGF0YSgnY2hhbmdlZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCd4ZHNvZnRfY3VycmVudCcpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuaW5pdFRpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2goJ3hkc29mdF9pbml0X3RpbWUnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlSW50KHRvZGF5LmdldEhvdXJzKCkpID09IHBhcnNlSW50KGgpICYmIHBhcnNlSW50KHRvZGF5LmdldE1pbnV0ZXMoKSkgPT0gcGFyc2VJbnQobSkpXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzZXMucHVzaCgneGRzb2Z0X3RvZGF5Jyk7XG4gICAgICAgICAgICAgICAgICB0aW1lICs9ICc8ZGl2IGNsYXNzPVwieGRzb2Z0X3RpbWUgJyArIGNsYXNzZXMuam9pbignICcpICsgJ1wiIGRhdGEtaG91cj1cIicgKyBoICsgJ1wiIGRhdGEtbWludXRlPVwiJyArIG0gKyAnXCI+JyArIG5vdy5kYXRlRm9ybWF0KG9wdGlvbnMuZm9ybWF0VGltZSkgKyAnPC9kaXY+JztcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgIGlmICghb3B0aW9ucy5hbGxvd1RpbWVzIHx8ICEkLmlzQXJyYXkob3B0aW9ucy5hbGxvd1RpbWVzKSB8fCAhb3B0aW9ucy5hbGxvd1RpbWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gMDsgaSA8IChvcHRpb25zLmhvdXJzMTIgPyAxMiA6IDI0KTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgNjA7IGogKz0gb3B0aW9ucy5zdGVwKSB7XG4gICAgICAgICAgICAgICAgICAgIGggPSAoaSA8IDEwID8gJzAnIDogJycpICsgaTtcbiAgICAgICAgICAgICAgICAgICAgbSA9IChqIDwgMTAgPyAnMCcgOiAnJykgKyBqO1xuICAgICAgICAgICAgICAgICAgICBsaW5lX3RpbWUoaCwgbSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3B0aW9ucy5hbGxvd1RpbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICBoID0gX3hkc29mdF9kYXRldGltZS5zdHJ0b3RpbWUob3B0aW9ucy5hbGxvd1RpbWVzW2ldKS5nZXRIb3VycygpO1xuICAgICAgICAgICAgICAgICAgbSA9IF94ZHNvZnRfZGF0ZXRpbWUuc3RydG90aW1lKG9wdGlvbnMuYWxsb3dUaW1lc1tpXSkuZ2V0TWludXRlcygpO1xuICAgICAgICAgICAgICAgICAgbGluZV90aW1lKGgsIG0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHRpbWVib3guaHRtbCh0aW1lKTtcblxuICAgICAgICAgICAgICB2YXIgb3B0ID0gJycsXG4gICAgICAgICAgICAgICAgaSA9IDA7XG5cbiAgICAgICAgICAgICAgZm9yIChpID0gcGFyc2VJbnQob3B0aW9ucy55ZWFyU3RhcnQsIDEwKSArIG9wdGlvbnMueWVhck9mZnNldDsgaSA8PSBwYXJzZUludChvcHRpb25zLnllYXJFbmQsIDEwKSArIG9wdGlvbnMueWVhck9mZnNldDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgb3B0ICs9ICc8ZGl2IGNsYXNzPVwieGRzb2Z0X29wdGlvbiAnICsgKF94ZHNvZnRfZGF0ZXRpbWUuY3VycmVudFRpbWUuZ2V0RnVsbFllYXIoKSA9PSBpID8gJ3hkc29mdF9jdXJyZW50JyA6ICcnKSArICdcIiBkYXRhLXZhbHVlPVwiJyArIGkgKyAnXCI+JyArIGkgKyAnPC9kaXY+JztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB5ZWFyc2VsZWN0LmNoaWxkcmVuKCkuZXEoMClcbiAgICAgICAgICAgICAgICAuaHRtbChvcHQpO1xuXG4gICAgICAgICAgICAgIGZvciAoaSA9IDAsIG9wdCA9ICcnOyBpIDw9IDExOyBpKyspIHtcbiAgICAgICAgICAgICAgICBvcHQgKz0gJzxkaXYgY2xhc3M9XCJ4ZHNvZnRfb3B0aW9uICcgKyAoX3hkc29mdF9kYXRldGltZS5jdXJyZW50VGltZS5nZXRNb250aCgpID09IGkgPyAneGRzb2Z0X2N1cnJlbnQnIDogJycpICsgJ1wiIGRhdGEtdmFsdWU9XCInICsgaSArICdcIj4nICsgb3B0aW9ucy5pMThuW29wdGlvbnMubGFuZ10ubW9udGhzW2ldICsgJzwvZGl2Pic7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbW9udGhzZWxlY3QuY2hpbGRyZW4oKS5lcSgwKS5odG1sKG9wdCk7XG4gICAgICAgICAgICAgICQoZGF0ZXRpbWVwaWNrZXIpXG4gICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2dlbmVyYXRlLnhkc29mdCcpO1xuICAgICAgICAgICAgfSwgMTApO1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAub24oJ2FmdGVyT3Blbi54ZHNvZnQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnRpbWVwaWNrZXIpIHtcbiAgICAgICAgICAgICAgdmFyIGNsYXNzVHlwZTtcbiAgICAgICAgICAgICAgaWYgKHRpbWVib3guZmluZCgnLnhkc29mdF9jdXJyZW50JykubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY2xhc3NUeXBlID0gJy54ZHNvZnRfY3VycmVudCc7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodGltZWJveC5maW5kKCcueGRzb2Z0X2luaXRfdGltZScpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNsYXNzVHlwZSA9ICcueGRzb2Z0X2luaXRfdGltZSc7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoY2xhc3NUeXBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBoZWlnaHQgPSB0aW1lYm94cGFyZW50WzBdLmNsaWVudEhlaWdodCxcbiAgICAgICAgICAgICAgICAgIGhlaWdodCA9IHRpbWVib3hbMF0ub2Zmc2V0SGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgdG9wID0gdGltZWJveC5maW5kKGNsYXNzVHlwZSkuaW5kZXgoKSAqIG9wdGlvbnMudGltZUhlaWdodEluVGltZVBpY2tlciArIDE7XG4gICAgICAgICAgICAgICAgaWYgKChoZWlnaHQgLSBwaGVpZ2h0KSA8IHRvcClcbiAgICAgICAgICAgICAgICAgIHRvcCA9IGhlaWdodCAtIHBoZWlnaHQ7XG4gICAgICAgICAgICAgICAgdGltZWJveHBhcmVudC50cmlnZ2VyKCdzY3JvbGxfZWxlbWVudC54ZHNvZnRfc2Nyb2xsZXInLCBbcGFyc2VJbnQodG9wKSAvIChoZWlnaHQgLSBwaGVpZ2h0KV0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRpbWVib3hwYXJlbnQudHJpZ2dlcignc2Nyb2xsX2VsZW1lbnQueGRzb2Z0X3Njcm9sbGVyJywgWzBdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgIHZhciB0aW1lcmNsaWNrID0gMDtcblxuICAgICAgICBjYWxlbmRhclxuICAgICAgICAgIC5vbignY2xpY2sueGRzb2Z0JywgJ3RkJywgZnVuY3Rpb24oeGRldmVudCkge1xuICAgICAgICAgICAgeGRldmVudC5zdG9wUHJvcGFnYXRpb24oKTsgLy8gUHJldmVudHMgY2xvc2luZyBvZiBQb3AtdXBzLCBNb2RhbHMgYW5kIEZseW91dHMgaW4gQm9vdHN0cmFwXG4gICAgICAgICAgICB0aW1lcmNsaWNrKys7XG4gICAgICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpLFxuICAgICAgICAgICAgICBjdXJyZW50VGltZSA9IF94ZHNvZnRfZGF0ZXRpbWUuY3VycmVudFRpbWU7XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50VGltZSA9PT0gdW5kZWZpbmVkIHx8IGN1cnJlbnRUaW1lID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIF94ZHNvZnRfZGF0ZXRpbWUuY3VycmVudFRpbWUgPSBfeGRzb2Z0X2RhdGV0aW1lLm5vdygpO1xuICAgICAgICAgICAgICBjdXJyZW50VGltZSA9IF94ZHNvZnRfZGF0ZXRpbWUuY3VycmVudFRpbWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgkdGhpcy5oYXNDbGFzcygneGRzb2Z0X2Rpc2FibGVkJykpXG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgY3VycmVudFRpbWUuc2V0RGF0ZSgxKTtcbiAgICAgICAgICAgIGN1cnJlbnRUaW1lLnNldEZ1bGxZZWFyKCR0aGlzLmRhdGEoJ3llYXInKSk7XG4gICAgICAgICAgICBjdXJyZW50VGltZS5zZXRNb250aCgkdGhpcy5kYXRhKCdtb250aCcpKTtcbiAgICAgICAgICAgIGN1cnJlbnRUaW1lLnNldERhdGUoJHRoaXMuZGF0YSgnZGF0ZScpKTtcblxuICAgICAgICAgICAgZGF0ZXRpbWVwaWNrZXIudHJpZ2dlcignc2VsZWN0Lnhkc29mdCcsIFtjdXJyZW50VGltZV0pO1xuXG4gICAgICAgICAgICBpbnB1dC52YWwoX3hkc29mdF9kYXRldGltZS5zdHIoKSk7XG4gICAgICAgICAgICBpZiAoKHRpbWVyY2xpY2sgPiAxIHx8IChvcHRpb25zLmNsb3NlT25EYXRlU2VsZWN0ID09PSB0cnVlIHx8IChvcHRpb25zLmNsb3NlT25EYXRlU2VsZWN0ID09PSAwICYmICFvcHRpb25zLnRpbWVwaWNrZXIpKSkgJiYgIW9wdGlvbnMuaW5saW5lKSB7XG4gICAgICAgICAgICAgIGRhdGV0aW1lcGlja2VyLnRyaWdnZXIoJ2Nsb3NlLnhkc29mdCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5vblNlbGVjdERhdGUgJiYgb3B0aW9ucy5vblNlbGVjdERhdGUuY2FsbCkge1xuICAgICAgICAgICAgICBvcHRpb25zLm9uU2VsZWN0RGF0ZS5jYWxsKGRhdGV0aW1lcGlja2VyLCBfeGRzb2Z0X2RhdGV0aW1lLmN1cnJlbnRUaW1lLCBkYXRldGltZXBpY2tlci5kYXRhKCdpbnB1dCcpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGF0ZXRpbWVwaWNrZXIuZGF0YSgnY2hhbmdlZCcsIHRydWUpO1xuICAgICAgICAgICAgZGF0ZXRpbWVwaWNrZXIudHJpZ2dlcigneGNoYW5nZS54ZHNvZnQnKTtcbiAgICAgICAgICAgIGRhdGV0aW1lcGlja2VyLnRyaWdnZXIoJ2NoYW5nZWRhdGV0aW1lLnhkc29mdCcpO1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgdGltZXJjbGljayA9IDA7XG4gICAgICAgICAgICB9LCAyMDApO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIHRpbWVib3hcbiAgICAgICAgICAub24oJ2NsaWNrLnhkc29mdCcsICdkaXYnLCBmdW5jdGlvbih4ZGV2ZW50KSB7XG4gICAgICAgICAgICB4ZGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOyAvLyBOQUo6IFByZXZlbnRzIGNsb3Npbmcgb2YgUG9wLXVwcywgTW9kYWxzIGFuZCBGbHlvdXRzXG4gICAgICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpLFxuICAgICAgICAgICAgICBjdXJyZW50VGltZSA9IF94ZHNvZnRfZGF0ZXRpbWUuY3VycmVudFRpbWU7XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50VGltZSA9PT0gdW5kZWZpbmVkIHx8IGN1cnJlbnRUaW1lID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIF94ZHNvZnRfZGF0ZXRpbWUuY3VycmVudFRpbWUgPSBfeGRzb2Z0X2RhdGV0aW1lLm5vdygpO1xuICAgICAgICAgICAgICBjdXJyZW50VGltZSA9IF94ZHNvZnRfZGF0ZXRpbWUuY3VycmVudFRpbWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgkdGhpcy5oYXNDbGFzcygneGRzb2Z0X2Rpc2FibGVkJykpXG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGN1cnJlbnRUaW1lLnNldEhvdXJzKCR0aGlzLmRhdGEoJ2hvdXInKSk7XG4gICAgICAgICAgICBjdXJyZW50VGltZS5zZXRNaW51dGVzKCR0aGlzLmRhdGEoJ21pbnV0ZScpKTtcbiAgICAgICAgICAgIGRhdGV0aW1lcGlja2VyLnRyaWdnZXIoJ3NlbGVjdC54ZHNvZnQnLCBbY3VycmVudFRpbWVdKTtcblxuICAgICAgICAgICAgZGF0ZXRpbWVwaWNrZXIuZGF0YSgnaW5wdXQnKS52YWwoX3hkc29mdF9kYXRldGltZS5zdHIoKSk7XG5cbiAgICAgICAgICAgICFvcHRpb25zLmlubGluZSAmJiBkYXRldGltZXBpY2tlci50cmlnZ2VyKCdjbG9zZS54ZHNvZnQnKTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMub25TZWxlY3RUaW1lICYmIG9wdGlvbnMub25TZWxlY3RUaW1lLmNhbGwpIHtcbiAgICAgICAgICAgICAgb3B0aW9ucy5vblNlbGVjdFRpbWUuY2FsbChkYXRldGltZXBpY2tlciwgX3hkc29mdF9kYXRldGltZS5jdXJyZW50VGltZSwgZGF0ZXRpbWVwaWNrZXIuZGF0YSgnaW5wdXQnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkYXRldGltZXBpY2tlci5kYXRhKCdjaGFuZ2VkJywgdHJ1ZSk7XG4gICAgICAgICAgICBkYXRldGltZXBpY2tlci50cmlnZ2VyKCd4Y2hhbmdlLnhkc29mdCcpO1xuICAgICAgICAgICAgZGF0ZXRpbWVwaWNrZXIudHJpZ2dlcignY2hhbmdlZGF0ZXRpbWUueGRzb2Z0Jyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgZGF0ZXRpbWVwaWNrZXIubW91c2V3aGVlbCAmJiBkYXRlcGlja2VyLm1vdXNld2hlZWwoZnVuY3Rpb24oZXZlbnQsIGRlbHRhLCBkZWx0YVgsIGRlbHRhWSkge1xuICAgICAgICAgIGlmICghb3B0aW9ucy5zY3JvbGxNb250aClcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIGlmIChkZWx0YSA8IDApXG4gICAgICAgICAgICBfeGRzb2Z0X2RhdGV0aW1lLm5leHRNb250aCgpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIF94ZHNvZnRfZGF0ZXRpbWUucHJldk1vbnRoKCk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcblxuICAgICAgICBkYXRldGltZXBpY2tlci5tb3VzZXdoZWVsICYmIHRpbWVib3hwYXJlbnQudW5tb3VzZXdoZWVsKCkubW91c2V3aGVlbChmdW5jdGlvbihldmVudCwgZGVsdGEsIGRlbHRhWCwgZGVsdGFZKSB7XG4gICAgICAgICAgaWYgKCFvcHRpb25zLnNjcm9sbFRpbWUpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB2YXIgcGhlaWdodCA9IHRpbWVib3hwYXJlbnRbMF0uY2xpZW50SGVpZ2h0LFxuICAgICAgICAgICAgaGVpZ2h0ID0gdGltZWJveFswXS5vZmZzZXRIZWlnaHQsXG4gICAgICAgICAgICB0b3AgPSBNYXRoLmFicyhwYXJzZUludCh0aW1lYm94LmNzcygnbWFyZ2luVG9wJykpKSxcbiAgICAgICAgICAgIGZsID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZGVsdGEgPCAwICYmIChoZWlnaHQgLSBwaGVpZ2h0KSAtIG9wdGlvbnMudGltZUhlaWdodEluVGltZVBpY2tlciA+PSB0b3ApIHtcbiAgICAgICAgICAgIHRpbWVib3guY3NzKCdtYXJnaW5Ub3AnLCAnLScgKyAodG9wICsgb3B0aW9ucy50aW1lSGVpZ2h0SW5UaW1lUGlja2VyKSArICdweCcpO1xuICAgICAgICAgICAgZmwgPSBmYWxzZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGRlbHRhID4gMCAmJiB0b3AgLSBvcHRpb25zLnRpbWVIZWlnaHRJblRpbWVQaWNrZXIgPj0gMCkge1xuICAgICAgICAgICAgdGltZWJveC5jc3MoJ21hcmdpblRvcCcsICctJyArICh0b3AgLSBvcHRpb25zLnRpbWVIZWlnaHRJblRpbWVQaWNrZXIpICsgJ3B4Jyk7XG4gICAgICAgICAgICBmbCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aW1lYm94cGFyZW50LnRyaWdnZXIoJ3Njcm9sbF9lbGVtZW50Lnhkc29mdF9zY3JvbGxlcicsIFtNYXRoLmFicyhwYXJzZUludCh0aW1lYm94LmNzcygnbWFyZ2luVG9wJykpIC8gKGhlaWdodCAtIHBoZWlnaHQpKV0pO1xuICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIHJldHVybiBmbDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHRyaWdnZXJBZnRlck9wZW4gPSBmYWxzZTtcbiAgICAgICAgZGF0ZXRpbWVwaWNrZXJcbiAgICAgICAgICAub24oJ2NoYW5nZWRhdGV0aW1lLnhkc29mdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMub25DaGFuZ2VEYXRlVGltZSAmJiBvcHRpb25zLm9uQ2hhbmdlRGF0ZVRpbWUuY2FsbCkge1xuICAgICAgICAgICAgICB2YXIgJGlucHV0ID0gZGF0ZXRpbWVwaWNrZXIuZGF0YSgnaW5wdXQnKTtcbiAgICAgICAgICAgICAgb3B0aW9ucy5vbkNoYW5nZURhdGVUaW1lLmNhbGwoZGF0ZXRpbWVwaWNrZXIsIF94ZHNvZnRfZGF0ZXRpbWUuY3VycmVudFRpbWUsICRpbnB1dCk7XG4gICAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLnZhbHVlO1xuICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICAub24oJ2dlbmVyYXRlLnhkc29mdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMub25HZW5lcmF0ZSAmJiBvcHRpb25zLm9uR2VuZXJhdGUuY2FsbClcbiAgICAgICAgICAgICAgb3B0aW9ucy5vbkdlbmVyYXRlLmNhbGwoZGF0ZXRpbWVwaWNrZXIsIF94ZHNvZnRfZGF0ZXRpbWUuY3VycmVudFRpbWUsIGRhdGV0aW1lcGlja2VyLmRhdGEoJ2lucHV0JykpO1xuICAgICAgICAgICAgaWYgKHRyaWdnZXJBZnRlck9wZW4pIHtcbiAgICAgICAgICAgICAgZGF0ZXRpbWVwaWNrZXIudHJpZ2dlcignYWZ0ZXJPcGVuLnhkc29mdCcpO1xuICAgICAgICAgICAgICB0cmlnZ2VyQWZ0ZXJPcGVuID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICAub24oJ2NsaWNrLnhkc29mdCcsIGZ1bmN0aW9uKHhkZXZlbnQpIHtcbiAgICAgICAgICAgIHhkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7IC8vIFByZXZlbnRzIGNsb3Npbmcgb2YgUG9wLXVwcywgTW9kYWxzIGFuZCBGbHlvdXRzIGluIEJvb3RzdHJhcFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBjdXJyZW50X3RpbWVfaW5kZXggPSAwO1xuICAgICAgICBpbnB1dC5tb3VzZXdoZWVsICYmIGlucHV0Lm1vdXNld2hlZWwoZnVuY3Rpb24oZXZlbnQsIGRlbHRhLCBkZWx0YVgsIGRlbHRhWSkge1xuICAgICAgICAgIGlmICghb3B0aW9ucy5zY3JvbGxJbnB1dClcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIGlmICghb3B0aW9ucy5kYXRlcGlja2VyICYmIG9wdGlvbnMudGltZXBpY2tlcikge1xuICAgICAgICAgICAgY3VycmVudF90aW1lX2luZGV4ID0gdGltZWJveC5maW5kKCcueGRzb2Z0X2N1cnJlbnQnKS5sZW5ndGggPyB0aW1lYm94LmZpbmQoJy54ZHNvZnRfY3VycmVudCcpLmVxKDApLmluZGV4KCkgOiAwO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRfdGltZV9pbmRleCArIGRlbHRhID49IDAgJiYgY3VycmVudF90aW1lX2luZGV4ICsgZGVsdGEgPCB0aW1lYm94LmNoaWxkcmVuKCkubGVuZ3RoKVxuICAgICAgICAgICAgICBjdXJyZW50X3RpbWVfaW5kZXggKz0gZGVsdGE7XG4gICAgICAgICAgICB0aW1lYm94LmNoaWxkcmVuKCkuZXEoY3VycmVudF90aW1lX2luZGV4KS5sZW5ndGggJiYgdGltZWJveC5jaGlsZHJlbigpLmVxKGN1cnJlbnRfdGltZV9pbmRleCkudHJpZ2dlcignbW91c2Vkb3duJyk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmRhdGVwaWNrZXIgJiYgIW9wdGlvbnMudGltZXBpY2tlcikge1xuICAgICAgICAgICAgZGF0ZXBpY2tlci50cmlnZ2VyKGV2ZW50LCBbZGVsdGEsIGRlbHRhWCwgZGVsdGFZXSk7XG4gICAgICAgICAgICBpbnB1dC52YWwgJiYgaW5wdXQudmFsKF94ZHNvZnRfZGF0ZXRpbWUuc3RyKCkpO1xuICAgICAgICAgICAgZGF0ZXRpbWVwaWNrZXIudHJpZ2dlcignY2hhbmdlZGF0ZXRpbWUueGRzb2Z0Jyk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHNldFBvcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBvZmZzZXQgPSBkYXRldGltZXBpY2tlci5kYXRhKCdpbnB1dCcpLm9mZnNldCgpLFxuICAgICAgICAgICAgdG9wID0gb2Zmc2V0LnRvcCArIGRhdGV0aW1lcGlja2VyLmRhdGEoJ2lucHV0JylbMF0ub2Zmc2V0SGVpZ2h0IC0gMSxcbiAgICAgICAgICAgIGxlZnQgPSBvZmZzZXQubGVmdCxcbiAgICAgICAgICAgIHBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgICAgIGlmIChvcHRpb25zLmZpeGVkKSB7XG4gICAgICAgICAgICB0b3AgLT0gJCh3aW5kb3cpLnNjcm9sbFRvcCgpO1xuICAgICAgICAgICAgbGVmdCAtPSAkKHdpbmRvdykuc2Nyb2xsTGVmdCgpO1xuICAgICAgICAgICAgcG9zaXRpb24gPSBcImZpeGVkXCI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0b3AgKyBkYXRldGltZXBpY2tlclswXS5vZmZzZXRIZWlnaHQgPiAkKHdpbmRvdykuaGVpZ2h0KCkgKyAkKHdpbmRvdykuc2Nyb2xsVG9wKCkpXG4gICAgICAgICAgICAgIHRvcCA9IG9mZnNldC50b3AgLSBkYXRldGltZXBpY2tlclswXS5vZmZzZXRIZWlnaHQgKyAxO1xuICAgICAgICAgICAgaWYgKHRvcCA8IDApXG4gICAgICAgICAgICAgIHRvcCA9IDA7XG4gICAgICAgICAgICBpZiAobGVmdCArIGRhdGV0aW1lcGlja2VyWzBdLm9mZnNldFdpZHRoID4gJCh3aW5kb3cpLndpZHRoKCkpXG4gICAgICAgICAgICAgIGxlZnQgPSBvZmZzZXQubGVmdCAtIGRhdGV0aW1lcGlja2VyWzBdLm9mZnNldFdpZHRoICsgZGF0ZXRpbWVwaWNrZXIuZGF0YSgnaW5wdXQnKVswXS5vZmZzZXRXaWR0aDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGF0ZXRpbWVwaWNrZXIuY3NzKHtcbiAgICAgICAgICAgIGxlZnQ6IGxlZnQsXG4gICAgICAgICAgICB0b3A6IHRvcCxcbiAgICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBkYXRldGltZXBpY2tlclxuICAgICAgICAgIC5vbignb3Blbi54ZHNvZnQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBvblNob3cgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMub25TaG93ICYmIG9wdGlvbnMub25TaG93LmNhbGwpIHtcbiAgICAgICAgICAgICAgb25TaG93ID0gb3B0aW9ucy5vblNob3cuY2FsbChkYXRldGltZXBpY2tlciwgX3hkc29mdF9kYXRldGltZS5jdXJyZW50VGltZSwgZGF0ZXRpbWVwaWNrZXIuZGF0YSgnaW5wdXQnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob25TaG93ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICBkYXRldGltZXBpY2tlci5zaG93KCk7XG4gICAgICAgICAgICAgIHNldFBvcygpO1xuICAgICAgICAgICAgICAkKHdpbmRvdylcbiAgICAgICAgICAgICAgICAub2ZmKCdyZXNpemUueGRzb2Z0Jywgc2V0UG9zKVxuICAgICAgICAgICAgICAgIC5vbigncmVzaXplLnhkc29mdCcsIHNldFBvcyk7XG5cbiAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuY2xvc2VPbldpdGhvdXRDbGljaykge1xuICAgICAgICAgICAgICAgICQoW2RvY3VtZW50LmJvZHksIHdpbmRvd10pLm9uKCdtb3VzZWRvd24ueGRzb2Z0JywgZnVuY3Rpb24gYXJndW1lbnRzX2NhbGxlZTYoKSB7XG4gICAgICAgICAgICAgICAgICBkYXRldGltZXBpY2tlci50cmlnZ2VyKCdjbG9zZS54ZHNvZnQnKTtcbiAgICAgICAgICAgICAgICAgICQoW2RvY3VtZW50LmJvZHksIHdpbmRvd10pLm9mZignbW91c2Vkb3duLnhkc29mdCcsIGFyZ3VtZW50c19jYWxsZWU2KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLm9uKCdjbG9zZS54ZHNvZnQnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIG9uQ2xvc2UgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMub25DbG9zZSAmJiBvcHRpb25zLm9uQ2xvc2UuY2FsbCkge1xuICAgICAgICAgICAgICBvbkNsb3NlID0gb3B0aW9ucy5vbkNsb3NlLmNhbGwoZGF0ZXRpbWVwaWNrZXIsIF94ZHNvZnRfZGF0ZXRpbWUuY3VycmVudFRpbWUsIGRhdGV0aW1lcGlja2VyLmRhdGEoJ2lucHV0JykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9uQ2xvc2UgIT09IGZhbHNlICYmICFvcHRpb25zLm9wZW5lZCAmJiAhb3B0aW9ucy5pbmxpbmUpIHtcbiAgICAgICAgICAgICAgZGF0ZXRpbWVwaWNrZXIuaGlkZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZGF0YSgnaW5wdXQnLCBpbnB1dCk7XG5cbiAgICAgICAgdmFyIHRpbWVyID0gMCxcbiAgICAgICAgICB0aW1lcjEgPSAwO1xuXG4gICAgICAgIGRhdGV0aW1lcGlja2VyLmRhdGEoJ3hkc29mdF9kYXRldGltZScsIF94ZHNvZnRfZGF0ZXRpbWUpO1xuICAgICAgICBkYXRldGltZXBpY2tlci5zZXRPcHRpb25zKG9wdGlvbnMpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGdldEN1cnJlbnRWYWx1ZSgpIHtcblxuICAgICAgICAgIHZhciBjdCA9IGZhbHNlO1xuXG4gICAgICAgICAgaWYgKG9wdGlvbnMuc3RhcnREYXRlKSB7XG4gICAgICAgICAgICBjdCA9IF94ZHNvZnRfZGF0ZXRpbWUuc3RyVG9EYXRlVGltZShvcHRpb25zLnN0YXJ0RGF0ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN0ID0gb3B0aW9ucy52YWx1ZSA/IG9wdGlvbnMudmFsdWUgOiAoaW5wdXQgJiYgaW5wdXQudmFsICYmIGlucHV0LnZhbCgpKSA/IGlucHV0LnZhbCgpIDogJyc7XG4gICAgICAgICAgICBjdCA9IERhdGUucGFyc2VEYXRlKGN0LCBvcHRpb25zLmZvcm1hdCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGN0ICYmIF94ZHNvZnRfZGF0ZXRpbWUuaXNWYWxpZERhdGUoY3QpKSB7XG4gICAgICAgICAgICBkYXRldGltZXBpY2tlci5kYXRhKCdjaGFuZ2VkJywgdHJ1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN0ID0gJyc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGN0ID8gY3QgOiAwO1xuICAgICAgICB9XG4gICAgICAgIC8vZGVidWdnZXJcbiAgICAgICAgX3hkc29mdF9kYXRldGltZS5zZXRDdXJyZW50VGltZShnZXRDdXJyZW50VmFsdWUoKSk7XG5cbiAgICAgICAgaW5wdXRcbiAgICAgICAgICAuZGF0YSgneGRzb2Z0X2RhdGV0aW1lcGlja2VyJywgZGF0ZXRpbWVwaWNrZXIpXG4gICAgICAgICAgLm9uKCdvcGVuLnhkc29mdCBmb2N1c2luLnhkc29mdCBtb3VzZWRvd24ueGRzb2Z0JywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5pcygnOmRpc2FibGVkJykgfHwgaW5wdXQuaXMoJzpoaWRkZW4nKSB8fCAhaW5wdXQuaXMoJzp2aXNpYmxlJykgfHwgKGlucHV0LmRhdGEoJ3hkc29mdF9kYXRldGltZXBpY2tlcicpLmlzKCc6dmlzaWJsZScpICYmIG9wdGlvbnMuY2xvc2VPbklucHV0Q2xpY2spKVxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBpZiAoaW5wdXQuaXMoJzpkaXNhYmxlZCcpIHx8IGlucHV0LmlzKCc6aGlkZGVuJykgfHwgIWlucHV0LmlzKCc6dmlzaWJsZScpKVxuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgICB0cmlnZ2VyQWZ0ZXJPcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgX3hkc29mdF9kYXRldGltZS5zZXRDdXJyZW50VGltZShnZXRDdXJyZW50VmFsdWUoKSk7XG5cbiAgICAgICAgICAgICAgZGF0ZXRpbWVwaWNrZXIudHJpZ2dlcignb3Blbi54ZHNvZnQnKTtcbiAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAub24oJ2tleWRvd24ueGRzb2Z0JywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciB2YWwgPSB0aGlzLnZhbHVlLFxuICAgICAgICAgICAgICBrZXkgPSBldmVudC53aGljaDtcbiAgICAgICAgICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgICAgICAgICBjYXNlICEhfihbRU5URVJdLmluZGV4T2Yoa2V5KSk6XG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnRTZWxlY3RvciA9ICQoXCJpbnB1dDp2aXNpYmxlLHRleHRhcmVhOnZpc2libGVcIik7XG4gICAgICAgICAgICAgICAgZGF0ZXRpbWVwaWNrZXIudHJpZ2dlcignY2xvc2UueGRzb2Z0Jyk7XG4gICAgICAgICAgICAgICAgZWxlbWVudFNlbGVjdG9yLmVxKGVsZW1lbnRTZWxlY3Rvci5pbmRleCh0aGlzKSArIDEpLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICBjYXNlICEhfltUQUJdLmluZGV4T2Yoa2V5KTpcbiAgICAgICAgICAgICAgICBkYXRldGltZXBpY2tlci50cmlnZ2VyKCdjbG9zZS54ZHNvZnQnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBkZXN0cm95RGF0ZVRpbWVQaWNrZXIgPSBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB2YXIgZGF0ZXRpbWVwaWNrZXIgPSBpbnB1dC5kYXRhKCd4ZHNvZnRfZGF0ZXRpbWVwaWNrZXInKTtcbiAgICAgICAgaWYgKGRhdGV0aW1lcGlja2VyKSB7XG4gICAgICAgICAgZGF0ZXRpbWVwaWNrZXIuZGF0YSgneGRzb2Z0X2RhdGV0aW1lJywgbnVsbCk7XG4gICAgICAgICAgZGF0ZXRpbWVwaWNrZXIucmVtb3ZlKCk7XG4gICAgICAgICAgaW5wdXRcbiAgICAgICAgICAgIC5kYXRhKCd4ZHNvZnRfZGF0ZXRpbWVwaWNrZXInLCBudWxsKVxuICAgICAgICAgICAgLm9mZignb3Blbi54ZHNvZnQgZm9jdXNpbi54ZHNvZnQgZm9jdXNvdXQueGRzb2Z0IG1vdXNlZG93bi54ZHNvZnQgYmx1ci54ZHNvZnQga2V5ZG93bi54ZHNvZnQnKTtcbiAgICAgICAgICAkKHdpbmRvdykub2ZmKCdyZXNpemUueGRzb2Z0Jyk7XG4gICAgICAgICAgJChbd2luZG93LCBkb2N1bWVudC5ib2R5XSkub2ZmKCdtb3VzZWRvd24ueGRzb2Z0Jyk7XG4gICAgICAgICAgaW5wdXQudW5tb3VzZXdoZWVsICYmIGlucHV0LnVubW91c2V3aGVlbCgpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICQoZG9jdW1lbnQpXG4gICAgICAub2ZmKCdrZXlkb3duLnhkc29mdGN0cmwga2V5dXAueGRzb2Z0Y3RybCcpXG4gICAgICAub24oJ2tleWRvd24ueGRzb2Z0Y3RybCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PSBDVFJMS0VZKVxuICAgICAgICAgIGN0cmxEb3duID0gdHJ1ZTtcbiAgICAgIH0pXG4gICAgICAub24oJ2tleXVwLnhkc29mdGN0cmwnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmIChlLmtleUNvZGUgPT0gQ1RSTEtFWSlcbiAgICAgICAgICBjdHJsRG93biA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBkYXRldGltZXBpY2tlcjtcbiAgICAgIGlmIChkYXRldGltZXBpY2tlciA9ICQodGhpcykuZGF0YSgneGRzb2Z0X2RhdGV0aW1lcGlja2VyJykpIHtcbiAgICAgICAgaWYgKCQudHlwZShvcHQpID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHN3aXRjaCAob3B0KSB7XG4gICAgICAgICAgICBjYXNlICdzaG93JzpcbiAgICAgICAgICAgICAgJCh0aGlzKS5zZWxlY3QoKS5mb2N1cygpO1xuICAgICAgICAgICAgICBkYXRldGltZXBpY2tlci50cmlnZ2VyKCdvcGVuLnhkc29mdCcpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2hpZGUnOlxuICAgICAgICAgICAgICBkYXRldGltZXBpY2tlci50cmlnZ2VyKCdjbG9zZS54ZHNvZnQnKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkZXN0cm95JzpcbiAgICAgICAgICAgICAgZGVzdHJveURhdGVUaW1lUGlja2VyKCQodGhpcykpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3Jlc2V0JzpcbiAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgICBpZiAoIXRoaXMudmFsdWUgfHwgIWRhdGV0aW1lcGlja2VyLmRhdGEoJ3hkc29mdF9kYXRldGltZScpLmlzVmFsaWREYXRlKERhdGUucGFyc2VEYXRlKHRoaXMudmFsdWUsIG9wdGlvbnMuZm9ybWF0KSkpXG4gICAgICAgICAgICAgICAgZGF0ZXRpbWVwaWNrZXIuZGF0YSgnY2hhbmdlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgZGF0ZXRpbWVwaWNrZXIuZGF0YSgneGRzb2Z0X2RhdGV0aW1lJykuc2V0Q3VycmVudFRpbWUodGhpcy52YWx1ZSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXRldGltZXBpY2tlclxuICAgICAgICAgICAgLnNldE9wdGlvbnMob3B0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH0gZWxzZVxuICAgICAgaWYgKCgkLnR5cGUob3B0KSAhPT0gJ3N0cmluZycpKSB7XG4gICAgICAgIGlmICghb3B0aW9ucy5sYXp5SW5pdCB8fCBvcHRpb25zLm9wZW4gfHwgb3B0aW9ucy5pbmxpbmUpIHtcbiAgICAgICAgICBjcmVhdGVEYXRlVGltZVBpY2tlcigkKHRoaXMpKTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgbGF6eUluaXQoJCh0aGlzKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gICQuZm4uZGF0ZXRpbWVwaWNrZXIuZGVmYXVsdHMgPSBkZWZhdWx0X29wdGlvbnM7XG59KShqUXVlcnkpO1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDEzIEJyYW5kb24gQWFyb24gKGh0dHA6Ly9icmFuZG9uYWFyb24ubmV0KVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTElDRU5TRS50eHQpLlxuICpcbiAqIFRoYW5rcyB0bzogaHR0cDovL2Fkb21hcy5vcmcvamF2YXNjcmlwdC1tb3VzZS13aGVlbC8gZm9yIHNvbWUgcG9pbnRlcnMuXG4gKiBUaGFua3MgdG86IE1hdGhpYXMgQmFuayhodHRwOi8vd3d3Lm1hdGhpYXMtYmFuay5kZSkgZm9yIGEgc2NvcGUgYnVnIGZpeC5cbiAqIFRoYW5rcyB0bzogU2VhbXVzIExlYWh5IGZvciBhZGRpbmcgZGVsdGFYIGFuZCBkZWx0YVlcbiAqXG4gKiBWZXJzaW9uOiAzLjEuM1xuICpcbiAqIFJlcXVpcmVzOiAxLjIuMitcbiAqL1xuKGZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2pxdWVyeSddLCBmYWN0b3J5KVxuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeVxuICB9IGVsc2Uge1xuICAgIGZhY3RvcnkoalF1ZXJ5KVxuICB9XG59KGZ1bmN0aW9uKCQpIHtcbiAgdmFyIHRvRml4ID0gWyd3aGVlbCcsICdtb3VzZXdoZWVsJywgJ0RPTU1vdXNlU2Nyb2xsJywgJ01vek1vdXNlUGl4ZWxTY3JvbGwnXTtcbiAgdmFyIHRvQmluZCA9ICdvbndoZWVsJyBpbiBkb2N1bWVudCB8fCBkb2N1bWVudC5kb2N1bWVudE1vZGUgPj0gOSA/IFsnd2hlZWwnXSA6IFsnbW91c2V3aGVlbCcsICdEb21Nb3VzZVNjcm9sbCcsICdNb3pNb3VzZVBpeGVsU2Nyb2xsJ107XG4gIHZhciBsb3dlc3REZWx0YSwgbG93ZXN0RGVsdGFYWTtcbiAgaWYgKCQuZXZlbnQuZml4SG9va3MpIHtcbiAgICBmb3IgKHZhciBpID0gdG9GaXgubGVuZ3RoOyBpOykge1xuICAgICAgJC5ldmVudC5maXhIb29rc1t0b0ZpeFstLWldXSA9ICQuZXZlbnQubW91c2VIb29rc1xuICAgIH1cbiAgfVxuICAkLmV2ZW50LnNwZWNpYWwubW91c2V3aGVlbCA9IHtcbiAgICBzZXR1cDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSB0b0JpbmQubGVuZ3RoOyBpOykge1xuICAgICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0b0JpbmRbLS1pXSwgaGFuZGxlciwgZmFsc2UpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub25tb3VzZXdoZWVsID0gaGFuZGxlclxuICAgICAgfVxuICAgIH0sXG4gICAgdGVhcmRvd246IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICBmb3IgKHZhciBpID0gdG9CaW5kLmxlbmd0aDsgaTspIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIodG9CaW5kWy0taV0sIGhhbmRsZXIsIGZhbHNlKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9ubW91c2V3aGVlbCA9IG51bGxcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gICQuZm4uZXh0ZW5kKHtcbiAgICBtb3VzZXdoZWVsOiBmdW5jdGlvbihmbikge1xuICAgICAgcmV0dXJuIGZuID8gdGhpcy5iaW5kKFwibW91c2V3aGVlbFwiLCBmbikgOiB0aGlzLnRyaWdnZXIoXCJtb3VzZXdoZWVsXCIpXG4gICAgfSxcbiAgICB1bm1vdXNld2hlZWw6IGZ1bmN0aW9uKGZuKSB7XG4gICAgICByZXR1cm4gdGhpcy51bmJpbmQoXCJtb3VzZXdoZWVsXCIsIGZuKVxuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gaGFuZGxlcihldmVudCkge1xuICAgIHZhciBvcmdFdmVudCA9IGV2ZW50IHx8IHdpbmRvdy5ldmVudCxcbiAgICAgIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXG4gICAgICBkZWx0YSA9IDAsXG4gICAgICBkZWx0YVggPSAwLFxuICAgICAgZGVsdGFZID0gMCxcbiAgICAgIGFic0RlbHRhID0gMCxcbiAgICAgIGFic0RlbHRhWFkgPSAwLFxuICAgICAgZm47XG4gICAgZXZlbnQgPSAkLmV2ZW50LmZpeChvcmdFdmVudCk7XG4gICAgZXZlbnQudHlwZSA9IFwibW91c2V3aGVlbFwiO1xuICAgIGlmIChvcmdFdmVudC53aGVlbERlbHRhKSB7XG4gICAgICBkZWx0YSA9IG9yZ0V2ZW50LndoZWVsRGVsdGFcbiAgICB9XG4gICAgaWYgKG9yZ0V2ZW50LmRldGFpbCkge1xuICAgICAgZGVsdGEgPSBvcmdFdmVudC5kZXRhaWwgKiAtMVxuICAgIH1cbiAgICBpZiAob3JnRXZlbnQuZGVsdGFZKSB7XG4gICAgICBkZWx0YVkgPSBvcmdFdmVudC5kZWx0YVkgKiAtMTtcbiAgICAgIGRlbHRhID0gZGVsdGFZXG4gICAgfVxuICAgIGlmIChvcmdFdmVudC5kZWx0YVgpIHtcbiAgICAgIGRlbHRhWCA9IG9yZ0V2ZW50LmRlbHRhWDtcbiAgICAgIGRlbHRhID0gZGVsdGFYICogLTFcbiAgICB9XG4gICAgaWYgKG9yZ0V2ZW50LndoZWVsRGVsdGFZICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGRlbHRhWSA9IG9yZ0V2ZW50LndoZWVsRGVsdGFZXG4gICAgfVxuICAgIGlmIChvcmdFdmVudC53aGVlbERlbHRhWCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBkZWx0YVggPSBvcmdFdmVudC53aGVlbERlbHRhWCAqIC0xXG4gICAgfVxuICAgIGFic0RlbHRhID0gTWF0aC5hYnMoZGVsdGEpO1xuICAgIGlmICghbG93ZXN0RGVsdGEgfHwgYWJzRGVsdGEgPCBsb3dlc3REZWx0YSkge1xuICAgICAgbG93ZXN0RGVsdGEgPSBhYnNEZWx0YVxuICAgIH1cbiAgICBhYnNEZWx0YVhZID0gTWF0aC5tYXgoTWF0aC5hYnMoZGVsdGFZKSwgTWF0aC5hYnMoZGVsdGFYKSk7XG4gICAgaWYgKCFsb3dlc3REZWx0YVhZIHx8IGFic0RlbHRhWFkgPCBsb3dlc3REZWx0YVhZKSB7XG4gICAgICBsb3dlc3REZWx0YVhZID0gYWJzRGVsdGFYWVxuICAgIH1cbiAgICBmbiA9IGRlbHRhID4gMCA/ICdmbG9vcicgOiAnY2VpbCc7XG4gICAgZGVsdGEgPSBNYXRoW2ZuXShkZWx0YSAvIGxvd2VzdERlbHRhKTtcbiAgICBkZWx0YVggPSBNYXRoW2ZuXShkZWx0YVggLyBsb3dlc3REZWx0YVhZKTtcbiAgICBkZWx0YVkgPSBNYXRoW2ZuXShkZWx0YVkgLyBsb3dlc3REZWx0YVhZKTtcbiAgICBhcmdzLnVuc2hpZnQoZXZlbnQsIGRlbHRhLCBkZWx0YVgsIGRlbHRhWSk7XG4gICAgcmV0dXJuICgkLmV2ZW50LmRpc3BhdGNoIHx8ICQuZXZlbnQuaGFuZGxlKS5hcHBseSh0aGlzLCBhcmdzKVxuICB9XG59KSk7XG5cblxuLy8gUGFyc2UgYW5kIEZvcm1hdCBMaWJyYXJ5XG4vL2h0dHA6Ly93d3cueGFwcmIuY29tL2Jsb2cvMjAwNS8xMi8xMi9qYXZhc2NyaXB0LWNsb3N1cmVzLWZvci1ydW50aW1lLWVmZmljaWVuY3kvXG4vKlxuICogQ29weXJpZ2h0IChDKSAyMDA0IEJhcm9uIFNjaHdhcnR6IDxiYXJvbiBhdCBzZXF1ZW50IGRvdCBvcmc+XG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkgaXRcbiAqIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGVcbiAqIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgdmVyc2lvbiAyLjEuXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsIGJ1dCBXSVRIT1VUXG4gKiBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTU1xuICogRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmVcbiAqIGRldGFpbHMuXG4gKi9cbkRhdGUucGFyc2VGdW5jdGlvbnMgPSB7XG4gIGNvdW50OiAwXG59O1xuRGF0ZS5wYXJzZVJlZ2V4ZXMgPSBbXTtcbkRhdGUuZm9ybWF0RnVuY3Rpb25zID0ge1xuICBjb3VudDogMFxufTtcbkRhdGUucHJvdG90eXBlLmRhdGVGb3JtYXQgPSBmdW5jdGlvbihiKSB7XG4gIGlmIChiID09IFwidW5peHRpbWVcIikge1xuICAgIHJldHVybiBwYXJzZUludCh0aGlzLmdldFRpbWUoKSAvIDEwMDApO1xuICB9XG4gIGlmIChEYXRlLmZvcm1hdEZ1bmN0aW9uc1tiXSA9PSBudWxsKSB7XG4gICAgRGF0ZS5jcmVhdGVOZXdGb3JtYXQoYik7XG4gIH1cbiAgdmFyIGEgPSBEYXRlLmZvcm1hdEZ1bmN0aW9uc1tiXTtcbiAgcmV0dXJuIHRoaXNbYV0oKTtcbn07XG5EYXRlLmNyZWF0ZU5ld0Zvcm1hdCA9IGZ1bmN0aW9uKGZvcm1hdCkge1xuICB2YXIgZnVuY05hbWUgPSBcImZvcm1hdFwiICsgRGF0ZS5mb3JtYXRGdW5jdGlvbnMuY291bnQrKztcbiAgRGF0ZS5mb3JtYXRGdW5jdGlvbnNbZm9ybWF0XSA9IGZ1bmNOYW1lO1xuICB2YXIgY29kZSA9IFwiRGF0ZS5wcm90b3R5cGUuXCIgKyBmdW5jTmFtZSArIFwiID0gZnVuY3Rpb24oKSB7cmV0dXJuIFwiO1xuICB2YXIgc3BlY2lhbCA9IGZhbHNlO1xuICB2YXIgY2ggPSBcIlwiO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGZvcm1hdC5sZW5ndGg7ICsraSkge1xuICAgIGNoID0gZm9ybWF0LmNoYXJBdChpKTtcbiAgICBpZiAoIXNwZWNpYWwgJiYgY2ggPT0gXCJcXFxcXCIpIHtcbiAgICAgIHNwZWNpYWwgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc3BlY2lhbCkge1xuICAgICAgICBzcGVjaWFsID0gZmFsc2U7XG4gICAgICAgIGNvZGUgKz0gXCInXCIgKyBTdHJpbmcuZXNjYXBlKGNoKSArIFwiJyArIFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29kZSArPSBEYXRlLmdldEZvcm1hdENvZGUoY2gpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBldmFsKGNvZGUuc3Vic3RyaW5nKDAsIGNvZGUubGVuZ3RoIC0gMykgKyBcIjt9XCIpO1xufTtcbkRhdGUuZ2V0Rm9ybWF0Q29kZSA9IGZ1bmN0aW9uKGEpIHtcbiAgc3dpdGNoIChhKSB7XG4gICAgY2FzZSBcImRcIjpcbiAgICAgIHJldHVybiBcIlN0cmluZy5sZWZ0UGFkKHRoaXMuZ2V0RGF0ZSgpLCAyLCAnMCcpICsgXCI7XG4gICAgY2FzZSBcIkRcIjpcbiAgICAgIHJldHVybiBcIkRhdGUuZGF5TmFtZXNbdGhpcy5nZXREYXkoKV0uc3Vic3RyaW5nKDAsIDMpICsgXCI7XG4gICAgY2FzZSBcImpcIjpcbiAgICAgIHJldHVybiBcInRoaXMuZ2V0RGF0ZSgpICsgXCI7XG4gICAgY2FzZSBcImxcIjpcbiAgICAgIHJldHVybiBcIkRhdGUuZGF5TmFtZXNbdGhpcy5nZXREYXkoKV0gKyBcIjtcbiAgICBjYXNlIFwiU1wiOlxuICAgICAgcmV0dXJuIFwidGhpcy5nZXRTdWZmaXgoKSArIFwiO1xuICAgIGNhc2UgXCJ3XCI6XG4gICAgICByZXR1cm4gXCJ0aGlzLmdldERheSgpICsgXCI7XG4gICAgY2FzZSBcInpcIjpcbiAgICAgIHJldHVybiBcInRoaXMuZ2V0RGF5T2ZZZWFyKCkgKyBcIjtcbiAgICBjYXNlIFwiV1wiOlxuICAgICAgcmV0dXJuIFwidGhpcy5nZXRXZWVrT2ZZZWFyKCkgKyBcIjtcbiAgICBjYXNlIFwiRlwiOlxuICAgICAgcmV0dXJuIFwiRGF0ZS5tb250aE5hbWVzW3RoaXMuZ2V0TW9udGgoKV0gKyBcIjtcbiAgICBjYXNlIFwibVwiOlxuICAgICAgcmV0dXJuIFwiU3RyaW5nLmxlZnRQYWQodGhpcy5nZXRNb250aCgpICsgMSwgMiwgJzAnKSArIFwiO1xuICAgIGNhc2UgXCJNXCI6XG4gICAgICByZXR1cm4gXCJEYXRlLm1vbnRoTmFtZXNbdGhpcy5nZXRNb250aCgpXS5zdWJzdHJpbmcoMCwgMykgKyBcIjtcbiAgICBjYXNlIFwiblwiOlxuICAgICAgcmV0dXJuIFwiKHRoaXMuZ2V0TW9udGgoKSArIDEpICsgXCI7XG4gICAgY2FzZSBcInRcIjpcbiAgICAgIHJldHVybiBcInRoaXMuZ2V0RGF5c0luTW9udGgoKSArIFwiO1xuICAgIGNhc2UgXCJMXCI6XG4gICAgICByZXR1cm4gXCIodGhpcy5pc0xlYXBZZWFyKCkgPyAxIDogMCkgKyBcIjtcbiAgICBjYXNlIFwiWVwiOlxuICAgICAgcmV0dXJuIFwidGhpcy5nZXRGdWxsWWVhcigpICsgXCI7XG4gICAgY2FzZSBcInlcIjpcbiAgICAgIHJldHVybiBcIignJyArIHRoaXMuZ2V0RnVsbFllYXIoKSkuc3Vic3RyaW5nKDIsIDQpICsgXCI7XG4gICAgY2FzZSBcImFcIjpcbiAgICAgIHJldHVybiBcIih0aGlzLmdldEhvdXJzKCkgPCAxMiA/ICdhbScgOiAncG0nKSArIFwiO1xuICAgIGNhc2UgXCJBXCI6XG4gICAgICByZXR1cm4gXCIodGhpcy5nZXRIb3VycygpIDwgMTIgPyAnQU0nIDogJ1BNJykgKyBcIjtcbiAgICBjYXNlIFwiZ1wiOlxuICAgICAgcmV0dXJuIFwiKCh0aGlzLmdldEhvdXJzKCkgJTEyKSA/IHRoaXMuZ2V0SG91cnMoKSAlIDEyIDogMTIpICsgXCI7XG4gICAgY2FzZSBcIkdcIjpcbiAgICAgIHJldHVybiBcInRoaXMuZ2V0SG91cnMoKSArIFwiO1xuICAgIGNhc2UgXCJoXCI6XG4gICAgICByZXR1cm4gXCJTdHJpbmcubGVmdFBhZCgodGhpcy5nZXRIb3VycygpICUxMikgPyB0aGlzLmdldEhvdXJzKCkgJSAxMiA6IDEyLCAyLCAnMCcpICsgXCI7XG4gICAgY2FzZSBcIkhcIjpcbiAgICAgIHJldHVybiBcIlN0cmluZy5sZWZ0UGFkKHRoaXMuZ2V0SG91cnMoKSwgMiwgJzAnKSArIFwiO1xuICAgIGNhc2UgXCJpXCI6XG4gICAgICByZXR1cm4gXCJTdHJpbmcubGVmdFBhZCh0aGlzLmdldE1pbnV0ZXMoKSwgMiwgJzAnKSArIFwiO1xuICAgIGNhc2UgXCJzXCI6XG4gICAgICByZXR1cm4gXCJTdHJpbmcubGVmdFBhZCh0aGlzLmdldFNlY29uZHMoKSwgMiwgJzAnKSArIFwiO1xuICAgIGNhc2UgXCJPXCI6XG4gICAgICByZXR1cm4gXCJ0aGlzLmdldEdNVE9mZnNldCgpICsgXCI7XG4gICAgY2FzZSBcIlRcIjpcbiAgICAgIHJldHVybiBcInRoaXMuZ2V0VGltZXpvbmUoKSArIFwiO1xuICAgIGNhc2UgXCJaXCI6XG4gICAgICByZXR1cm4gXCIodGhpcy5nZXRUaW1lem9uZU9mZnNldCgpICogLTYwKSArIFwiO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gXCInXCIgKyBTdHJpbmcuZXNjYXBlKGEpICsgXCInICsgXCI7XG4gIH1cbn07XG5EYXRlLnBhcnNlRGF0ZSA9IGZ1bmN0aW9uKGEsIGMpIHtcbiAgaWYgKGMgPT0gXCJ1bml4dGltZVwiKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKCFpc05hTihwYXJzZUludChhKSkgPyBwYXJzZUludChhKSAqIDEwMDAgOiAwKTtcbiAgfVxuICBpZiAoRGF0ZS5wYXJzZUZ1bmN0aW9uc1tjXSA9PSBudWxsKSB7XG4gICAgRGF0ZS5jcmVhdGVQYXJzZXIoYyk7XG4gIH1cbiAgdmFyIGIgPSBEYXRlLnBhcnNlRnVuY3Rpb25zW2NdO1xuICByZXR1cm4gRGF0ZVtiXShhKTtcbn07XG5EYXRlLmNyZWF0ZVBhcnNlciA9IGZ1bmN0aW9uKGZvcm1hdCkge1xuICB2YXIgZnVuY05hbWUgPSBcInBhcnNlXCIgKyBEYXRlLnBhcnNlRnVuY3Rpb25zLmNvdW50Kys7XG4gIHZhciByZWdleE51bSA9IERhdGUucGFyc2VSZWdleGVzLmxlbmd0aDtcbiAgdmFyIGN1cnJlbnRHcm91cCA9IDE7XG4gIERhdGUucGFyc2VGdW5jdGlvbnNbZm9ybWF0XSA9IGZ1bmNOYW1lO1xuICB2YXIgY29kZSA9IFwiRGF0ZS5cIiArIGZ1bmNOYW1lICsgXCIgPSBmdW5jdGlvbihpbnB1dCkge1xcbnZhciB5ID0gLTEsIG0gPSAtMSwgZCA9IC0xLCBoID0gLTEsIGkgPSAtMSwgcyA9IC0xLCB6ID0gLTE7XFxudmFyIGQgPSBuZXcgRGF0ZSgpO1xcbnkgPSBkLmdldEZ1bGxZZWFyKCk7XFxubSA9IGQuZ2V0TW9udGgoKTtcXG5kID0gZC5nZXREYXRlKCk7XFxudmFyIHJlc3VsdHMgPSBpbnB1dC5tYXRjaChEYXRlLnBhcnNlUmVnZXhlc1tcIiArIHJlZ2V4TnVtICsgXCJdKTtcXG5pZiAocmVzdWx0cyAmJiByZXN1bHRzLmxlbmd0aCA+IDApIHtcIjtcbiAgdmFyIHJlZ2V4ID0gXCJcIjtcbiAgdmFyIHNwZWNpYWwgPSBmYWxzZTtcbiAgdmFyIGNoID0gXCJcIjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmb3JtYXQubGVuZ3RoOyArK2kpIHtcbiAgICBjaCA9IGZvcm1hdC5jaGFyQXQoaSk7XG4gICAgaWYgKCFzcGVjaWFsICYmIGNoID09IFwiXFxcXFwiKSB7XG4gICAgICBzcGVjaWFsID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHNwZWNpYWwpIHtcbiAgICAgICAgc3BlY2lhbCA9IGZhbHNlO1xuICAgICAgICByZWdleCArPSBTdHJpbmcuZXNjYXBlKGNoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iaiA9IERhdGUuZm9ybWF0Q29kZVRvUmVnZXgoY2gsIGN1cnJlbnRHcm91cCk7XG4gICAgICAgIGN1cnJlbnRHcm91cCArPSBvYmouZztcbiAgICAgICAgcmVnZXggKz0gb2JqLnM7XG4gICAgICAgIGlmIChvYmouZyAmJiBvYmouYykge1xuICAgICAgICAgIGNvZGUgKz0gb2JqLmM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY29kZSArPSBcImlmICh5ID4gMCAmJiB6ID4gMCl7XFxudmFyIGRveURhdGUgPSBuZXcgRGF0ZSh5LDApO1xcbmRveURhdGUuc2V0RGF0ZSh6KTtcXG5tID0gZG95RGF0ZS5nZXRNb250aCgpO1xcbmQgPSBkb3lEYXRlLmdldERhdGUoKTtcXG59XCI7XG4gIGNvZGUgKz0gXCJpZiAoeSA+IDAgJiYgbSA+PSAwICYmIGQgPiAwICYmIGggPj0gMCAmJiBpID49IDAgJiYgcyA+PSAwKVxcbntyZXR1cm4gbmV3IERhdGUoeSwgbSwgZCwgaCwgaSwgcyk7fVxcbmVsc2UgaWYgKHkgPiAwICYmIG0gPj0gMCAmJiBkID4gMCAmJiBoID49IDAgJiYgaSA+PSAwKVxcbntyZXR1cm4gbmV3IERhdGUoeSwgbSwgZCwgaCwgaSk7fVxcbmVsc2UgaWYgKHkgPiAwICYmIG0gPj0gMCAmJiBkID4gMCAmJiBoID49IDApXFxue3JldHVybiBuZXcgRGF0ZSh5LCBtLCBkLCBoKTt9XFxuZWxzZSBpZiAoeSA+IDAgJiYgbSA+PSAwICYmIGQgPiAwKVxcbntyZXR1cm4gbmV3IERhdGUoeSwgbSwgZCk7fVxcbmVsc2UgaWYgKHkgPiAwICYmIG0gPj0gMClcXG57cmV0dXJuIG5ldyBEYXRlKHksIG0pO31cXG5lbHNlIGlmICh5ID4gMClcXG57cmV0dXJuIG5ldyBEYXRlKHkpO31cXG59cmV0dXJuIG51bGw7fVwiO1xuICBEYXRlLnBhcnNlUmVnZXhlc1tyZWdleE51bV0gPSBuZXcgUmVnRXhwKFwiXlwiICsgcmVnZXggKyBcIiRcIik7XG4gIGV2YWwoY29kZSk7XG59O1xuRGF0ZS5mb3JtYXRDb2RlVG9SZWdleCA9IGZ1bmN0aW9uKGIsIGEpIHtcbiAgc3dpdGNoIChiKSB7XG4gICAgY2FzZSBcIkRcIjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGc6IDAsXG4gICAgICAgIGM6IG51bGwsXG4gICAgICAgIHM6IFwiKD86U3VufE1vbnxUdWV8V2VkfFRodXxGcml8U2F0KVwiXG4gICAgICB9O1xuICAgIGNhc2UgXCJqXCI6XG4gICAgY2FzZSBcImRcIjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGc6IDEsXG4gICAgICAgIGM6IFwiZCA9IHBhcnNlSW50KHJlc3VsdHNbXCIgKyBhICsgXCJdLCAxMCk7XFxuXCIsXG4gICAgICAgIHM6IFwiKFxcXFxkezEsMn0pXCJcbiAgICAgIH07XG4gICAgY2FzZSBcImxcIjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGc6IDAsXG4gICAgICAgIGM6IG51bGwsXG4gICAgICAgIHM6IFwiKD86XCIgKyBEYXRlLmRheU5hbWVzLmpvaW4oXCJ8XCIpICsgXCIpXCJcbiAgICAgIH07XG4gICAgY2FzZSBcIlNcIjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGc6IDAsXG4gICAgICAgIGM6IG51bGwsXG4gICAgICAgIHM6IFwiKD86c3R8bmR8cmR8dGgpXCJcbiAgICAgIH07XG4gICAgY2FzZSBcIndcIjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGc6IDAsXG4gICAgICAgIGM6IG51bGwsXG4gICAgICAgIHM6IFwiXFxcXGRcIlxuICAgICAgfTtcbiAgICBjYXNlIFwielwiOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZzogMSxcbiAgICAgICAgYzogXCJ6ID0gcGFyc2VJbnQocmVzdWx0c1tcIiArIGEgKyBcIl0sIDEwKTtcXG5cIixcbiAgICAgICAgczogXCIoXFxcXGR7MSwzfSlcIlxuICAgICAgfTtcbiAgICBjYXNlIFwiV1wiOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZzogMCxcbiAgICAgICAgYzogbnVsbCxcbiAgICAgICAgczogXCIoPzpcXFxcZHsyfSlcIlxuICAgICAgfTtcbiAgICBjYXNlIFwiRlwiOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZzogMSxcbiAgICAgICAgYzogXCJtID0gcGFyc2VJbnQoRGF0ZS5tb250aE51bWJlcnNbcmVzdWx0c1tcIiArIGEgKyBcIl0uc3Vic3RyaW5nKDAsIDMpXSwgMTApO1xcblwiLFxuICAgICAgICBzOiBcIihcIiArIERhdGUubW9udGhOYW1lcy5qb2luKFwifFwiKSArIFwiKVwiXG4gICAgICB9O1xuICAgIGNhc2UgXCJNXCI6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBnOiAxLFxuICAgICAgICBjOiBcIm0gPSBwYXJzZUludChEYXRlLm1vbnRoTnVtYmVyc1tyZXN1bHRzW1wiICsgYSArIFwiXV0sIDEwKTtcXG5cIixcbiAgICAgICAgczogXCIoSmFufEZlYnxNYXJ8QXByfE1heXxKdW58SnVsfEF1Z3xTZXB8T2N0fE5vdnxEZWMpXCJcbiAgICAgIH07XG4gICAgY2FzZSBcIm5cIjpcbiAgICBjYXNlIFwibVwiOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZzogMSxcbiAgICAgICAgYzogXCJtID0gcGFyc2VJbnQocmVzdWx0c1tcIiArIGEgKyBcIl0sIDEwKSAtIDE7XFxuXCIsXG4gICAgICAgIHM6IFwiKFxcXFxkezEsMn0pXCJcbiAgICAgIH07XG4gICAgY2FzZSBcInRcIjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGc6IDAsXG4gICAgICAgIGM6IG51bGwsXG4gICAgICAgIHM6IFwiXFxcXGR7MSwyfVwiXG4gICAgICB9O1xuICAgIGNhc2UgXCJMXCI6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBnOiAwLFxuICAgICAgICBjOiBudWxsLFxuICAgICAgICBzOiBcIig/OjF8MClcIlxuICAgICAgfTtcbiAgICBjYXNlIFwiWVwiOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZzogMSxcbiAgICAgICAgYzogXCJ5ID0gcGFyc2VJbnQocmVzdWx0c1tcIiArIGEgKyBcIl0sIDEwKTtcXG5cIixcbiAgICAgICAgczogXCIoXFxcXGR7NH0pXCJcbiAgICAgIH07XG4gICAgY2FzZSBcInlcIjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGc6IDEsXG4gICAgICAgIGM6IFwidmFyIHR5ID0gcGFyc2VJbnQocmVzdWx0c1tcIiArIGEgKyBcIl0sIDEwKTtcXG55ID0gdHkgPiBEYXRlLnkya1llYXIgPyAxOTAwICsgdHkgOiAyMDAwICsgdHk7XFxuXCIsXG4gICAgICAgIHM6IFwiKFxcXFxkezEsMn0pXCJcbiAgICAgIH07XG4gICAgY2FzZSBcImFcIjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGc6IDEsXG4gICAgICAgIGM6IFwiaWYgKHJlc3VsdHNbXCIgKyBhICsgXCJdID09ICdhbScpIHtcXG5pZiAoaCA9PSAxMikgeyBoID0gMDsgfVxcbn0gZWxzZSB7IGlmIChoIDwgMTIpIHsgaCArPSAxMjsgfX1cIixcbiAgICAgICAgczogXCIoYW18cG0pXCJcbiAgICAgIH07XG4gICAgY2FzZSBcIkFcIjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGc6IDEsXG4gICAgICAgIGM6IFwiaWYgKHJlc3VsdHNbXCIgKyBhICsgXCJdID09ICdBTScpIHtcXG5pZiAoaCA9PSAxMikgeyBoID0gMDsgfVxcbn0gZWxzZSB7IGlmIChoIDwgMTIpIHsgaCArPSAxMjsgfX1cIixcbiAgICAgICAgczogXCIoQU18UE0pXCJcbiAgICAgIH07XG4gICAgY2FzZSBcImdcIjpcbiAgICBjYXNlIFwiR1wiOlxuICAgIGNhc2UgXCJoXCI6XG4gICAgY2FzZSBcIkhcIjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGc6IDEsXG4gICAgICAgIGM6IFwiaCA9IHBhcnNlSW50KHJlc3VsdHNbXCIgKyBhICsgXCJdLCAxMCk7XFxuXCIsXG4gICAgICAgIHM6IFwiKFxcXFxkezEsMn0pXCJcbiAgICAgIH07XG4gICAgY2FzZSBcImlcIjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGc6IDEsXG4gICAgICAgIGM6IFwiaSA9IHBhcnNlSW50KHJlc3VsdHNbXCIgKyBhICsgXCJdLCAxMCk7XFxuXCIsXG4gICAgICAgIHM6IFwiKFxcXFxkezJ9KVwiXG4gICAgICB9O1xuICAgIGNhc2UgXCJzXCI6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBnOiAxLFxuICAgICAgICBjOiBcInMgPSBwYXJzZUludChyZXN1bHRzW1wiICsgYSArIFwiXSwgMTApO1xcblwiLFxuICAgICAgICBzOiBcIihcXFxcZHsyfSlcIlxuICAgICAgfTtcbiAgICBjYXNlIFwiT1wiOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZzogMCxcbiAgICAgICAgYzogbnVsbCxcbiAgICAgICAgczogXCJbKy1dXFxcXGR7NH1cIlxuICAgICAgfTtcbiAgICBjYXNlIFwiVFwiOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZzogMCxcbiAgICAgICAgYzogbnVsbCxcbiAgICAgICAgczogXCJbQS1aXXszfVwiXG4gICAgICB9O1xuICAgIGNhc2UgXCJaXCI6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBnOiAwLFxuICAgICAgICBjOiBudWxsLFxuICAgICAgICBzOiBcIlsrLV1cXFxcZHsxLDV9XCJcbiAgICAgIH07XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGc6IDAsXG4gICAgICAgIGM6IG51bGwsXG4gICAgICAgIHM6IFN0cmluZy5lc2NhcGUoYilcbiAgICAgIH07XG4gIH1cbn07XG5EYXRlLnByb3RvdHlwZS5nZXRUaW1lem9uZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy50b1N0cmluZygpLnJlcGxhY2UoL14uKj8gKFtBLVpdezN9KSBbMC05XXs0fS4qJC8sIFwiJDFcIikucmVwbGFjZSgvXi4qP1xcKChbQS1aXSlbYS16XSsgKFtBLVpdKVthLXpdKyAoW0EtWl0pW2Etel0rXFwpJC8sIFwiJDEkMiQzXCIpO1xufTtcbkRhdGUucHJvdG90eXBlLmdldEdNVE9mZnNldCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gKHRoaXMuZ2V0VGltZXpvbmVPZmZzZXQoKSA+IDAgPyBcIi1cIiA6IFwiK1wiKSArIFN0cmluZy5sZWZ0UGFkKE1hdGguZmxvb3IoTWF0aC5hYnModGhpcy5nZXRUaW1lem9uZU9mZnNldCgpKSAvIDYwKSwgMiwgXCIwXCIpICsgU3RyaW5nLmxlZnRQYWQoTWF0aC5hYnModGhpcy5nZXRUaW1lem9uZU9mZnNldCgpKSAlIDYwLCAyLCBcIjBcIik7XG59O1xuRGF0ZS5wcm90b3R5cGUuZ2V0RGF5T2ZZZWFyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBhID0gMDtcbiAgRGF0ZS5kYXlzSW5Nb250aFsxXSA9IHRoaXMuaXNMZWFwWWVhcigpID8gMjkgOiAyODtcbiAgZm9yICh2YXIgYiA9IDA7IGIgPCB0aGlzLmdldE1vbnRoKCk7ICsrYikge1xuICAgIGEgKz0gRGF0ZS5kYXlzSW5Nb250aFtiXTtcbiAgfVxuICByZXR1cm4gYSArIHRoaXMuZ2V0RGF0ZSgpO1xufTtcbkRhdGUucHJvdG90eXBlLmdldFdlZWtPZlllYXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGIgPSB0aGlzLmdldERheU9mWWVhcigpICsgKDQgLSB0aGlzLmdldERheSgpKTtcbiAgdmFyIGEgPSBuZXcgRGF0ZSh0aGlzLmdldEZ1bGxZZWFyKCksIDAsIDEpO1xuICB2YXIgYyA9ICg3IC0gYS5nZXREYXkoKSArIDQpO1xuICByZXR1cm4gU3RyaW5nLmxlZnRQYWQoTWF0aC5jZWlsKChiIC0gYykgLyA3KSArIDEsIDIsIFwiMFwiKTtcbn07XG5EYXRlLnByb3RvdHlwZS5pc0xlYXBZZWFyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBhID0gdGhpcy5nZXRGdWxsWWVhcigpO1xuICByZXR1cm4gKChhICYgMykgPT0gMCAmJiAoYSAlIDEwMCB8fCAoYSAlIDQwMCA9PSAwICYmIGEpKSk7XG59O1xuRGF0ZS5wcm90b3R5cGUuZ2V0Rmlyc3REYXlPZk1vbnRoID0gZnVuY3Rpb24oKSB7XG4gIHZhciBhID0gKHRoaXMuZ2V0RGF5KCkgLSAodGhpcy5nZXREYXRlKCkgLSAxKSkgJSA3O1xuICByZXR1cm4gKGEgPCAwKSA/IChhICsgNykgOiBhO1xufTtcbkRhdGUucHJvdG90eXBlLmdldExhc3REYXlPZk1vbnRoID0gZnVuY3Rpb24oKSB7XG4gIHZhciBhID0gKHRoaXMuZ2V0RGF5KCkgKyAoRGF0ZS5kYXlzSW5Nb250aFt0aGlzLmdldE1vbnRoKCldIC0gdGhpcy5nZXREYXRlKCkpKSAlIDc7XG4gIHJldHVybiAoYSA8IDApID8gKGEgKyA3KSA6IGE7XG59O1xuRGF0ZS5wcm90b3R5cGUuZ2V0RGF5c0luTW9udGggPSBmdW5jdGlvbigpIHtcbiAgRGF0ZS5kYXlzSW5Nb250aFsxXSA9IHRoaXMuaXNMZWFwWWVhcigpID8gMjkgOiAyODtcbiAgcmV0dXJuIERhdGUuZGF5c0luTW9udGhbdGhpcy5nZXRNb250aCgpXTtcbn07XG5EYXRlLnByb3RvdHlwZS5nZXRTdWZmaXggPSBmdW5jdGlvbigpIHtcbiAgc3dpdGNoICh0aGlzLmdldERhdGUoKSkge1xuICAgIGNhc2UgMTpcbiAgICBjYXNlIDIxOlxuICAgIGNhc2UgMzE6XG4gICAgICByZXR1cm4gXCJzdFwiO1xuICAgIGNhc2UgMjpcbiAgICBjYXNlIDIyOlxuICAgICAgcmV0dXJuIFwibmRcIjtcbiAgICBjYXNlIDM6XG4gICAgY2FzZSAyMzpcbiAgICAgIHJldHVybiBcInJkXCI7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBcInRoXCI7XG4gIH1cbn07XG5TdHJpbmcuZXNjYXBlID0gZnVuY3Rpb24oYSkge1xuICByZXR1cm4gYS5yZXBsYWNlKC8oJ3xcXFxcKS9nLCBcIlxcXFwkMVwiKTtcbn07XG5TdHJpbmcubGVmdFBhZCA9IGZ1bmN0aW9uKGQsIGIsIGMpIHtcbiAgdmFyIGEgPSBuZXcgU3RyaW5nKGQpO1xuICBpZiAoYyA9PSBudWxsKSB7XG4gICAgYyA9IFwiIFwiO1xuICB9XG4gIHdoaWxlIChhLmxlbmd0aCA8IGIpIHtcbiAgICBhID0gYyArIGE7XG4gIH1cbiAgcmV0dXJuIGE7XG59O1xuRGF0ZS5kYXlzSW5Nb250aCA9IFszMSwgMjgsIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxXTtcbkRhdGUubW9udGhOYW1lcyA9IFtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdO1xuRGF0ZS5kYXlOYW1lcyA9IFtcIlN1bmRheVwiLCBcIk1vbmRheVwiLCBcIlR1ZXNkYXlcIiwgXCJXZWRuZXNkYXlcIiwgXCJUaHVyc2RheVwiLCBcIkZyaWRheVwiLCBcIlNhdHVyZGF5XCJdO1xuRGF0ZS55MmtZZWFyID0gNTA7XG5EYXRlLm1vbnRoTnVtYmVycyA9IHtcbiAgSmFuOiAwLFxuICBGZWI6IDEsXG4gIE1hcjogMixcbiAgQXByOiAzLFxuICBNYXk6IDQsXG4gIEp1bjogNSxcbiAgSnVsOiA2LFxuICBBdWc6IDcsXG4gIFNlcDogOCxcbiAgT2N0OiA5LFxuICBOb3Y6IDEwLFxuICBEZWM6IDExXG59O1xuRGF0ZS5wYXR0ZXJucyA9IHtcbiAgSVNPODYwMUxvbmdQYXR0ZXJuOiBcIlktbS1kIEg6aTpzXCIsXG4gIElTTzg2MDFTaG9ydFBhdHRlcm46IFwiWS1tLWRcIixcbiAgU2hvcnREYXRlUGF0dGVybjogXCJuL2ovWVwiLFxuICBMb25nRGF0ZVBhdHRlcm46IFwibCwgRiBkLCBZXCIsXG4gIEZ1bGxEYXRlVGltZVBhdHRlcm46IFwibCwgRiBkLCBZIGc6aTpzIEFcIixcbiAgTW9udGhEYXlQYXR0ZXJuOiBcIkYgZFwiLFxuICBTaG9ydFRpbWVQYXR0ZXJuOiBcImc6aSBBXCIsXG4gIExvbmdUaW1lUGF0dGVybjogXCJnOmk6cyBBXCIsXG4gIFNvcnRhYmxlRGF0ZVRpbWVQYXR0ZXJuOiBcIlktbS1kXFxcXFRIOmk6c1wiLFxuICBVbml2ZXJzYWxTb3J0YWJsZURhdGVUaW1lUGF0dGVybjogXCJZLW0tZCBIOmk6c09cIixcbiAgWWVhck1vbnRoUGF0dGVybjogXCJGLCBZXCJcbn07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9qcy92ZW5kb3JzL2pxdWVyeS5kYXRldGltZXBpY2tlci5taW4uanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ }

/******/ });